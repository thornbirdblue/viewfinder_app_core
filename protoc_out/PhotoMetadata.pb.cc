// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PhotoMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PhotoMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PhotoMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoMetadata_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoMetadata_Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoMetadata_Images_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoMetadata_Images_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PhotoMetadata_PhotoType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PhotoPathMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoPathMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PhotoMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PhotoMetadata_2eproto() {
  protobuf_AddDesc_PhotoMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PhotoMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  PhotoMetadata_descriptor_ = file->message_type(0);
  static const int PhotoMetadata_offsets_[54] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, episode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, sharing_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, deprecated_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, aspect_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, placemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, shared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, deprecated_adjustment_xmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, asset_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, asset_fingerprints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, perceptual_fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, candidate_duplicates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, label_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, label_hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, label_unshared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, label_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, update_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, upload_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, upload_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, upload_medium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, upload_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, upload_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, download_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, download_medium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, download_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, download_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_update_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_upload_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_upload_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_upload_medium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_upload_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_upload_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_download_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_download_medium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_download_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_download_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_asset_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_asset_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_asset_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_ui_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_ui_full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_ui_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_timestamp_invalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, error_placemark_invalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, placemark_histogram_),
  };
  PhotoMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhotoMetadata_descriptor_,
      PhotoMetadata::internal_default_instance(),
      PhotoMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, _has_bits_),
      -1,
      -1,
      sizeof(PhotoMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata, _internal_metadata_));
  PhotoMetadata_Image_descriptor_ = PhotoMetadata_descriptor_->nested_type(0);
  static const int PhotoMetadata_Image_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Image, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Image, md5_),
  };
  PhotoMetadata_Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhotoMetadata_Image_descriptor_,
      PhotoMetadata_Image::internal_default_instance(),
      PhotoMetadata_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Image, _has_bits_),
      -1,
      -1,
      sizeof(PhotoMetadata_Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Image, _internal_metadata_));
  PhotoMetadata_Images_descriptor_ = PhotoMetadata_descriptor_->nested_type(1);
  static const int PhotoMetadata_Images_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Images, tn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Images, med_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Images, full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Images, orig_),
  };
  PhotoMetadata_Images_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhotoMetadata_Images_descriptor_,
      PhotoMetadata_Images::internal_default_instance(),
      PhotoMetadata_Images_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Images, _has_bits_),
      -1,
      -1,
      sizeof(PhotoMetadata_Images),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoMetadata_Images, _internal_metadata_));
  PhotoMetadata_PhotoType_descriptor_ = PhotoMetadata_descriptor_->enum_type(0);
  PhotoPathMetadata_descriptor_ = file->message_type(1);
  static const int PhotoPathMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoPathMetadata, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoPathMetadata, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoPathMetadata, access_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoPathMetadata, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoPathMetadata, parent_size_),
  };
  PhotoPathMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhotoPathMetadata_descriptor_,
      PhotoPathMetadata::internal_default_instance(),
      PhotoPathMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoPathMetadata, _has_bits_),
      -1,
      -1,
      sizeof(PhotoPathMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoPathMetadata, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PhotoMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhotoMetadata_descriptor_, PhotoMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhotoMetadata_Image_descriptor_, PhotoMetadata_Image::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhotoMetadata_Images_descriptor_, PhotoMetadata_Images::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhotoPathMetadata_descriptor_, PhotoPathMetadata::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PhotoMetadata_2eproto() {
  PhotoMetadata_default_instance_.Shutdown();
  delete PhotoMetadata_reflection_;
  PhotoMetadata_Image_default_instance_.Shutdown();
  delete PhotoMetadata_Image_reflection_;
  PhotoMetadata_Images_default_instance_.Shutdown();
  delete PhotoMetadata_Images_reflection_;
  PhotoPathMetadata_default_instance_.Shutdown();
  delete PhotoPathMetadata_reflection_;
}

void protobuf_InitDefaults_PhotoMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_ContactMetadata_2eproto();
  ::protobuf_InitDefaults_ContentIds_2eproto();
  ::protobuf_InitDefaults_ImageFingerprint_2eproto();
  ::protobuf_InitDefaults_Location_2eproto();
  ::protobuf_InitDefaults_Placemark_2eproto();
  ::protobuf_InitDefaults_QueueMetadata_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  PhotoMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PhotoMetadata_Image_default_instance_.DefaultConstruct();
  PhotoMetadata_Images_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PhotoPathMetadata_default_instance_.DefaultConstruct();
  PhotoMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  PhotoMetadata_Image_default_instance_.get_mutable()->InitAsDefaultInstance();
  PhotoMetadata_Images_default_instance_.get_mutable()->InitAsDefaultInstance();
  PhotoPathMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PhotoMetadata_2eproto_once_);
void protobuf_InitDefaults_PhotoMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PhotoMetadata_2eproto_once_,
                 &protobuf_InitDefaults_PhotoMetadata_2eproto_impl);
}
void protobuf_AddDesc_PhotoMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PhotoMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PhotoMetadata.proto\032\025ContactMetadata.p"
    "roto\032\020ContentIds.proto\032\026ImageFingerprint"
    ".proto\032\016Location.proto\032\017Placemark.proto\032"
    "\023QueueMetadata.proto\"\311\r\n\rPhotoMetadata\022\024"
    "\n\002id\030\001 \001(\0132\010.PhotoId\022\033\n\tparent_id\030\002 \001(\0132"
    "\010.PhotoId\022\036\n\nepisode_id\030\003 \001(\0132\n.EpisodeI"
    "d\022\017\n\007user_id\030\004 \001(\003\022\027\n\017sharing_user_id\030\005 "
    "\001(\003\022\036\n\026DEPRECATED_orientation\030\006 \001(\005\022\024\n\014a"
    "spect_ratio\030\007 \001(\001\022\021\n\ttimestamp\030\010 \001(\001\022\033\n\010"
    "location\030\t \001(\0132\t.Location\022\035\n\tplacemark\030\n"
    " \001(\0132\n.Placemark\022\017\n\007caption\030\013 \001(\t\022\014\n\004lin"
    "k\030\014 \001(\t\022%\n\006images\030\016 \001(\0132\025.PhotoMetadata."
    "Images\022\035\n\005queue\030\017 \001(\0132\016.QueueMetadata\022\016\n"
    "\006shared\030\020 \001(\010\022!\n\031DEPRECATED_adjustment_x"
    "mp\030\021 \001(\t\022\022\n\nasset_keys\030\022 \003(\t\022\032\n\022asset_fi"
    "ngerprints\030\023 \003(\t\0221\n\026perceptual_fingerpri"
    "nt\030\030 \001(\0132\021.ImageFingerprint\022\034\n\024candidate"
    "_duplicates\030\031 \003(\003\022\025\n\rlabel_removed\030\024 \001(\010"
    "\022\024\n\014label_hidden\030\027 \001(\010\022\026\n\016label_unshared"
    "\030\025 \001(\010\022\023\n\013label_error\030\026 \001(\010\022\027\n\017update_me"
    "tadata\0301 \001(\010\022\027\n\017upload_metadata\030( \001(\010\022\030\n"
    "\020upload_thumbnail\030) \001(\010\022\025\n\rupload_medium"
    "\030* \001(\010\022\023\n\013upload_full\030+ \001(\010\022\027\n\017upload_or"
    "iginal\030, \001(\010\022\032\n\022download_thumbnail\030- \001(\010"
    "\022\027\n\017download_medium\030. \001(\010\022\025\n\rdownload_fu"
    "ll\030/ \001(\010\022\031\n\021download_original\0300 \001(\010\022\035\n\025e"
    "rror_update_metadata\030M \001(\010\022\035\n\025error_uplo"
    "ad_metadata\030K \001(\010\022\036\n\026error_upload_thumbn"
    "ail\030< \001(\010\022\033\n\023error_upload_medium\030= \001(\010\022\031"
    "\n\021error_upload_full\030> \001(\010\022\035\n\025error_uploa"
    "d_original\030\? \001(\010\022 \n\030error_download_thumb"
    "nail\030@ \001(\010\022\035\n\025error_download_medium\030A \001("
    "\010\022\033\n\023error_download_full\030B \001(\010\022\037\n\027error_"
    "download_original\030C \001(\010\022\035\n\025error_asset_t"
    "humbnail\030D \001(\010\022\030\n\020error_asset_full\030E \001(\010"
    "\022\034\n\024error_asset_original\030F \001(\010\022\032\n\022error_"
    "ui_thumbnail\030G \001(\010\022\025\n\rerror_ui_full\030H \001("
    "\010\022\031\n\021error_ui_original\030J \001(\010\022\027\n\017error_ti"
    "mestamp\030I \001(\010\022\037\n\027error_timestamp_invalid"
    "\030L \001(\010\022\037\n\027error_placemark_invalid\030N \001(\010\022"
    "\033\n\023placemark_histogram\030Z \001(\010\032\"\n\005Image\022\014\n"
    "\004size\030\001 \001(\005\022\013\n\003md5\030\002 \001(\t\032\225\001\n\006Images\022 \n\002t"
    "n\030\001 \001(\0132\024.PhotoMetadata.Image\022!\n\003med\030\002 \001"
    "(\0132\024.PhotoMetadata.Image\022\"\n\004full\030\003 \001(\0132\024"
    ".PhotoMetadata.Image\022\"\n\004orig\030\004 \001(\0132\024.Pho"
    "toMetadata.Image\">\n\tPhotoType\022\r\n\tTHUMBNA"
    "IL\020\001\022\n\n\006MEDIUM\020\002\022\010\n\004FULL\020\004\022\014\n\010ORIGINAL\020\010"
    "\"k\n\021PhotoPathMetadata\022\021\n\tserver_id\030\001 \001(\t"
    "\022\013\n\003md5\030\002 \001(\t\022\023\n\013access_time\030\003 \001(\r\022\014\n\004si"
    "ze\030\004 \001(\003\022\023\n\013parent_size\030\005 \001(\005B&\n\023co.view"
    "finder.protoB\017PhotoMetadataPB", 2029);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PhotoMetadata.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_ContactMetadata_2eproto();
  ::protobuf_AddDesc_ContentIds_2eproto();
  ::protobuf_AddDesc_ImageFingerprint_2eproto();
  ::protobuf_AddDesc_Location_2eproto();
  ::protobuf_AddDesc_Placemark_2eproto();
  ::protobuf_AddDesc_QueueMetadata_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PhotoMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PhotoMetadata_2eproto_once_);
void protobuf_AddDesc_PhotoMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PhotoMetadata_2eproto_once_,
                 &protobuf_AddDesc_PhotoMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PhotoMetadata_2eproto {
  StaticDescriptorInitializer_PhotoMetadata_2eproto() {
    protobuf_AddDesc_PhotoMetadata_2eproto();
  }
} static_descriptor_initializer_PhotoMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* PhotoMetadata_PhotoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoMetadata_PhotoType_descriptor_;
}
bool PhotoMetadata_PhotoType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PhotoMetadata_PhotoType PhotoMetadata::THUMBNAIL;
const PhotoMetadata_PhotoType PhotoMetadata::MEDIUM;
const PhotoMetadata_PhotoType PhotoMetadata::FULL;
const PhotoMetadata_PhotoType PhotoMetadata::ORIGINAL;
const PhotoMetadata_PhotoType PhotoMetadata::PhotoType_MIN;
const PhotoMetadata_PhotoType PhotoMetadata::PhotoType_MAX;
const int PhotoMetadata::PhotoType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoMetadata_Image::kSizeFieldNumber;
const int PhotoMetadata_Image::kMd5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoMetadata_Image::PhotoMetadata_Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PhotoMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhotoMetadata.Image)
}

void PhotoMetadata_Image::InitAsDefaultInstance() {
}

PhotoMetadata_Image::PhotoMetadata_Image(const PhotoMetadata_Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PhotoMetadata.Image)
}

void PhotoMetadata_Image::SharedCtor() {
  _cached_size_ = 0;
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

PhotoMetadata_Image::~PhotoMetadata_Image() {
  // @@protoc_insertion_point(destructor:PhotoMetadata.Image)
  SharedDtor();
}

void PhotoMetadata_Image::SharedDtor() {
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhotoMetadata_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoMetadata_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoMetadata_Image_descriptor_;
}

const PhotoMetadata_Image& PhotoMetadata_Image::default_instance() {
  protobuf_InitDefaults_PhotoMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PhotoMetadata_Image> PhotoMetadata_Image_default_instance_;

PhotoMetadata_Image* PhotoMetadata_Image::New(::google::protobuf::Arena* arena) const {
  PhotoMetadata_Image* n = new PhotoMetadata_Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoMetadata_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:PhotoMetadata.Image)
  if (_has_bits_[0 / 32] & 3u) {
    size_ = 0;
    if (has_md5()) {
      md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PhotoMetadata_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PhotoMetadata.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (tag == 8) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_md5;
        break;
      }

      // optional string md5 = 2;
      case 2: {
        if (tag == 18) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoMetadata.Image.md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PhotoMetadata.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PhotoMetadata.Image)
  return false;
#undef DO_
}

void PhotoMetadata_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PhotoMetadata.Image)
  // optional int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // optional string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.Image.md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->md5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PhotoMetadata.Image)
}

::google::protobuf::uint8* PhotoMetadata_Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PhotoMetadata.Image)
  // optional int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // optional string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.Image.md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->md5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PhotoMetadata.Image)
  return target;
}

size_t PhotoMetadata_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhotoMetadata.Image)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional string md5 = 2;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoMetadata_Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhotoMetadata.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhotoMetadata_Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoMetadata_Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhotoMetadata.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhotoMetadata.Image)
    UnsafeMergeFrom(*source);
  }
}

void PhotoMetadata_Image::MergeFrom(const PhotoMetadata_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhotoMetadata.Image)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PhotoMetadata_Image::UnsafeMergeFrom(const PhotoMetadata_Image& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_md5()) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PhotoMetadata_Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhotoMetadata.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoMetadata_Image::CopyFrom(const PhotoMetadata_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhotoMetadata.Image)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PhotoMetadata_Image::IsInitialized() const {

  return true;
}

void PhotoMetadata_Image::Swap(PhotoMetadata_Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoMetadata_Image::InternalSwap(PhotoMetadata_Image* other) {
  std::swap(size_, other->size_);
  md5_.Swap(&other->md5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoMetadata_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoMetadata_Image_descriptor_;
  metadata.reflection = PhotoMetadata_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoMetadata_Images::kTnFieldNumber;
const int PhotoMetadata_Images::kMedFieldNumber;
const int PhotoMetadata_Images::kFullFieldNumber;
const int PhotoMetadata_Images::kOrigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoMetadata_Images::PhotoMetadata_Images()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PhotoMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhotoMetadata.Images)
}

void PhotoMetadata_Images::InitAsDefaultInstance() {
  tn_ = const_cast< ::PhotoMetadata_Image*>(
      ::PhotoMetadata_Image::internal_default_instance());
  med_ = const_cast< ::PhotoMetadata_Image*>(
      ::PhotoMetadata_Image::internal_default_instance());
  full_ = const_cast< ::PhotoMetadata_Image*>(
      ::PhotoMetadata_Image::internal_default_instance());
  orig_ = const_cast< ::PhotoMetadata_Image*>(
      ::PhotoMetadata_Image::internal_default_instance());
}

PhotoMetadata_Images::PhotoMetadata_Images(const PhotoMetadata_Images& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PhotoMetadata.Images)
}

void PhotoMetadata_Images::SharedCtor() {
  _cached_size_ = 0;
  tn_ = NULL;
  med_ = NULL;
  full_ = NULL;
  orig_ = NULL;
}

PhotoMetadata_Images::~PhotoMetadata_Images() {
  // @@protoc_insertion_point(destructor:PhotoMetadata.Images)
  SharedDtor();
}

void PhotoMetadata_Images::SharedDtor() {
  if (this != &PhotoMetadata_Images_default_instance_.get()) {
    delete tn_;
    delete med_;
    delete full_;
    delete orig_;
  }
}

void PhotoMetadata_Images::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoMetadata_Images::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoMetadata_Images_descriptor_;
}

const PhotoMetadata_Images& PhotoMetadata_Images::default_instance() {
  protobuf_InitDefaults_PhotoMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PhotoMetadata_Images> PhotoMetadata_Images_default_instance_;

PhotoMetadata_Images* PhotoMetadata_Images::New(::google::protobuf::Arena* arena) const {
  PhotoMetadata_Images* n = new PhotoMetadata_Images;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoMetadata_Images::Clear() {
// @@protoc_insertion_point(message_clear_start:PhotoMetadata.Images)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_tn()) {
      if (tn_ != NULL) tn_->::PhotoMetadata_Image::Clear();
    }
    if (has_med()) {
      if (med_ != NULL) med_->::PhotoMetadata_Image::Clear();
    }
    if (has_full()) {
      if (full_ != NULL) full_->::PhotoMetadata_Image::Clear();
    }
    if (has_orig()) {
      if (orig_ != NULL) orig_->::PhotoMetadata_Image::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PhotoMetadata_Images::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PhotoMetadata.Images)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PhotoMetadata.Image tn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_med;
        break;
      }

      // optional .PhotoMetadata.Image med = 2;
      case 2: {
        if (tag == 18) {
         parse_med:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_med()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_full;
        break;
      }

      // optional .PhotoMetadata.Image full = 3;
      case 3: {
        if (tag == 26) {
         parse_full:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_full()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orig;
        break;
      }

      // optional .PhotoMetadata.Image orig = 4;
      case 4: {
        if (tag == 34) {
         parse_orig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PhotoMetadata.Images)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PhotoMetadata.Images)
  return false;
#undef DO_
}

void PhotoMetadata_Images::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PhotoMetadata.Images)
  // optional .PhotoMetadata.Image tn = 1;
  if (has_tn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tn_, output);
  }

  // optional .PhotoMetadata.Image med = 2;
  if (has_med()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->med_, output);
  }

  // optional .PhotoMetadata.Image full = 3;
  if (has_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->full_, output);
  }

  // optional .PhotoMetadata.Image orig = 4;
  if (has_orig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->orig_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PhotoMetadata.Images)
}

::google::protobuf::uint8* PhotoMetadata_Images::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PhotoMetadata.Images)
  // optional .PhotoMetadata.Image tn = 1;
  if (has_tn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tn_, false, target);
  }

  // optional .PhotoMetadata.Image med = 2;
  if (has_med()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->med_, false, target);
  }

  // optional .PhotoMetadata.Image full = 3;
  if (has_full()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->full_, false, target);
  }

  // optional .PhotoMetadata.Image orig = 4;
  if (has_orig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->orig_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PhotoMetadata.Images)
  return target;
}

size_t PhotoMetadata_Images::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhotoMetadata.Images)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .PhotoMetadata.Image tn = 1;
    if (has_tn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tn_);
    }

    // optional .PhotoMetadata.Image med = 2;
    if (has_med()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->med_);
    }

    // optional .PhotoMetadata.Image full = 3;
    if (has_full()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->full_);
    }

    // optional .PhotoMetadata.Image orig = 4;
    if (has_orig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orig_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoMetadata_Images::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhotoMetadata.Images)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhotoMetadata_Images* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoMetadata_Images>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhotoMetadata.Images)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhotoMetadata.Images)
    UnsafeMergeFrom(*source);
  }
}

void PhotoMetadata_Images::MergeFrom(const PhotoMetadata_Images& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhotoMetadata.Images)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PhotoMetadata_Images::UnsafeMergeFrom(const PhotoMetadata_Images& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tn()) {
      mutable_tn()->::PhotoMetadata_Image::MergeFrom(from.tn());
    }
    if (from.has_med()) {
      mutable_med()->::PhotoMetadata_Image::MergeFrom(from.med());
    }
    if (from.has_full()) {
      mutable_full()->::PhotoMetadata_Image::MergeFrom(from.full());
    }
    if (from.has_orig()) {
      mutable_orig()->::PhotoMetadata_Image::MergeFrom(from.orig());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PhotoMetadata_Images::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhotoMetadata.Images)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoMetadata_Images::CopyFrom(const PhotoMetadata_Images& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhotoMetadata.Images)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PhotoMetadata_Images::IsInitialized() const {

  return true;
}

void PhotoMetadata_Images::Swap(PhotoMetadata_Images* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoMetadata_Images::InternalSwap(PhotoMetadata_Images* other) {
  std::swap(tn_, other->tn_);
  std::swap(med_, other->med_);
  std::swap(full_, other->full_);
  std::swap(orig_, other->orig_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoMetadata_Images::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoMetadata_Images_descriptor_;
  metadata.reflection = PhotoMetadata_Images_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoMetadata::kIdFieldNumber;
const int PhotoMetadata::kParentIdFieldNumber;
const int PhotoMetadata::kEpisodeIdFieldNumber;
const int PhotoMetadata::kUserIdFieldNumber;
const int PhotoMetadata::kSharingUserIdFieldNumber;
const int PhotoMetadata::kDEPRECATEDOrientationFieldNumber;
const int PhotoMetadata::kAspectRatioFieldNumber;
const int PhotoMetadata::kTimestampFieldNumber;
const int PhotoMetadata::kLocationFieldNumber;
const int PhotoMetadata::kPlacemarkFieldNumber;
const int PhotoMetadata::kCaptionFieldNumber;
const int PhotoMetadata::kLinkFieldNumber;
const int PhotoMetadata::kImagesFieldNumber;
const int PhotoMetadata::kQueueFieldNumber;
const int PhotoMetadata::kSharedFieldNumber;
const int PhotoMetadata::kDEPRECATEDAdjustmentXmpFieldNumber;
const int PhotoMetadata::kAssetKeysFieldNumber;
const int PhotoMetadata::kAssetFingerprintsFieldNumber;
const int PhotoMetadata::kPerceptualFingerprintFieldNumber;
const int PhotoMetadata::kCandidateDuplicatesFieldNumber;
const int PhotoMetadata::kLabelRemovedFieldNumber;
const int PhotoMetadata::kLabelHiddenFieldNumber;
const int PhotoMetadata::kLabelUnsharedFieldNumber;
const int PhotoMetadata::kLabelErrorFieldNumber;
const int PhotoMetadata::kUpdateMetadataFieldNumber;
const int PhotoMetadata::kUploadMetadataFieldNumber;
const int PhotoMetadata::kUploadThumbnailFieldNumber;
const int PhotoMetadata::kUploadMediumFieldNumber;
const int PhotoMetadata::kUploadFullFieldNumber;
const int PhotoMetadata::kUploadOriginalFieldNumber;
const int PhotoMetadata::kDownloadThumbnailFieldNumber;
const int PhotoMetadata::kDownloadMediumFieldNumber;
const int PhotoMetadata::kDownloadFullFieldNumber;
const int PhotoMetadata::kDownloadOriginalFieldNumber;
const int PhotoMetadata::kErrorUpdateMetadataFieldNumber;
const int PhotoMetadata::kErrorUploadMetadataFieldNumber;
const int PhotoMetadata::kErrorUploadThumbnailFieldNumber;
const int PhotoMetadata::kErrorUploadMediumFieldNumber;
const int PhotoMetadata::kErrorUploadFullFieldNumber;
const int PhotoMetadata::kErrorUploadOriginalFieldNumber;
const int PhotoMetadata::kErrorDownloadThumbnailFieldNumber;
const int PhotoMetadata::kErrorDownloadMediumFieldNumber;
const int PhotoMetadata::kErrorDownloadFullFieldNumber;
const int PhotoMetadata::kErrorDownloadOriginalFieldNumber;
const int PhotoMetadata::kErrorAssetThumbnailFieldNumber;
const int PhotoMetadata::kErrorAssetFullFieldNumber;
const int PhotoMetadata::kErrorAssetOriginalFieldNumber;
const int PhotoMetadata::kErrorUiThumbnailFieldNumber;
const int PhotoMetadata::kErrorUiFullFieldNumber;
const int PhotoMetadata::kErrorUiOriginalFieldNumber;
const int PhotoMetadata::kErrorTimestampFieldNumber;
const int PhotoMetadata::kErrorTimestampInvalidFieldNumber;
const int PhotoMetadata::kErrorPlacemarkInvalidFieldNumber;
const int PhotoMetadata::kPlacemarkHistogramFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoMetadata::PhotoMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PhotoMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhotoMetadata)
}

void PhotoMetadata::InitAsDefaultInstance() {
  id_ = const_cast< ::PhotoId*>(
      ::PhotoId::internal_default_instance());
  parent_id_ = const_cast< ::PhotoId*>(
      ::PhotoId::internal_default_instance());
  episode_id_ = const_cast< ::EpisodeId*>(
      ::EpisodeId::internal_default_instance());
  location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  placemark_ = const_cast< ::Placemark*>(
      ::Placemark::internal_default_instance());
  images_ = const_cast< ::PhotoMetadata_Images*>(
      ::PhotoMetadata_Images::internal_default_instance());
  queue_ = const_cast< ::QueueMetadata*>(
      ::QueueMetadata::internal_default_instance());
  perceptual_fingerprint_ = const_cast< ::ImageFingerprint*>(
      ::ImageFingerprint::internal_default_instance());
}

PhotoMetadata::PhotoMetadata(const PhotoMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PhotoMetadata)
}

void PhotoMetadata::SharedCtor() {
  caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_adjustment_xmp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = NULL;
  parent_id_ = NULL;
  episode_id_ = NULL;
  location_ = NULL;
  placemark_ = NULL;
  images_ = NULL;
  queue_ = NULL;
  perceptual_fingerprint_ = NULL;
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&placemark_histogram_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(placemark_histogram_));
  _cached_size_ = 0;
}

PhotoMetadata::~PhotoMetadata() {
  // @@protoc_insertion_point(destructor:PhotoMetadata)
  SharedDtor();
}

void PhotoMetadata::SharedDtor() {
  caption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_adjustment_xmp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &PhotoMetadata_default_instance_.get()) {
    delete id_;
    delete parent_id_;
    delete episode_id_;
    delete location_;
    delete placemark_;
    delete images_;
    delete queue_;
    delete perceptual_fingerprint_;
  }
}

void PhotoMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoMetadata_descriptor_;
}

const PhotoMetadata& PhotoMetadata::default_instance() {
  protobuf_InitDefaults_PhotoMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PhotoMetadata> PhotoMetadata_default_instance_;

PhotoMetadata* PhotoMetadata::New(::google::protobuf::Arena* arena) const {
  PhotoMetadata* n = new PhotoMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:PhotoMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PhotoMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PhotoMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(user_id_, deprecated_orientation_);
    if (has_id()) {
      if (id_ != NULL) id_->::PhotoId::Clear();
    }
    if (has_parent_id()) {
      if (parent_id_ != NULL) parent_id_->::PhotoId::Clear();
    }
    if (has_episode_id()) {
      if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_location()) {
      if (location_ != NULL) location_->::Location::Clear();
    }
    if (has_placemark()) {
      if (placemark_ != NULL) placemark_->::Placemark::Clear();
    }
    if (has_caption()) {
      caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_link()) {
      link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_images()) {
      if (images_ != NULL) images_->::PhotoMetadata_Images::Clear();
    }
    if (has_queue()) {
      if (queue_ != NULL) queue_->::QueueMetadata::Clear();
    }
    shared_ = false;
    if (has_deprecated_adjustment_xmp()) {
      deprecated_adjustment_xmp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 15990784u) {
    ZR_(label_removed_, label_error_);
    if (has_perceptual_fingerprint()) {
      if (perceptual_fingerprint_ != NULL) perceptual_fingerprint_->::ImageFingerprint::Clear();
    }
  }
  ZR_(update_metadata_, download_medium_);
  ZR_(download_full_, error_upload_original_);
  ZR_(error_download_thumbnail_, error_ui_thumbnail_);
  ZR_(error_ui_full_, placemark_histogram_);

#undef ZR_HELPER_
#undef ZR_

  asset_keys_.Clear();
  asset_fingerprints_.Clear();
  candidate_duplicates_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PhotoMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PhotoMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PhotoId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parent_id;
        break;
      }

      // optional .PhotoId parent_id = 2;
      case 2: {
        if (tag == 18) {
         parse_parent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_episode_id;
        break;
      }

      // optional .EpisodeId episode_id = 3;
      case 3: {
        if (tag == 26) {
         parse_episode_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_episode_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sharing_user_id;
        break;
      }

      // optional int64 sharing_user_id = 5;
      case 5: {
        if (tag == 40) {
         parse_sharing_user_id:
          set_has_sharing_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sharing_user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DEPRECATED_orientation;
        break;
      }

      // optional int32 DEPRECATED_orientation = 6;
      case 6: {
        if (tag == 48) {
         parse_DEPRECATED_orientation:
          set_has_deprecated_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_orientation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_aspect_ratio;
        break;
      }

      // optional double aspect_ratio = 7;
      case 7: {
        if (tag == 57) {
         parse_aspect_ratio:
          set_has_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 8;
      case 8: {
        if (tag == 65) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_location;
        break;
      }

      // optional .Location location = 9;
      case 9: {
        if (tag == 74) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_placemark;
        break;
      }

      // optional .Placemark placemark = 10;
      case 10: {
        if (tag == 82) {
         parse_placemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placemark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_caption;
        break;
      }

      // optional string caption = 11;
      case 11: {
        if (tag == 90) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoMetadata.caption");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_link;
        break;
      }

      // optional string link = 12;
      case 12: {
        if (tag == 98) {
         parse_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link().data(), this->link().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoMetadata.link");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_images;
        break;
      }

      // optional .PhotoMetadata.Images images = 14;
      case 14: {
        if (tag == 114) {
         parse_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_images()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_queue;
        break;
      }

      // optional .QueueMetadata queue = 15;
      case 15: {
        if (tag == 122) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_shared;
        break;
      }

      // optional bool shared = 16;
      case 16: {
        if (tag == 128) {
         parse_shared:
          set_has_shared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_DEPRECATED_adjustment_xmp;
        break;
      }

      // optional string DEPRECATED_adjustment_xmp = 17;
      case 17: {
        if (tag == 138) {
         parse_DEPRECATED_adjustment_xmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_adjustment_xmp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_adjustment_xmp().data(), this->deprecated_adjustment_xmp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoMetadata.DEPRECATED_adjustment_xmp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_asset_keys;
        break;
      }

      // repeated string asset_keys = 18;
      case 18: {
        if (tag == 146) {
         parse_asset_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_asset_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asset_keys(this->asset_keys_size() - 1).data(),
            this->asset_keys(this->asset_keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoMetadata.asset_keys");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_asset_keys;
        if (input->ExpectTag(154)) goto parse_asset_fingerprints;
        break;
      }

      // repeated string asset_fingerprints = 19;
      case 19: {
        if (tag == 154) {
         parse_asset_fingerprints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_asset_fingerprints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asset_fingerprints(this->asset_fingerprints_size() - 1).data(),
            this->asset_fingerprints(this->asset_fingerprints_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoMetadata.asset_fingerprints");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_asset_fingerprints;
        if (input->ExpectTag(160)) goto parse_label_removed;
        break;
      }

      // optional bool label_removed = 20;
      case 20: {
        if (tag == 160) {
         parse_label_removed:
          set_has_label_removed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_removed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_label_unshared;
        break;
      }

      // optional bool label_unshared = 21;
      case 21: {
        if (tag == 168) {
         parse_label_unshared:
          set_has_label_unshared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_unshared_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_label_error;
        break;
      }

      // optional bool label_error = 22;
      case 22: {
        if (tag == 176) {
         parse_label_error:
          set_has_label_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_label_hidden;
        break;
      }

      // optional bool label_hidden = 23;
      case 23: {
        if (tag == 184) {
         parse_label_hidden:
          set_has_label_hidden();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_hidden_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_perceptual_fingerprint;
        break;
      }

      // optional .ImageFingerprint perceptual_fingerprint = 24;
      case 24: {
        if (tag == 194) {
         parse_perceptual_fingerprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perceptual_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_candidate_duplicates;
        break;
      }

      // repeated int64 candidate_duplicates = 25;
      case 25: {
        if (tag == 200) {
         parse_candidate_duplicates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 200, input, this->mutable_candidate_duplicates())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_candidate_duplicates())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_candidate_duplicates;
        if (input->ExpectTag(320)) goto parse_upload_metadata;
        break;
      }

      // optional bool upload_metadata = 40;
      case 40: {
        if (tag == 320) {
         parse_upload_metadata:
          set_has_upload_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_metadata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_upload_thumbnail;
        break;
      }

      // optional bool upload_thumbnail = 41;
      case 41: {
        if (tag == 328) {
         parse_upload_thumbnail:
          set_has_upload_thumbnail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_thumbnail_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_upload_medium;
        break;
      }

      // optional bool upload_medium = 42;
      case 42: {
        if (tag == 336) {
         parse_upload_medium:
          set_has_upload_medium();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_medium_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_upload_full;
        break;
      }

      // optional bool upload_full = 43;
      case 43: {
        if (tag == 344) {
         parse_upload_full:
          set_has_upload_full();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_full_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_upload_original;
        break;
      }

      // optional bool upload_original = 44;
      case 44: {
        if (tag == 352) {
         parse_upload_original:
          set_has_upload_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_original_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_download_thumbnail;
        break;
      }

      // optional bool download_thumbnail = 45;
      case 45: {
        if (tag == 360) {
         parse_download_thumbnail:
          set_has_download_thumbnail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_thumbnail_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_download_medium;
        break;
      }

      // optional bool download_medium = 46;
      case 46: {
        if (tag == 368) {
         parse_download_medium:
          set_has_download_medium();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_medium_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_download_full;
        break;
      }

      // optional bool download_full = 47;
      case 47: {
        if (tag == 376) {
         parse_download_full:
          set_has_download_full();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_full_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_download_original;
        break;
      }

      // optional bool download_original = 48;
      case 48: {
        if (tag == 384) {
         parse_download_original:
          set_has_download_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_original_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_update_metadata;
        break;
      }

      // optional bool update_metadata = 49;
      case 49: {
        if (tag == 392) {
         parse_update_metadata:
          set_has_update_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_metadata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_error_upload_thumbnail;
        break;
      }

      // optional bool error_upload_thumbnail = 60;
      case 60: {
        if (tag == 480) {
         parse_error_upload_thumbnail:
          set_has_error_upload_thumbnail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_upload_thumbnail_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_error_upload_medium;
        break;
      }

      // optional bool error_upload_medium = 61;
      case 61: {
        if (tag == 488) {
         parse_error_upload_medium:
          set_has_error_upload_medium();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_upload_medium_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_error_upload_full;
        break;
      }

      // optional bool error_upload_full = 62;
      case 62: {
        if (tag == 496) {
         parse_error_upload_full:
          set_has_error_upload_full();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_upload_full_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_error_upload_original;
        break;
      }

      // optional bool error_upload_original = 63;
      case 63: {
        if (tag == 504) {
         parse_error_upload_original:
          set_has_error_upload_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_upload_original_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_error_download_thumbnail;
        break;
      }

      // optional bool error_download_thumbnail = 64;
      case 64: {
        if (tag == 512) {
         parse_error_download_thumbnail:
          set_has_error_download_thumbnail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_download_thumbnail_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_error_download_medium;
        break;
      }

      // optional bool error_download_medium = 65;
      case 65: {
        if (tag == 520) {
         parse_error_download_medium:
          set_has_error_download_medium();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_download_medium_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_error_download_full;
        break;
      }

      // optional bool error_download_full = 66;
      case 66: {
        if (tag == 528) {
         parse_error_download_full:
          set_has_error_download_full();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_download_full_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_error_download_original;
        break;
      }

      // optional bool error_download_original = 67;
      case 67: {
        if (tag == 536) {
         parse_error_download_original:
          set_has_error_download_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_download_original_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_error_asset_thumbnail;
        break;
      }

      // optional bool error_asset_thumbnail = 68;
      case 68: {
        if (tag == 544) {
         parse_error_asset_thumbnail:
          set_has_error_asset_thumbnail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_asset_thumbnail_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_error_asset_full;
        break;
      }

      // optional bool error_asset_full = 69;
      case 69: {
        if (tag == 552) {
         parse_error_asset_full:
          set_has_error_asset_full();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_asset_full_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_error_asset_original;
        break;
      }

      // optional bool error_asset_original = 70;
      case 70: {
        if (tag == 560) {
         parse_error_asset_original:
          set_has_error_asset_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_asset_original_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_error_ui_thumbnail;
        break;
      }

      // optional bool error_ui_thumbnail = 71;
      case 71: {
        if (tag == 568) {
         parse_error_ui_thumbnail:
          set_has_error_ui_thumbnail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_ui_thumbnail_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_error_ui_full;
        break;
      }

      // optional bool error_ui_full = 72;
      case 72: {
        if (tag == 576) {
         parse_error_ui_full:
          set_has_error_ui_full();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_ui_full_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_error_timestamp;
        break;
      }

      // optional bool error_timestamp = 73;
      case 73: {
        if (tag == 584) {
         parse_error_timestamp:
          set_has_error_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_error_ui_original;
        break;
      }

      // optional bool error_ui_original = 74;
      case 74: {
        if (tag == 592) {
         parse_error_ui_original:
          set_has_error_ui_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_ui_original_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_error_upload_metadata;
        break;
      }

      // optional bool error_upload_metadata = 75;
      case 75: {
        if (tag == 600) {
         parse_error_upload_metadata:
          set_has_error_upload_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_upload_metadata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_error_timestamp_invalid;
        break;
      }

      // optional bool error_timestamp_invalid = 76;
      case 76: {
        if (tag == 608) {
         parse_error_timestamp_invalid:
          set_has_error_timestamp_invalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_timestamp_invalid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_error_update_metadata;
        break;
      }

      // optional bool error_update_metadata = 77;
      case 77: {
        if (tag == 616) {
         parse_error_update_metadata:
          set_has_error_update_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_update_metadata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_error_placemark_invalid;
        break;
      }

      // optional bool error_placemark_invalid = 78;
      case 78: {
        if (tag == 624) {
         parse_error_placemark_invalid:
          set_has_error_placemark_invalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_placemark_invalid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_placemark_histogram;
        break;
      }

      // optional bool placemark_histogram = 90;
      case 90: {
        if (tag == 720) {
         parse_placemark_histogram:
          set_has_placemark_histogram();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &placemark_histogram_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PhotoMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PhotoMetadata)
  return false;
#undef DO_
}

void PhotoMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PhotoMetadata)
  // optional .PhotoId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .PhotoId parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parent_id_, output);
  }

  // optional .EpisodeId episode_id = 3;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->episode_id_, output);
  }

  // optional int64 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->user_id(), output);
  }

  // optional int64 sharing_user_id = 5;
  if (has_sharing_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sharing_user_id(), output);
  }

  // optional int32 DEPRECATED_orientation = 6;
  if (has_deprecated_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->deprecated_orientation(), output);
  }

  // optional double aspect_ratio = 7;
  if (has_aspect_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->aspect_ratio(), output);
  }

  // optional double timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->timestamp(), output);
  }

  // optional .Location location = 9;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->location_, output);
  }

  // optional .Placemark placemark = 10;
  if (has_placemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->placemark_, output);
  }

  // optional string caption = 11;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.caption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->caption(), output);
  }

  // optional string link = 12;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->link(), output);
  }

  // optional .PhotoMetadata.Images images = 14;
  if (has_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->images_, output);
  }

  // optional .QueueMetadata queue = 15;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->queue_, output);
  }

  // optional bool shared = 16;
  if (has_shared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->shared(), output);
  }

  // optional string DEPRECATED_adjustment_xmp = 17;
  if (has_deprecated_adjustment_xmp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_adjustment_xmp().data(), this->deprecated_adjustment_xmp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.DEPRECATED_adjustment_xmp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->deprecated_adjustment_xmp(), output);
  }

  // repeated string asset_keys = 18;
  for (int i = 0; i < this->asset_keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_keys(i).data(), this->asset_keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.asset_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->asset_keys(i), output);
  }

  // repeated string asset_fingerprints = 19;
  for (int i = 0; i < this->asset_fingerprints_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_fingerprints(i).data(), this->asset_fingerprints(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.asset_fingerprints");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->asset_fingerprints(i), output);
  }

  // optional bool label_removed = 20;
  if (has_label_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->label_removed(), output);
  }

  // optional bool label_unshared = 21;
  if (has_label_unshared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->label_unshared(), output);
  }

  // optional bool label_error = 22;
  if (has_label_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->label_error(), output);
  }

  // optional bool label_hidden = 23;
  if (has_label_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->label_hidden(), output);
  }

  // optional .ImageFingerprint perceptual_fingerprint = 24;
  if (has_perceptual_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->perceptual_fingerprint_, output);
  }

  // repeated int64 candidate_duplicates = 25;
  for (int i = 0; i < this->candidate_duplicates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      25, this->candidate_duplicates(i), output);
  }

  // optional bool upload_metadata = 40;
  if (has_upload_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->upload_metadata(), output);
  }

  // optional bool upload_thumbnail = 41;
  if (has_upload_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->upload_thumbnail(), output);
  }

  // optional bool upload_medium = 42;
  if (has_upload_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->upload_medium(), output);
  }

  // optional bool upload_full = 43;
  if (has_upload_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->upload_full(), output);
  }

  // optional bool upload_original = 44;
  if (has_upload_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->upload_original(), output);
  }

  // optional bool download_thumbnail = 45;
  if (has_download_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->download_thumbnail(), output);
  }

  // optional bool download_medium = 46;
  if (has_download_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->download_medium(), output);
  }

  // optional bool download_full = 47;
  if (has_download_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->download_full(), output);
  }

  // optional bool download_original = 48;
  if (has_download_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->download_original(), output);
  }

  // optional bool update_metadata = 49;
  if (has_update_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->update_metadata(), output);
  }

  // optional bool error_upload_thumbnail = 60;
  if (has_error_upload_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->error_upload_thumbnail(), output);
  }

  // optional bool error_upload_medium = 61;
  if (has_error_upload_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->error_upload_medium(), output);
  }

  // optional bool error_upload_full = 62;
  if (has_error_upload_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->error_upload_full(), output);
  }

  // optional bool error_upload_original = 63;
  if (has_error_upload_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->error_upload_original(), output);
  }

  // optional bool error_download_thumbnail = 64;
  if (has_error_download_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->error_download_thumbnail(), output);
  }

  // optional bool error_download_medium = 65;
  if (has_error_download_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->error_download_medium(), output);
  }

  // optional bool error_download_full = 66;
  if (has_error_download_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->error_download_full(), output);
  }

  // optional bool error_download_original = 67;
  if (has_error_download_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->error_download_original(), output);
  }

  // optional bool error_asset_thumbnail = 68;
  if (has_error_asset_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->error_asset_thumbnail(), output);
  }

  // optional bool error_asset_full = 69;
  if (has_error_asset_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->error_asset_full(), output);
  }

  // optional bool error_asset_original = 70;
  if (has_error_asset_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->error_asset_original(), output);
  }

  // optional bool error_ui_thumbnail = 71;
  if (has_error_ui_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->error_ui_thumbnail(), output);
  }

  // optional bool error_ui_full = 72;
  if (has_error_ui_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->error_ui_full(), output);
  }

  // optional bool error_timestamp = 73;
  if (has_error_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->error_timestamp(), output);
  }

  // optional bool error_ui_original = 74;
  if (has_error_ui_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(74, this->error_ui_original(), output);
  }

  // optional bool error_upload_metadata = 75;
  if (has_error_upload_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(75, this->error_upload_metadata(), output);
  }

  // optional bool error_timestamp_invalid = 76;
  if (has_error_timestamp_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->error_timestamp_invalid(), output);
  }

  // optional bool error_update_metadata = 77;
  if (has_error_update_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->error_update_metadata(), output);
  }

  // optional bool error_placemark_invalid = 78;
  if (has_error_placemark_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->error_placemark_invalid(), output);
  }

  // optional bool placemark_histogram = 90;
  if (has_placemark_histogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(90, this->placemark_histogram(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PhotoMetadata)
}

::google::protobuf::uint8* PhotoMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PhotoMetadata)
  // optional .PhotoId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .PhotoId parent_id = 2;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->parent_id_, false, target);
  }

  // optional .EpisodeId episode_id = 3;
  if (has_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->episode_id_, false, target);
  }

  // optional int64 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->user_id(), target);
  }

  // optional int64 sharing_user_id = 5;
  if (has_sharing_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sharing_user_id(), target);
  }

  // optional int32 DEPRECATED_orientation = 6;
  if (has_deprecated_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->deprecated_orientation(), target);
  }

  // optional double aspect_ratio = 7;
  if (has_aspect_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->aspect_ratio(), target);
  }

  // optional double timestamp = 8;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->timestamp(), target);
  }

  // optional .Location location = 9;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->location_, false, target);
  }

  // optional .Placemark placemark = 10;
  if (has_placemark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->placemark_, false, target);
  }

  // optional string caption = 11;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.caption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->caption(), target);
  }

  // optional string link = 12;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->link(), target);
  }

  // optional .PhotoMetadata.Images images = 14;
  if (has_images()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->images_, false, target);
  }

  // optional .QueueMetadata queue = 15;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->queue_, false, target);
  }

  // optional bool shared = 16;
  if (has_shared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->shared(), target);
  }

  // optional string DEPRECATED_adjustment_xmp = 17;
  if (has_deprecated_adjustment_xmp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_adjustment_xmp().data(), this->deprecated_adjustment_xmp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.DEPRECATED_adjustment_xmp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->deprecated_adjustment_xmp(), target);
  }

  // repeated string asset_keys = 18;
  for (int i = 0; i < this->asset_keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_keys(i).data(), this->asset_keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.asset_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->asset_keys(i), target);
  }

  // repeated string asset_fingerprints = 19;
  for (int i = 0; i < this->asset_fingerprints_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_fingerprints(i).data(), this->asset_fingerprints(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoMetadata.asset_fingerprints");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->asset_fingerprints(i), target);
  }

  // optional bool label_removed = 20;
  if (has_label_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->label_removed(), target);
  }

  // optional bool label_unshared = 21;
  if (has_label_unshared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->label_unshared(), target);
  }

  // optional bool label_error = 22;
  if (has_label_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->label_error(), target);
  }

  // optional bool label_hidden = 23;
  if (has_label_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->label_hidden(), target);
  }

  // optional .ImageFingerprint perceptual_fingerprint = 24;
  if (has_perceptual_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->perceptual_fingerprint_, false, target);
  }

  // repeated int64 candidate_duplicates = 25;
  for (int i = 0; i < this->candidate_duplicates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(25, this->candidate_duplicates(i), target);
  }

  // optional bool upload_metadata = 40;
  if (has_upload_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->upload_metadata(), target);
  }

  // optional bool upload_thumbnail = 41;
  if (has_upload_thumbnail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->upload_thumbnail(), target);
  }

  // optional bool upload_medium = 42;
  if (has_upload_medium()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->upload_medium(), target);
  }

  // optional bool upload_full = 43;
  if (has_upload_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->upload_full(), target);
  }

  // optional bool upload_original = 44;
  if (has_upload_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->upload_original(), target);
  }

  // optional bool download_thumbnail = 45;
  if (has_download_thumbnail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->download_thumbnail(), target);
  }

  // optional bool download_medium = 46;
  if (has_download_medium()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->download_medium(), target);
  }

  // optional bool download_full = 47;
  if (has_download_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->download_full(), target);
  }

  // optional bool download_original = 48;
  if (has_download_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->download_original(), target);
  }

  // optional bool update_metadata = 49;
  if (has_update_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->update_metadata(), target);
  }

  // optional bool error_upload_thumbnail = 60;
  if (has_error_upload_thumbnail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->error_upload_thumbnail(), target);
  }

  // optional bool error_upload_medium = 61;
  if (has_error_upload_medium()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->error_upload_medium(), target);
  }

  // optional bool error_upload_full = 62;
  if (has_error_upload_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->error_upload_full(), target);
  }

  // optional bool error_upload_original = 63;
  if (has_error_upload_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->error_upload_original(), target);
  }

  // optional bool error_download_thumbnail = 64;
  if (has_error_download_thumbnail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->error_download_thumbnail(), target);
  }

  // optional bool error_download_medium = 65;
  if (has_error_download_medium()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->error_download_medium(), target);
  }

  // optional bool error_download_full = 66;
  if (has_error_download_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->error_download_full(), target);
  }

  // optional bool error_download_original = 67;
  if (has_error_download_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->error_download_original(), target);
  }

  // optional bool error_asset_thumbnail = 68;
  if (has_error_asset_thumbnail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->error_asset_thumbnail(), target);
  }

  // optional bool error_asset_full = 69;
  if (has_error_asset_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->error_asset_full(), target);
  }

  // optional bool error_asset_original = 70;
  if (has_error_asset_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->error_asset_original(), target);
  }

  // optional bool error_ui_thumbnail = 71;
  if (has_error_ui_thumbnail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(71, this->error_ui_thumbnail(), target);
  }

  // optional bool error_ui_full = 72;
  if (has_error_ui_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(72, this->error_ui_full(), target);
  }

  // optional bool error_timestamp = 73;
  if (has_error_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->error_timestamp(), target);
  }

  // optional bool error_ui_original = 74;
  if (has_error_ui_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(74, this->error_ui_original(), target);
  }

  // optional bool error_upload_metadata = 75;
  if (has_error_upload_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(75, this->error_upload_metadata(), target);
  }

  // optional bool error_timestamp_invalid = 76;
  if (has_error_timestamp_invalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(76, this->error_timestamp_invalid(), target);
  }

  // optional bool error_update_metadata = 77;
  if (has_error_update_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->error_update_metadata(), target);
  }

  // optional bool error_placemark_invalid = 78;
  if (has_error_placemark_invalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(78, this->error_placemark_invalid(), target);
  }

  // optional bool placemark_histogram = 90;
  if (has_placemark_histogram()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(90, this->placemark_histogram(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PhotoMetadata)
  return target;
}

size_t PhotoMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhotoMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .PhotoId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .PhotoId parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parent_id_);
    }

    // optional .EpisodeId episode_id = 3;
    if (has_episode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->episode_id_);
    }

    // optional int64 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int64 sharing_user_id = 5;
    if (has_sharing_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sharing_user_id());
    }

    // optional int32 DEPRECATED_orientation = 6;
    if (has_deprecated_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_orientation());
    }

    // optional double aspect_ratio = 7;
    if (has_aspect_ratio()) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .Location location = 9;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional .Placemark placemark = 10;
    if (has_placemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->placemark_);
    }

    // optional string caption = 11;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string link = 12;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
    }

    // optional .PhotoMetadata.Images images = 14;
    if (has_images()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->images_);
    }

    // optional .QueueMetadata queue = 15;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->queue_);
    }

    // optional bool shared = 16;
    if (has_shared()) {
      total_size += 2 + 1;
    }

    // optional string DEPRECATED_adjustment_xmp = 17;
    if (has_deprecated_adjustment_xmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_adjustment_xmp());
    }

  }
  if (_has_bits_[18 / 32] & 15990784u) {
    // optional .ImageFingerprint perceptual_fingerprint = 24;
    if (has_perceptual_fingerprint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->perceptual_fingerprint_);
    }

    // optional bool label_removed = 20;
    if (has_label_removed()) {
      total_size += 2 + 1;
    }

    // optional bool label_hidden = 23;
    if (has_label_hidden()) {
      total_size += 2 + 1;
    }

    // optional bool label_unshared = 21;
    if (has_label_unshared()) {
      total_size += 2 + 1;
    }

    // optional bool label_error = 22;
    if (has_label_error()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool update_metadata = 49;
    if (has_update_metadata()) {
      total_size += 2 + 1;
    }

    // optional bool upload_metadata = 40;
    if (has_upload_metadata()) {
      total_size += 2 + 1;
    }

    // optional bool upload_thumbnail = 41;
    if (has_upload_thumbnail()) {
      total_size += 2 + 1;
    }

    // optional bool upload_medium = 42;
    if (has_upload_medium()) {
      total_size += 2 + 1;
    }

    // optional bool upload_full = 43;
    if (has_upload_full()) {
      total_size += 2 + 1;
    }

    // optional bool upload_original = 44;
    if (has_upload_original()) {
      total_size += 2 + 1;
    }

    // optional bool download_thumbnail = 45;
    if (has_download_thumbnail()) {
      total_size += 2 + 1;
    }

    // optional bool download_medium = 46;
    if (has_download_medium()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool download_full = 47;
    if (has_download_full()) {
      total_size += 2 + 1;
    }

    // optional bool download_original = 48;
    if (has_download_original()) {
      total_size += 2 + 1;
    }

    // optional bool error_update_metadata = 77;
    if (has_error_update_metadata()) {
      total_size += 2 + 1;
    }

    // optional bool error_upload_metadata = 75;
    if (has_error_upload_metadata()) {
      total_size += 2 + 1;
    }

    // optional bool error_upload_thumbnail = 60;
    if (has_error_upload_thumbnail()) {
      total_size += 2 + 1;
    }

    // optional bool error_upload_medium = 61;
    if (has_error_upload_medium()) {
      total_size += 2 + 1;
    }

    // optional bool error_upload_full = 62;
    if (has_error_upload_full()) {
      total_size += 2 + 1;
    }

    // optional bool error_upload_original = 63;
    if (has_error_upload_original()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional bool error_download_thumbnail = 64;
    if (has_error_download_thumbnail()) {
      total_size += 2 + 1;
    }

    // optional bool error_download_medium = 65;
    if (has_error_download_medium()) {
      total_size += 2 + 1;
    }

    // optional bool error_download_full = 66;
    if (has_error_download_full()) {
      total_size += 2 + 1;
    }

    // optional bool error_download_original = 67;
    if (has_error_download_original()) {
      total_size += 2 + 1;
    }

    // optional bool error_asset_thumbnail = 68;
    if (has_error_asset_thumbnail()) {
      total_size += 2 + 1;
    }

    // optional bool error_asset_full = 69;
    if (has_error_asset_full()) {
      total_size += 2 + 1;
    }

    // optional bool error_asset_original = 70;
    if (has_error_asset_original()) {
      total_size += 2 + 1;
    }

    // optional bool error_ui_thumbnail = 71;
    if (has_error_ui_thumbnail()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[48 / 32] & 4128768u) {
    // optional bool error_ui_full = 72;
    if (has_error_ui_full()) {
      total_size += 2 + 1;
    }

    // optional bool error_ui_original = 74;
    if (has_error_ui_original()) {
      total_size += 2 + 1;
    }

    // optional bool error_timestamp = 73;
    if (has_error_timestamp()) {
      total_size += 2 + 1;
    }

    // optional bool error_timestamp_invalid = 76;
    if (has_error_timestamp_invalid()) {
      total_size += 2 + 1;
    }

    // optional bool error_placemark_invalid = 78;
    if (has_error_placemark_invalid()) {
      total_size += 2 + 1;
    }

    // optional bool placemark_histogram = 90;
    if (has_placemark_histogram()) {
      total_size += 2 + 1;
    }

  }
  // repeated string asset_keys = 18;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->asset_keys_size());
  for (int i = 0; i < this->asset_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->asset_keys(i));
  }

  // repeated string asset_fingerprints = 19;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->asset_fingerprints_size());
  for (int i = 0; i < this->asset_fingerprints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->asset_fingerprints(i));
  }

  // repeated int64 candidate_duplicates = 25;
  {
    size_t data_size = 0;
    unsigned int count = this->candidate_duplicates_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->candidate_duplicates(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->candidate_duplicates_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhotoMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhotoMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhotoMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhotoMetadata)
    UnsafeMergeFrom(*source);
  }
}

void PhotoMetadata::MergeFrom(const PhotoMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhotoMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PhotoMetadata::UnsafeMergeFrom(const PhotoMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  asset_keys_.UnsafeMergeFrom(from.asset_keys_);
  asset_fingerprints_.UnsafeMergeFrom(from.asset_fingerprints_);
  candidate_duplicates_.UnsafeMergeFrom(from.candidate_duplicates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::PhotoId::MergeFrom(from.id());
    }
    if (from.has_parent_id()) {
      mutable_parent_id()->::PhotoId::MergeFrom(from.parent_id());
    }
    if (from.has_episode_id()) {
      mutable_episode_id()->::EpisodeId::MergeFrom(from.episode_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sharing_user_id()) {
      set_sharing_user_id(from.sharing_user_id());
    }
    if (from.has_deprecated_orientation()) {
      set_deprecated_orientation(from.deprecated_orientation());
    }
    if (from.has_aspect_ratio()) {
      set_aspect_ratio(from.aspect_ratio());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_location()) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (from.has_placemark()) {
      mutable_placemark()->::Placemark::MergeFrom(from.placemark());
    }
    if (from.has_caption()) {
      set_has_caption();
      caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_);
    }
    if (from.has_link()) {
      set_has_link();
      link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
    }
    if (from.has_images()) {
      mutable_images()->::PhotoMetadata_Images::MergeFrom(from.images());
    }
    if (from.has_queue()) {
      mutable_queue()->::QueueMetadata::MergeFrom(from.queue());
    }
    if (from.has_shared()) {
      set_shared(from.shared());
    }
    if (from.has_deprecated_adjustment_xmp()) {
      set_has_deprecated_adjustment_xmp();
      deprecated_adjustment_xmp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_adjustment_xmp_);
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_perceptual_fingerprint()) {
      mutable_perceptual_fingerprint()->::ImageFingerprint::MergeFrom(from.perceptual_fingerprint());
    }
    if (from.has_label_removed()) {
      set_label_removed(from.label_removed());
    }
    if (from.has_label_hidden()) {
      set_label_hidden(from.label_hidden());
    }
    if (from.has_label_unshared()) {
      set_label_unshared(from.label_unshared());
    }
    if (from.has_label_error()) {
      set_label_error(from.label_error());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_update_metadata()) {
      set_update_metadata(from.update_metadata());
    }
    if (from.has_upload_metadata()) {
      set_upload_metadata(from.upload_metadata());
    }
    if (from.has_upload_thumbnail()) {
      set_upload_thumbnail(from.upload_thumbnail());
    }
    if (from.has_upload_medium()) {
      set_upload_medium(from.upload_medium());
    }
    if (from.has_upload_full()) {
      set_upload_full(from.upload_full());
    }
    if (from.has_upload_original()) {
      set_upload_original(from.upload_original());
    }
    if (from.has_download_thumbnail()) {
      set_download_thumbnail(from.download_thumbnail());
    }
    if (from.has_download_medium()) {
      set_download_medium(from.download_medium());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_download_full()) {
      set_download_full(from.download_full());
    }
    if (from.has_download_original()) {
      set_download_original(from.download_original());
    }
    if (from.has_error_update_metadata()) {
      set_error_update_metadata(from.error_update_metadata());
    }
    if (from.has_error_upload_metadata()) {
      set_error_upload_metadata(from.error_upload_metadata());
    }
    if (from.has_error_upload_thumbnail()) {
      set_error_upload_thumbnail(from.error_upload_thumbnail());
    }
    if (from.has_error_upload_medium()) {
      set_error_upload_medium(from.error_upload_medium());
    }
    if (from.has_error_upload_full()) {
      set_error_upload_full(from.error_upload_full());
    }
    if (from.has_error_upload_original()) {
      set_error_upload_original(from.error_upload_original());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_error_download_thumbnail()) {
      set_error_download_thumbnail(from.error_download_thumbnail());
    }
    if (from.has_error_download_medium()) {
      set_error_download_medium(from.error_download_medium());
    }
    if (from.has_error_download_full()) {
      set_error_download_full(from.error_download_full());
    }
    if (from.has_error_download_original()) {
      set_error_download_original(from.error_download_original());
    }
    if (from.has_error_asset_thumbnail()) {
      set_error_asset_thumbnail(from.error_asset_thumbnail());
    }
    if (from.has_error_asset_full()) {
      set_error_asset_full(from.error_asset_full());
    }
    if (from.has_error_asset_original()) {
      set_error_asset_original(from.error_asset_original());
    }
    if (from.has_error_ui_thumbnail()) {
      set_error_ui_thumbnail(from.error_ui_thumbnail());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_error_ui_full()) {
      set_error_ui_full(from.error_ui_full());
    }
    if (from.has_error_ui_original()) {
      set_error_ui_original(from.error_ui_original());
    }
    if (from.has_error_timestamp()) {
      set_error_timestamp(from.error_timestamp());
    }
    if (from.has_error_timestamp_invalid()) {
      set_error_timestamp_invalid(from.error_timestamp_invalid());
    }
    if (from.has_error_placemark_invalid()) {
      set_error_placemark_invalid(from.error_placemark_invalid());
    }
    if (from.has_placemark_histogram()) {
      set_placemark_histogram(from.placemark_histogram());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PhotoMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhotoMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoMetadata::CopyFrom(const PhotoMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhotoMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PhotoMetadata::IsInitialized() const {

  return true;
}

void PhotoMetadata::Swap(PhotoMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoMetadata::InternalSwap(PhotoMetadata* other) {
  std::swap(id_, other->id_);
  std::swap(parent_id_, other->parent_id_);
  std::swap(episode_id_, other->episode_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(sharing_user_id_, other->sharing_user_id_);
  std::swap(deprecated_orientation_, other->deprecated_orientation_);
  std::swap(aspect_ratio_, other->aspect_ratio_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(location_, other->location_);
  std::swap(placemark_, other->placemark_);
  caption_.Swap(&other->caption_);
  link_.Swap(&other->link_);
  std::swap(images_, other->images_);
  std::swap(queue_, other->queue_);
  std::swap(shared_, other->shared_);
  deprecated_adjustment_xmp_.Swap(&other->deprecated_adjustment_xmp_);
  asset_keys_.UnsafeArenaSwap(&other->asset_keys_);
  asset_fingerprints_.UnsafeArenaSwap(&other->asset_fingerprints_);
  std::swap(perceptual_fingerprint_, other->perceptual_fingerprint_);
  candidate_duplicates_.UnsafeArenaSwap(&other->candidate_duplicates_);
  std::swap(label_removed_, other->label_removed_);
  std::swap(label_hidden_, other->label_hidden_);
  std::swap(label_unshared_, other->label_unshared_);
  std::swap(label_error_, other->label_error_);
  std::swap(update_metadata_, other->update_metadata_);
  std::swap(upload_metadata_, other->upload_metadata_);
  std::swap(upload_thumbnail_, other->upload_thumbnail_);
  std::swap(upload_medium_, other->upload_medium_);
  std::swap(upload_full_, other->upload_full_);
  std::swap(upload_original_, other->upload_original_);
  std::swap(download_thumbnail_, other->download_thumbnail_);
  std::swap(download_medium_, other->download_medium_);
  std::swap(download_full_, other->download_full_);
  std::swap(download_original_, other->download_original_);
  std::swap(error_update_metadata_, other->error_update_metadata_);
  std::swap(error_upload_metadata_, other->error_upload_metadata_);
  std::swap(error_upload_thumbnail_, other->error_upload_thumbnail_);
  std::swap(error_upload_medium_, other->error_upload_medium_);
  std::swap(error_upload_full_, other->error_upload_full_);
  std::swap(error_upload_original_, other->error_upload_original_);
  std::swap(error_download_thumbnail_, other->error_download_thumbnail_);
  std::swap(error_download_medium_, other->error_download_medium_);
  std::swap(error_download_full_, other->error_download_full_);
  std::swap(error_download_original_, other->error_download_original_);
  std::swap(error_asset_thumbnail_, other->error_asset_thumbnail_);
  std::swap(error_asset_full_, other->error_asset_full_);
  std::swap(error_asset_original_, other->error_asset_original_);
  std::swap(error_ui_thumbnail_, other->error_ui_thumbnail_);
  std::swap(error_ui_full_, other->error_ui_full_);
  std::swap(error_ui_original_, other->error_ui_original_);
  std::swap(error_timestamp_, other->error_timestamp_);
  std::swap(error_timestamp_invalid_, other->error_timestamp_invalid_);
  std::swap(error_placemark_invalid_, other->error_placemark_invalid_);
  std::swap(placemark_histogram_, other->placemark_histogram_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoMetadata_descriptor_;
  metadata.reflection = PhotoMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoMetadata_Image

// optional int32 size = 1;
bool PhotoMetadata_Image::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PhotoMetadata_Image::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void PhotoMetadata_Image::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void PhotoMetadata_Image::clear_size() {
  size_ = 0;
  clear_has_size();
}
::google::protobuf::int32 PhotoMetadata_Image::size() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Image.size)
  return size_;
}
void PhotoMetadata_Image::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.Image.size)
}

// optional string md5 = 2;
bool PhotoMetadata_Image::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PhotoMetadata_Image::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
void PhotoMetadata_Image::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
void PhotoMetadata_Image::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& PhotoMetadata_Image::md5() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Image.md5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMetadata_Image::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.Image.md5)
}
void PhotoMetadata_Image::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.Image.md5)
}
void PhotoMetadata_Image::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.Image.md5)
}
::std::string* PhotoMetadata_Image::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Image.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoMetadata_Image::release_md5() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Image.md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMetadata_Image::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Image.md5)
}

inline const PhotoMetadata_Image* PhotoMetadata_Image::internal_default_instance() {
  return &PhotoMetadata_Image_default_instance_.get();
}
// -------------------------------------------------------------------

// PhotoMetadata_Images

// optional .PhotoMetadata.Image tn = 1;
bool PhotoMetadata_Images::has_tn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PhotoMetadata_Images::set_has_tn() {
  _has_bits_[0] |= 0x00000001u;
}
void PhotoMetadata_Images::clear_has_tn() {
  _has_bits_[0] &= ~0x00000001u;
}
void PhotoMetadata_Images::clear_tn() {
  if (tn_ != NULL) tn_->::PhotoMetadata_Image::Clear();
  clear_has_tn();
}
const ::PhotoMetadata_Image& PhotoMetadata_Images::tn() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Images.tn)
  return tn_ != NULL ? *tn_
                         : *::PhotoMetadata_Image::internal_default_instance();
}
::PhotoMetadata_Image* PhotoMetadata_Images::mutable_tn() {
  set_has_tn();
  if (tn_ == NULL) {
    tn_ = new ::PhotoMetadata_Image;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Images.tn)
  return tn_;
}
::PhotoMetadata_Image* PhotoMetadata_Images::release_tn() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Images.tn)
  clear_has_tn();
  ::PhotoMetadata_Image* temp = tn_;
  tn_ = NULL;
  return temp;
}
void PhotoMetadata_Images::set_allocated_tn(::PhotoMetadata_Image* tn) {
  delete tn_;
  tn_ = tn;
  if (tn) {
    set_has_tn();
  } else {
    clear_has_tn();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Images.tn)
}

// optional .PhotoMetadata.Image med = 2;
bool PhotoMetadata_Images::has_med() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PhotoMetadata_Images::set_has_med() {
  _has_bits_[0] |= 0x00000002u;
}
void PhotoMetadata_Images::clear_has_med() {
  _has_bits_[0] &= ~0x00000002u;
}
void PhotoMetadata_Images::clear_med() {
  if (med_ != NULL) med_->::PhotoMetadata_Image::Clear();
  clear_has_med();
}
const ::PhotoMetadata_Image& PhotoMetadata_Images::med() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Images.med)
  return med_ != NULL ? *med_
                         : *::PhotoMetadata_Image::internal_default_instance();
}
::PhotoMetadata_Image* PhotoMetadata_Images::mutable_med() {
  set_has_med();
  if (med_ == NULL) {
    med_ = new ::PhotoMetadata_Image;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Images.med)
  return med_;
}
::PhotoMetadata_Image* PhotoMetadata_Images::release_med() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Images.med)
  clear_has_med();
  ::PhotoMetadata_Image* temp = med_;
  med_ = NULL;
  return temp;
}
void PhotoMetadata_Images::set_allocated_med(::PhotoMetadata_Image* med) {
  delete med_;
  med_ = med;
  if (med) {
    set_has_med();
  } else {
    clear_has_med();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Images.med)
}

// optional .PhotoMetadata.Image full = 3;
bool PhotoMetadata_Images::has_full() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PhotoMetadata_Images::set_has_full() {
  _has_bits_[0] |= 0x00000004u;
}
void PhotoMetadata_Images::clear_has_full() {
  _has_bits_[0] &= ~0x00000004u;
}
void PhotoMetadata_Images::clear_full() {
  if (full_ != NULL) full_->::PhotoMetadata_Image::Clear();
  clear_has_full();
}
const ::PhotoMetadata_Image& PhotoMetadata_Images::full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Images.full)
  return full_ != NULL ? *full_
                         : *::PhotoMetadata_Image::internal_default_instance();
}
::PhotoMetadata_Image* PhotoMetadata_Images::mutable_full() {
  set_has_full();
  if (full_ == NULL) {
    full_ = new ::PhotoMetadata_Image;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Images.full)
  return full_;
}
::PhotoMetadata_Image* PhotoMetadata_Images::release_full() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Images.full)
  clear_has_full();
  ::PhotoMetadata_Image* temp = full_;
  full_ = NULL;
  return temp;
}
void PhotoMetadata_Images::set_allocated_full(::PhotoMetadata_Image* full) {
  delete full_;
  full_ = full;
  if (full) {
    set_has_full();
  } else {
    clear_has_full();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Images.full)
}

// optional .PhotoMetadata.Image orig = 4;
bool PhotoMetadata_Images::has_orig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PhotoMetadata_Images::set_has_orig() {
  _has_bits_[0] |= 0x00000008u;
}
void PhotoMetadata_Images::clear_has_orig() {
  _has_bits_[0] &= ~0x00000008u;
}
void PhotoMetadata_Images::clear_orig() {
  if (orig_ != NULL) orig_->::PhotoMetadata_Image::Clear();
  clear_has_orig();
}
const ::PhotoMetadata_Image& PhotoMetadata_Images::orig() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Images.orig)
  return orig_ != NULL ? *orig_
                         : *::PhotoMetadata_Image::internal_default_instance();
}
::PhotoMetadata_Image* PhotoMetadata_Images::mutable_orig() {
  set_has_orig();
  if (orig_ == NULL) {
    orig_ = new ::PhotoMetadata_Image;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Images.orig)
  return orig_;
}
::PhotoMetadata_Image* PhotoMetadata_Images::release_orig() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Images.orig)
  clear_has_orig();
  ::PhotoMetadata_Image* temp = orig_;
  orig_ = NULL;
  return temp;
}
void PhotoMetadata_Images::set_allocated_orig(::PhotoMetadata_Image* orig) {
  delete orig_;
  orig_ = orig;
  if (orig) {
    set_has_orig();
  } else {
    clear_has_orig();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Images.orig)
}

inline const PhotoMetadata_Images* PhotoMetadata_Images::internal_default_instance() {
  return &PhotoMetadata_Images_default_instance_.get();
}
// -------------------------------------------------------------------

// PhotoMetadata

// optional .PhotoId id = 1;
bool PhotoMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PhotoMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PhotoMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PhotoMetadata::clear_id() {
  if (id_ != NULL) id_->::PhotoId::Clear();
  clear_has_id();
}
const ::PhotoId& PhotoMetadata::id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.id)
  return id_ != NULL ? *id_
                         : *::PhotoId::internal_default_instance();
}
::PhotoId* PhotoMetadata::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.id)
  return id_;
}
::PhotoId* PhotoMetadata::release_id() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.id)
  clear_has_id();
  ::PhotoId* temp = id_;
  id_ = NULL;
  return temp;
}
void PhotoMetadata::set_allocated_id(::PhotoId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.id)
}

// optional .PhotoId parent_id = 2;
bool PhotoMetadata::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PhotoMetadata::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PhotoMetadata::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PhotoMetadata::clear_parent_id() {
  if (parent_id_ != NULL) parent_id_->::PhotoId::Clear();
  clear_has_parent_id();
}
const ::PhotoId& PhotoMetadata::parent_id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.parent_id)
  return parent_id_ != NULL ? *parent_id_
                         : *::PhotoId::internal_default_instance();
}
::PhotoId* PhotoMetadata::mutable_parent_id() {
  set_has_parent_id();
  if (parent_id_ == NULL) {
    parent_id_ = new ::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.parent_id)
  return parent_id_;
}
::PhotoId* PhotoMetadata::release_parent_id() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.parent_id)
  clear_has_parent_id();
  ::PhotoId* temp = parent_id_;
  parent_id_ = NULL;
  return temp;
}
void PhotoMetadata::set_allocated_parent_id(::PhotoId* parent_id) {
  delete parent_id_;
  parent_id_ = parent_id;
  if (parent_id) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.parent_id)
}

// optional .EpisodeId episode_id = 3;
bool PhotoMetadata::has_episode_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PhotoMetadata::set_has_episode_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PhotoMetadata::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PhotoMetadata::clear_episode_id() {
  if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  clear_has_episode_id();
}
const ::EpisodeId& PhotoMetadata::episode_id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.episode_id)
  return episode_id_ != NULL ? *episode_id_
                         : *::EpisodeId::internal_default_instance();
}
::EpisodeId* PhotoMetadata::mutable_episode_id() {
  set_has_episode_id();
  if (episode_id_ == NULL) {
    episode_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.episode_id)
  return episode_id_;
}
::EpisodeId* PhotoMetadata::release_episode_id() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.episode_id)
  clear_has_episode_id();
  ::EpisodeId* temp = episode_id_;
  episode_id_ = NULL;
  return temp;
}
void PhotoMetadata::set_allocated_episode_id(::EpisodeId* episode_id) {
  delete episode_id_;
  episode_id_ = episode_id;
  if (episode_id) {
    set_has_episode_id();
  } else {
    clear_has_episode_id();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.episode_id)
}

// optional int64 user_id = 4;
bool PhotoMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PhotoMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void PhotoMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void PhotoMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 PhotoMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.user_id)
  return user_id_;
}
void PhotoMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.user_id)
}

// optional int64 sharing_user_id = 5;
bool PhotoMetadata::has_sharing_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PhotoMetadata::set_has_sharing_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
void PhotoMetadata::clear_has_sharing_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void PhotoMetadata::clear_sharing_user_id() {
  sharing_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_sharing_user_id();
}
::google::protobuf::int64 PhotoMetadata::sharing_user_id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.sharing_user_id)
  return sharing_user_id_;
}
void PhotoMetadata::set_sharing_user_id(::google::protobuf::int64 value) {
  set_has_sharing_user_id();
  sharing_user_id_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.sharing_user_id)
}

// optional int32 DEPRECATED_orientation = 6;
bool PhotoMetadata::has_deprecated_orientation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PhotoMetadata::set_has_deprecated_orientation() {
  _has_bits_[0] |= 0x00000020u;
}
void PhotoMetadata::clear_has_deprecated_orientation() {
  _has_bits_[0] &= ~0x00000020u;
}
void PhotoMetadata::clear_deprecated_orientation() {
  deprecated_orientation_ = 0;
  clear_has_deprecated_orientation();
}
::google::protobuf::int32 PhotoMetadata::deprecated_orientation() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.DEPRECATED_orientation)
  return deprecated_orientation_;
}
void PhotoMetadata::set_deprecated_orientation(::google::protobuf::int32 value) {
  set_has_deprecated_orientation();
  deprecated_orientation_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.DEPRECATED_orientation)
}

// optional double aspect_ratio = 7;
bool PhotoMetadata::has_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PhotoMetadata::set_has_aspect_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
void PhotoMetadata::clear_has_aspect_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
void PhotoMetadata::clear_aspect_ratio() {
  aspect_ratio_ = 0;
  clear_has_aspect_ratio();
}
double PhotoMetadata::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.aspect_ratio)
  return aspect_ratio_;
}
void PhotoMetadata::set_aspect_ratio(double value) {
  set_has_aspect_ratio();
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.aspect_ratio)
}

// optional double timestamp = 8;
bool PhotoMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PhotoMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
void PhotoMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void PhotoMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double PhotoMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.timestamp)
  return timestamp_;
}
void PhotoMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.timestamp)
}

// optional .Location location = 9;
bool PhotoMetadata::has_location() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PhotoMetadata::set_has_location() {
  _has_bits_[0] |= 0x00000100u;
}
void PhotoMetadata::clear_has_location() {
  _has_bits_[0] &= ~0x00000100u;
}
void PhotoMetadata::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& PhotoMetadata::location() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* PhotoMetadata::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.location)
  return location_;
}
::Location* PhotoMetadata::release_location() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void PhotoMetadata::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.location)
}

// optional .Placemark placemark = 10;
bool PhotoMetadata::has_placemark() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PhotoMetadata::set_has_placemark() {
  _has_bits_[0] |= 0x00000200u;
}
void PhotoMetadata::clear_has_placemark() {
  _has_bits_[0] &= ~0x00000200u;
}
void PhotoMetadata::clear_placemark() {
  if (placemark_ != NULL) placemark_->::Placemark::Clear();
  clear_has_placemark();
}
const ::Placemark& PhotoMetadata::placemark() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.placemark)
  return placemark_ != NULL ? *placemark_
                         : *::Placemark::internal_default_instance();
}
::Placemark* PhotoMetadata::mutable_placemark() {
  set_has_placemark();
  if (placemark_ == NULL) {
    placemark_ = new ::Placemark;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.placemark)
  return placemark_;
}
::Placemark* PhotoMetadata::release_placemark() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.placemark)
  clear_has_placemark();
  ::Placemark* temp = placemark_;
  placemark_ = NULL;
  return temp;
}
void PhotoMetadata::set_allocated_placemark(::Placemark* placemark) {
  delete placemark_;
  placemark_ = placemark;
  if (placemark) {
    set_has_placemark();
  } else {
    clear_has_placemark();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.placemark)
}

// optional string caption = 11;
bool PhotoMetadata::has_caption() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PhotoMetadata::set_has_caption() {
  _has_bits_[0] |= 0x00000400u;
}
void PhotoMetadata::clear_has_caption() {
  _has_bits_[0] &= ~0x00000400u;
}
void PhotoMetadata::clear_caption() {
  caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption();
}
const ::std::string& PhotoMetadata::caption() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.caption)
  return caption_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMetadata::set_caption(const ::std::string& value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.caption)
}
void PhotoMetadata::set_caption(const char* value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.caption)
}
void PhotoMetadata::set_caption(const char* value, size_t size) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.caption)
}
::std::string* PhotoMetadata::mutable_caption() {
  set_has_caption();
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.caption)
  return caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoMetadata::release_caption() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.caption)
  clear_has_caption();
  return caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMetadata::set_allocated_caption(::std::string* caption) {
  if (caption != NULL) {
    set_has_caption();
  } else {
    clear_has_caption();
  }
  caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.caption)
}

// optional string link = 12;
bool PhotoMetadata::has_link() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PhotoMetadata::set_has_link() {
  _has_bits_[0] |= 0x00000800u;
}
void PhotoMetadata::clear_has_link() {
  _has_bits_[0] &= ~0x00000800u;
}
void PhotoMetadata::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
const ::std::string& PhotoMetadata::link() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.link)
  return link_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMetadata::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.link)
}
void PhotoMetadata::set_link(const char* value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.link)
}
void PhotoMetadata::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.link)
}
::std::string* PhotoMetadata::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoMetadata::release_link() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.link)
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMetadata::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.link)
}

// optional .PhotoMetadata.Images images = 14;
bool PhotoMetadata::has_images() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PhotoMetadata::set_has_images() {
  _has_bits_[0] |= 0x00001000u;
}
void PhotoMetadata::clear_has_images() {
  _has_bits_[0] &= ~0x00001000u;
}
void PhotoMetadata::clear_images() {
  if (images_ != NULL) images_->::PhotoMetadata_Images::Clear();
  clear_has_images();
}
const ::PhotoMetadata_Images& PhotoMetadata::images() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.images)
  return images_ != NULL ? *images_
                         : *::PhotoMetadata_Images::internal_default_instance();
}
::PhotoMetadata_Images* PhotoMetadata::mutable_images() {
  set_has_images();
  if (images_ == NULL) {
    images_ = new ::PhotoMetadata_Images;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.images)
  return images_;
}
::PhotoMetadata_Images* PhotoMetadata::release_images() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.images)
  clear_has_images();
  ::PhotoMetadata_Images* temp = images_;
  images_ = NULL;
  return temp;
}
void PhotoMetadata::set_allocated_images(::PhotoMetadata_Images* images) {
  delete images_;
  images_ = images;
  if (images) {
    set_has_images();
  } else {
    clear_has_images();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.images)
}

// optional .QueueMetadata queue = 15;
bool PhotoMetadata::has_queue() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PhotoMetadata::set_has_queue() {
  _has_bits_[0] |= 0x00002000u;
}
void PhotoMetadata::clear_has_queue() {
  _has_bits_[0] &= ~0x00002000u;
}
void PhotoMetadata::clear_queue() {
  if (queue_ != NULL) queue_->::QueueMetadata::Clear();
  clear_has_queue();
}
const ::QueueMetadata& PhotoMetadata::queue() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.queue)
  return queue_ != NULL ? *queue_
                         : *::QueueMetadata::internal_default_instance();
}
::QueueMetadata* PhotoMetadata::mutable_queue() {
  set_has_queue();
  if (queue_ == NULL) {
    queue_ = new ::QueueMetadata;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.queue)
  return queue_;
}
::QueueMetadata* PhotoMetadata::release_queue() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.queue)
  clear_has_queue();
  ::QueueMetadata* temp = queue_;
  queue_ = NULL;
  return temp;
}
void PhotoMetadata::set_allocated_queue(::QueueMetadata* queue) {
  delete queue_;
  queue_ = queue;
  if (queue) {
    set_has_queue();
  } else {
    clear_has_queue();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.queue)
}

// optional bool shared = 16;
bool PhotoMetadata::has_shared() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PhotoMetadata::set_has_shared() {
  _has_bits_[0] |= 0x00004000u;
}
void PhotoMetadata::clear_has_shared() {
  _has_bits_[0] &= ~0x00004000u;
}
void PhotoMetadata::clear_shared() {
  shared_ = false;
  clear_has_shared();
}
bool PhotoMetadata::shared() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.shared)
  return shared_;
}
void PhotoMetadata::set_shared(bool value) {
  set_has_shared();
  shared_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.shared)
}

// optional string DEPRECATED_adjustment_xmp = 17;
bool PhotoMetadata::has_deprecated_adjustment_xmp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PhotoMetadata::set_has_deprecated_adjustment_xmp() {
  _has_bits_[0] |= 0x00008000u;
}
void PhotoMetadata::clear_has_deprecated_adjustment_xmp() {
  _has_bits_[0] &= ~0x00008000u;
}
void PhotoMetadata::clear_deprecated_adjustment_xmp() {
  deprecated_adjustment_xmp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_adjustment_xmp();
}
const ::std::string& PhotoMetadata::deprecated_adjustment_xmp() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.DEPRECATED_adjustment_xmp)
  return deprecated_adjustment_xmp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMetadata::set_deprecated_adjustment_xmp(const ::std::string& value) {
  set_has_deprecated_adjustment_xmp();
  deprecated_adjustment_xmp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.DEPRECATED_adjustment_xmp)
}
void PhotoMetadata::set_deprecated_adjustment_xmp(const char* value) {
  set_has_deprecated_adjustment_xmp();
  deprecated_adjustment_xmp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.DEPRECATED_adjustment_xmp)
}
void PhotoMetadata::set_deprecated_adjustment_xmp(const char* value, size_t size) {
  set_has_deprecated_adjustment_xmp();
  deprecated_adjustment_xmp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.DEPRECATED_adjustment_xmp)
}
::std::string* PhotoMetadata::mutable_deprecated_adjustment_xmp() {
  set_has_deprecated_adjustment_xmp();
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.DEPRECATED_adjustment_xmp)
  return deprecated_adjustment_xmp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoMetadata::release_deprecated_adjustment_xmp() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.DEPRECATED_adjustment_xmp)
  clear_has_deprecated_adjustment_xmp();
  return deprecated_adjustment_xmp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoMetadata::set_allocated_deprecated_adjustment_xmp(::std::string* deprecated_adjustment_xmp) {
  if (deprecated_adjustment_xmp != NULL) {
    set_has_deprecated_adjustment_xmp();
  } else {
    clear_has_deprecated_adjustment_xmp();
  }
  deprecated_adjustment_xmp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_adjustment_xmp);
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.DEPRECATED_adjustment_xmp)
}

// repeated string asset_keys = 18;
int PhotoMetadata::asset_keys_size() const {
  return asset_keys_.size();
}
void PhotoMetadata::clear_asset_keys() {
  asset_keys_.Clear();
}
const ::std::string& PhotoMetadata::asset_keys(int index) const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.asset_keys)
  return asset_keys_.Get(index);
}
::std::string* PhotoMetadata::mutable_asset_keys(int index) {
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.asset_keys)
  return asset_keys_.Mutable(index);
}
void PhotoMetadata::set_asset_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PhotoMetadata.asset_keys)
  asset_keys_.Mutable(index)->assign(value);
}
void PhotoMetadata::set_asset_keys(int index, const char* value) {
  asset_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.asset_keys)
}
void PhotoMetadata::set_asset_keys(int index, const char* value, size_t size) {
  asset_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.asset_keys)
}
::std::string* PhotoMetadata::add_asset_keys() {
  // @@protoc_insertion_point(field_add_mutable:PhotoMetadata.asset_keys)
  return asset_keys_.Add();
}
void PhotoMetadata::add_asset_keys(const ::std::string& value) {
  asset_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PhotoMetadata.asset_keys)
}
void PhotoMetadata::add_asset_keys(const char* value) {
  asset_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PhotoMetadata.asset_keys)
}
void PhotoMetadata::add_asset_keys(const char* value, size_t size) {
  asset_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PhotoMetadata.asset_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PhotoMetadata::asset_keys() const {
  // @@protoc_insertion_point(field_list:PhotoMetadata.asset_keys)
  return asset_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PhotoMetadata::mutable_asset_keys() {
  // @@protoc_insertion_point(field_mutable_list:PhotoMetadata.asset_keys)
  return &asset_keys_;
}

// repeated string asset_fingerprints = 19;
int PhotoMetadata::asset_fingerprints_size() const {
  return asset_fingerprints_.size();
}
void PhotoMetadata::clear_asset_fingerprints() {
  asset_fingerprints_.Clear();
}
const ::std::string& PhotoMetadata::asset_fingerprints(int index) const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.asset_fingerprints)
  return asset_fingerprints_.Get(index);
}
::std::string* PhotoMetadata::mutable_asset_fingerprints(int index) {
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.asset_fingerprints)
  return asset_fingerprints_.Mutable(index);
}
void PhotoMetadata::set_asset_fingerprints(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PhotoMetadata.asset_fingerprints)
  asset_fingerprints_.Mutable(index)->assign(value);
}
void PhotoMetadata::set_asset_fingerprints(int index, const char* value) {
  asset_fingerprints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.asset_fingerprints)
}
void PhotoMetadata::set_asset_fingerprints(int index, const char* value, size_t size) {
  asset_fingerprints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.asset_fingerprints)
}
::std::string* PhotoMetadata::add_asset_fingerprints() {
  // @@protoc_insertion_point(field_add_mutable:PhotoMetadata.asset_fingerprints)
  return asset_fingerprints_.Add();
}
void PhotoMetadata::add_asset_fingerprints(const ::std::string& value) {
  asset_fingerprints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PhotoMetadata.asset_fingerprints)
}
void PhotoMetadata::add_asset_fingerprints(const char* value) {
  asset_fingerprints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PhotoMetadata.asset_fingerprints)
}
void PhotoMetadata::add_asset_fingerprints(const char* value, size_t size) {
  asset_fingerprints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PhotoMetadata.asset_fingerprints)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PhotoMetadata::asset_fingerprints() const {
  // @@protoc_insertion_point(field_list:PhotoMetadata.asset_fingerprints)
  return asset_fingerprints_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PhotoMetadata::mutable_asset_fingerprints() {
  // @@protoc_insertion_point(field_mutable_list:PhotoMetadata.asset_fingerprints)
  return &asset_fingerprints_;
}

// optional .ImageFingerprint perceptual_fingerprint = 24;
bool PhotoMetadata::has_perceptual_fingerprint() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PhotoMetadata::set_has_perceptual_fingerprint() {
  _has_bits_[0] |= 0x00040000u;
}
void PhotoMetadata::clear_has_perceptual_fingerprint() {
  _has_bits_[0] &= ~0x00040000u;
}
void PhotoMetadata::clear_perceptual_fingerprint() {
  if (perceptual_fingerprint_ != NULL) perceptual_fingerprint_->::ImageFingerprint::Clear();
  clear_has_perceptual_fingerprint();
}
const ::ImageFingerprint& PhotoMetadata::perceptual_fingerprint() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.perceptual_fingerprint)
  return perceptual_fingerprint_ != NULL ? *perceptual_fingerprint_
                         : *::ImageFingerprint::internal_default_instance();
}
::ImageFingerprint* PhotoMetadata::mutable_perceptual_fingerprint() {
  set_has_perceptual_fingerprint();
  if (perceptual_fingerprint_ == NULL) {
    perceptual_fingerprint_ = new ::ImageFingerprint;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.perceptual_fingerprint)
  return perceptual_fingerprint_;
}
::ImageFingerprint* PhotoMetadata::release_perceptual_fingerprint() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.perceptual_fingerprint)
  clear_has_perceptual_fingerprint();
  ::ImageFingerprint* temp = perceptual_fingerprint_;
  perceptual_fingerprint_ = NULL;
  return temp;
}
void PhotoMetadata::set_allocated_perceptual_fingerprint(::ImageFingerprint* perceptual_fingerprint) {
  delete perceptual_fingerprint_;
  perceptual_fingerprint_ = perceptual_fingerprint;
  if (perceptual_fingerprint) {
    set_has_perceptual_fingerprint();
  } else {
    clear_has_perceptual_fingerprint();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.perceptual_fingerprint)
}

// repeated int64 candidate_duplicates = 25;
int PhotoMetadata::candidate_duplicates_size() const {
  return candidate_duplicates_.size();
}
void PhotoMetadata::clear_candidate_duplicates() {
  candidate_duplicates_.Clear();
}
::google::protobuf::int64 PhotoMetadata::candidate_duplicates(int index) const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.candidate_duplicates)
  return candidate_duplicates_.Get(index);
}
void PhotoMetadata::set_candidate_duplicates(int index, ::google::protobuf::int64 value) {
  candidate_duplicates_.Set(index, value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.candidate_duplicates)
}
void PhotoMetadata::add_candidate_duplicates(::google::protobuf::int64 value) {
  candidate_duplicates_.Add(value);
  // @@protoc_insertion_point(field_add:PhotoMetadata.candidate_duplicates)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PhotoMetadata::candidate_duplicates() const {
  // @@protoc_insertion_point(field_list:PhotoMetadata.candidate_duplicates)
  return candidate_duplicates_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PhotoMetadata::mutable_candidate_duplicates() {
  // @@protoc_insertion_point(field_mutable_list:PhotoMetadata.candidate_duplicates)
  return &candidate_duplicates_;
}

// optional bool label_removed = 20;
bool PhotoMetadata::has_label_removed() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PhotoMetadata::set_has_label_removed() {
  _has_bits_[0] |= 0x00100000u;
}
void PhotoMetadata::clear_has_label_removed() {
  _has_bits_[0] &= ~0x00100000u;
}
void PhotoMetadata::clear_label_removed() {
  label_removed_ = false;
  clear_has_label_removed();
}
bool PhotoMetadata::label_removed() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.label_removed)
  return label_removed_;
}
void PhotoMetadata::set_label_removed(bool value) {
  set_has_label_removed();
  label_removed_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.label_removed)
}

// optional bool label_hidden = 23;
bool PhotoMetadata::has_label_hidden() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PhotoMetadata::set_has_label_hidden() {
  _has_bits_[0] |= 0x00200000u;
}
void PhotoMetadata::clear_has_label_hidden() {
  _has_bits_[0] &= ~0x00200000u;
}
void PhotoMetadata::clear_label_hidden() {
  label_hidden_ = false;
  clear_has_label_hidden();
}
bool PhotoMetadata::label_hidden() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.label_hidden)
  return label_hidden_;
}
void PhotoMetadata::set_label_hidden(bool value) {
  set_has_label_hidden();
  label_hidden_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.label_hidden)
}

// optional bool label_unshared = 21;
bool PhotoMetadata::has_label_unshared() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PhotoMetadata::set_has_label_unshared() {
  _has_bits_[0] |= 0x00400000u;
}
void PhotoMetadata::clear_has_label_unshared() {
  _has_bits_[0] &= ~0x00400000u;
}
void PhotoMetadata::clear_label_unshared() {
  label_unshared_ = false;
  clear_has_label_unshared();
}
bool PhotoMetadata::label_unshared() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.label_unshared)
  return label_unshared_;
}
void PhotoMetadata::set_label_unshared(bool value) {
  set_has_label_unshared();
  label_unshared_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.label_unshared)
}

// optional bool label_error = 22;
bool PhotoMetadata::has_label_error() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PhotoMetadata::set_has_label_error() {
  _has_bits_[0] |= 0x00800000u;
}
void PhotoMetadata::clear_has_label_error() {
  _has_bits_[0] &= ~0x00800000u;
}
void PhotoMetadata::clear_label_error() {
  label_error_ = false;
  clear_has_label_error();
}
bool PhotoMetadata::label_error() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.label_error)
  return label_error_;
}
void PhotoMetadata::set_label_error(bool value) {
  set_has_label_error();
  label_error_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.label_error)
}

// optional bool update_metadata = 49;
bool PhotoMetadata::has_update_metadata() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PhotoMetadata::set_has_update_metadata() {
  _has_bits_[0] |= 0x01000000u;
}
void PhotoMetadata::clear_has_update_metadata() {
  _has_bits_[0] &= ~0x01000000u;
}
void PhotoMetadata::clear_update_metadata() {
  update_metadata_ = false;
  clear_has_update_metadata();
}
bool PhotoMetadata::update_metadata() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.update_metadata)
  return update_metadata_;
}
void PhotoMetadata::set_update_metadata(bool value) {
  set_has_update_metadata();
  update_metadata_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.update_metadata)
}

// optional bool upload_metadata = 40;
bool PhotoMetadata::has_upload_metadata() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void PhotoMetadata::set_has_upload_metadata() {
  _has_bits_[0] |= 0x02000000u;
}
void PhotoMetadata::clear_has_upload_metadata() {
  _has_bits_[0] &= ~0x02000000u;
}
void PhotoMetadata::clear_upload_metadata() {
  upload_metadata_ = false;
  clear_has_upload_metadata();
}
bool PhotoMetadata::upload_metadata() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_metadata)
  return upload_metadata_;
}
void PhotoMetadata::set_upload_metadata(bool value) {
  set_has_upload_metadata();
  upload_metadata_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_metadata)
}

// optional bool upload_thumbnail = 41;
bool PhotoMetadata::has_upload_thumbnail() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void PhotoMetadata::set_has_upload_thumbnail() {
  _has_bits_[0] |= 0x04000000u;
}
void PhotoMetadata::clear_has_upload_thumbnail() {
  _has_bits_[0] &= ~0x04000000u;
}
void PhotoMetadata::clear_upload_thumbnail() {
  upload_thumbnail_ = false;
  clear_has_upload_thumbnail();
}
bool PhotoMetadata::upload_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_thumbnail)
  return upload_thumbnail_;
}
void PhotoMetadata::set_upload_thumbnail(bool value) {
  set_has_upload_thumbnail();
  upload_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_thumbnail)
}

// optional bool upload_medium = 42;
bool PhotoMetadata::has_upload_medium() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void PhotoMetadata::set_has_upload_medium() {
  _has_bits_[0] |= 0x08000000u;
}
void PhotoMetadata::clear_has_upload_medium() {
  _has_bits_[0] &= ~0x08000000u;
}
void PhotoMetadata::clear_upload_medium() {
  upload_medium_ = false;
  clear_has_upload_medium();
}
bool PhotoMetadata::upload_medium() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_medium)
  return upload_medium_;
}
void PhotoMetadata::set_upload_medium(bool value) {
  set_has_upload_medium();
  upload_medium_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_medium)
}

// optional bool upload_full = 43;
bool PhotoMetadata::has_upload_full() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void PhotoMetadata::set_has_upload_full() {
  _has_bits_[0] |= 0x10000000u;
}
void PhotoMetadata::clear_has_upload_full() {
  _has_bits_[0] &= ~0x10000000u;
}
void PhotoMetadata::clear_upload_full() {
  upload_full_ = false;
  clear_has_upload_full();
}
bool PhotoMetadata::upload_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_full)
  return upload_full_;
}
void PhotoMetadata::set_upload_full(bool value) {
  set_has_upload_full();
  upload_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_full)
}

// optional bool upload_original = 44;
bool PhotoMetadata::has_upload_original() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void PhotoMetadata::set_has_upload_original() {
  _has_bits_[0] |= 0x20000000u;
}
void PhotoMetadata::clear_has_upload_original() {
  _has_bits_[0] &= ~0x20000000u;
}
void PhotoMetadata::clear_upload_original() {
  upload_original_ = false;
  clear_has_upload_original();
}
bool PhotoMetadata::upload_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_original)
  return upload_original_;
}
void PhotoMetadata::set_upload_original(bool value) {
  set_has_upload_original();
  upload_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_original)
}

// optional bool download_thumbnail = 45;
bool PhotoMetadata::has_download_thumbnail() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void PhotoMetadata::set_has_download_thumbnail() {
  _has_bits_[0] |= 0x40000000u;
}
void PhotoMetadata::clear_has_download_thumbnail() {
  _has_bits_[0] &= ~0x40000000u;
}
void PhotoMetadata::clear_download_thumbnail() {
  download_thumbnail_ = false;
  clear_has_download_thumbnail();
}
bool PhotoMetadata::download_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.download_thumbnail)
  return download_thumbnail_;
}
void PhotoMetadata::set_download_thumbnail(bool value) {
  set_has_download_thumbnail();
  download_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.download_thumbnail)
}

// optional bool download_medium = 46;
bool PhotoMetadata::has_download_medium() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void PhotoMetadata::set_has_download_medium() {
  _has_bits_[0] |= 0x80000000u;
}
void PhotoMetadata::clear_has_download_medium() {
  _has_bits_[0] &= ~0x80000000u;
}
void PhotoMetadata::clear_download_medium() {
  download_medium_ = false;
  clear_has_download_medium();
}
bool PhotoMetadata::download_medium() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.download_medium)
  return download_medium_;
}
void PhotoMetadata::set_download_medium(bool value) {
  set_has_download_medium();
  download_medium_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.download_medium)
}

// optional bool download_full = 47;
bool PhotoMetadata::has_download_full() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void PhotoMetadata::set_has_download_full() {
  _has_bits_[1] |= 0x00000001u;
}
void PhotoMetadata::clear_has_download_full() {
  _has_bits_[1] &= ~0x00000001u;
}
void PhotoMetadata::clear_download_full() {
  download_full_ = false;
  clear_has_download_full();
}
bool PhotoMetadata::download_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.download_full)
  return download_full_;
}
void PhotoMetadata::set_download_full(bool value) {
  set_has_download_full();
  download_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.download_full)
}

// optional bool download_original = 48;
bool PhotoMetadata::has_download_original() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void PhotoMetadata::set_has_download_original() {
  _has_bits_[1] |= 0x00000002u;
}
void PhotoMetadata::clear_has_download_original() {
  _has_bits_[1] &= ~0x00000002u;
}
void PhotoMetadata::clear_download_original() {
  download_original_ = false;
  clear_has_download_original();
}
bool PhotoMetadata::download_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.download_original)
  return download_original_;
}
void PhotoMetadata::set_download_original(bool value) {
  set_has_download_original();
  download_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.download_original)
}

// optional bool error_update_metadata = 77;
bool PhotoMetadata::has_error_update_metadata() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void PhotoMetadata::set_has_error_update_metadata() {
  _has_bits_[1] |= 0x00000004u;
}
void PhotoMetadata::clear_has_error_update_metadata() {
  _has_bits_[1] &= ~0x00000004u;
}
void PhotoMetadata::clear_error_update_metadata() {
  error_update_metadata_ = false;
  clear_has_error_update_metadata();
}
bool PhotoMetadata::error_update_metadata() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_update_metadata)
  return error_update_metadata_;
}
void PhotoMetadata::set_error_update_metadata(bool value) {
  set_has_error_update_metadata();
  error_update_metadata_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_update_metadata)
}

// optional bool error_upload_metadata = 75;
bool PhotoMetadata::has_error_upload_metadata() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void PhotoMetadata::set_has_error_upload_metadata() {
  _has_bits_[1] |= 0x00000008u;
}
void PhotoMetadata::clear_has_error_upload_metadata() {
  _has_bits_[1] &= ~0x00000008u;
}
void PhotoMetadata::clear_error_upload_metadata() {
  error_upload_metadata_ = false;
  clear_has_error_upload_metadata();
}
bool PhotoMetadata::error_upload_metadata() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_metadata)
  return error_upload_metadata_;
}
void PhotoMetadata::set_error_upload_metadata(bool value) {
  set_has_error_upload_metadata();
  error_upload_metadata_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_metadata)
}

// optional bool error_upload_thumbnail = 60;
bool PhotoMetadata::has_error_upload_thumbnail() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void PhotoMetadata::set_has_error_upload_thumbnail() {
  _has_bits_[1] |= 0x00000010u;
}
void PhotoMetadata::clear_has_error_upload_thumbnail() {
  _has_bits_[1] &= ~0x00000010u;
}
void PhotoMetadata::clear_error_upload_thumbnail() {
  error_upload_thumbnail_ = false;
  clear_has_error_upload_thumbnail();
}
bool PhotoMetadata::error_upload_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_thumbnail)
  return error_upload_thumbnail_;
}
void PhotoMetadata::set_error_upload_thumbnail(bool value) {
  set_has_error_upload_thumbnail();
  error_upload_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_thumbnail)
}

// optional bool error_upload_medium = 61;
bool PhotoMetadata::has_error_upload_medium() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void PhotoMetadata::set_has_error_upload_medium() {
  _has_bits_[1] |= 0x00000020u;
}
void PhotoMetadata::clear_has_error_upload_medium() {
  _has_bits_[1] &= ~0x00000020u;
}
void PhotoMetadata::clear_error_upload_medium() {
  error_upload_medium_ = false;
  clear_has_error_upload_medium();
}
bool PhotoMetadata::error_upload_medium() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_medium)
  return error_upload_medium_;
}
void PhotoMetadata::set_error_upload_medium(bool value) {
  set_has_error_upload_medium();
  error_upload_medium_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_medium)
}

// optional bool error_upload_full = 62;
bool PhotoMetadata::has_error_upload_full() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void PhotoMetadata::set_has_error_upload_full() {
  _has_bits_[1] |= 0x00000040u;
}
void PhotoMetadata::clear_has_error_upload_full() {
  _has_bits_[1] &= ~0x00000040u;
}
void PhotoMetadata::clear_error_upload_full() {
  error_upload_full_ = false;
  clear_has_error_upload_full();
}
bool PhotoMetadata::error_upload_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_full)
  return error_upload_full_;
}
void PhotoMetadata::set_error_upload_full(bool value) {
  set_has_error_upload_full();
  error_upload_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_full)
}

// optional bool error_upload_original = 63;
bool PhotoMetadata::has_error_upload_original() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void PhotoMetadata::set_has_error_upload_original() {
  _has_bits_[1] |= 0x00000080u;
}
void PhotoMetadata::clear_has_error_upload_original() {
  _has_bits_[1] &= ~0x00000080u;
}
void PhotoMetadata::clear_error_upload_original() {
  error_upload_original_ = false;
  clear_has_error_upload_original();
}
bool PhotoMetadata::error_upload_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_original)
  return error_upload_original_;
}
void PhotoMetadata::set_error_upload_original(bool value) {
  set_has_error_upload_original();
  error_upload_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_original)
}

// optional bool error_download_thumbnail = 64;
bool PhotoMetadata::has_error_download_thumbnail() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void PhotoMetadata::set_has_error_download_thumbnail() {
  _has_bits_[1] |= 0x00000100u;
}
void PhotoMetadata::clear_has_error_download_thumbnail() {
  _has_bits_[1] &= ~0x00000100u;
}
void PhotoMetadata::clear_error_download_thumbnail() {
  error_download_thumbnail_ = false;
  clear_has_error_download_thumbnail();
}
bool PhotoMetadata::error_download_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_download_thumbnail)
  return error_download_thumbnail_;
}
void PhotoMetadata::set_error_download_thumbnail(bool value) {
  set_has_error_download_thumbnail();
  error_download_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_download_thumbnail)
}

// optional bool error_download_medium = 65;
bool PhotoMetadata::has_error_download_medium() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void PhotoMetadata::set_has_error_download_medium() {
  _has_bits_[1] |= 0x00000200u;
}
void PhotoMetadata::clear_has_error_download_medium() {
  _has_bits_[1] &= ~0x00000200u;
}
void PhotoMetadata::clear_error_download_medium() {
  error_download_medium_ = false;
  clear_has_error_download_medium();
}
bool PhotoMetadata::error_download_medium() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_download_medium)
  return error_download_medium_;
}
void PhotoMetadata::set_error_download_medium(bool value) {
  set_has_error_download_medium();
  error_download_medium_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_download_medium)
}

// optional bool error_download_full = 66;
bool PhotoMetadata::has_error_download_full() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void PhotoMetadata::set_has_error_download_full() {
  _has_bits_[1] |= 0x00000400u;
}
void PhotoMetadata::clear_has_error_download_full() {
  _has_bits_[1] &= ~0x00000400u;
}
void PhotoMetadata::clear_error_download_full() {
  error_download_full_ = false;
  clear_has_error_download_full();
}
bool PhotoMetadata::error_download_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_download_full)
  return error_download_full_;
}
void PhotoMetadata::set_error_download_full(bool value) {
  set_has_error_download_full();
  error_download_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_download_full)
}

// optional bool error_download_original = 67;
bool PhotoMetadata::has_error_download_original() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void PhotoMetadata::set_has_error_download_original() {
  _has_bits_[1] |= 0x00000800u;
}
void PhotoMetadata::clear_has_error_download_original() {
  _has_bits_[1] &= ~0x00000800u;
}
void PhotoMetadata::clear_error_download_original() {
  error_download_original_ = false;
  clear_has_error_download_original();
}
bool PhotoMetadata::error_download_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_download_original)
  return error_download_original_;
}
void PhotoMetadata::set_error_download_original(bool value) {
  set_has_error_download_original();
  error_download_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_download_original)
}

// optional bool error_asset_thumbnail = 68;
bool PhotoMetadata::has_error_asset_thumbnail() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void PhotoMetadata::set_has_error_asset_thumbnail() {
  _has_bits_[1] |= 0x00001000u;
}
void PhotoMetadata::clear_has_error_asset_thumbnail() {
  _has_bits_[1] &= ~0x00001000u;
}
void PhotoMetadata::clear_error_asset_thumbnail() {
  error_asset_thumbnail_ = false;
  clear_has_error_asset_thumbnail();
}
bool PhotoMetadata::error_asset_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_asset_thumbnail)
  return error_asset_thumbnail_;
}
void PhotoMetadata::set_error_asset_thumbnail(bool value) {
  set_has_error_asset_thumbnail();
  error_asset_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_asset_thumbnail)
}

// optional bool error_asset_full = 69;
bool PhotoMetadata::has_error_asset_full() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void PhotoMetadata::set_has_error_asset_full() {
  _has_bits_[1] |= 0x00002000u;
}
void PhotoMetadata::clear_has_error_asset_full() {
  _has_bits_[1] &= ~0x00002000u;
}
void PhotoMetadata::clear_error_asset_full() {
  error_asset_full_ = false;
  clear_has_error_asset_full();
}
bool PhotoMetadata::error_asset_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_asset_full)
  return error_asset_full_;
}
void PhotoMetadata::set_error_asset_full(bool value) {
  set_has_error_asset_full();
  error_asset_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_asset_full)
}

// optional bool error_asset_original = 70;
bool PhotoMetadata::has_error_asset_original() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void PhotoMetadata::set_has_error_asset_original() {
  _has_bits_[1] |= 0x00004000u;
}
void PhotoMetadata::clear_has_error_asset_original() {
  _has_bits_[1] &= ~0x00004000u;
}
void PhotoMetadata::clear_error_asset_original() {
  error_asset_original_ = false;
  clear_has_error_asset_original();
}
bool PhotoMetadata::error_asset_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_asset_original)
  return error_asset_original_;
}
void PhotoMetadata::set_error_asset_original(bool value) {
  set_has_error_asset_original();
  error_asset_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_asset_original)
}

// optional bool error_ui_thumbnail = 71;
bool PhotoMetadata::has_error_ui_thumbnail() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void PhotoMetadata::set_has_error_ui_thumbnail() {
  _has_bits_[1] |= 0x00008000u;
}
void PhotoMetadata::clear_has_error_ui_thumbnail() {
  _has_bits_[1] &= ~0x00008000u;
}
void PhotoMetadata::clear_error_ui_thumbnail() {
  error_ui_thumbnail_ = false;
  clear_has_error_ui_thumbnail();
}
bool PhotoMetadata::error_ui_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_ui_thumbnail)
  return error_ui_thumbnail_;
}
void PhotoMetadata::set_error_ui_thumbnail(bool value) {
  set_has_error_ui_thumbnail();
  error_ui_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_ui_thumbnail)
}

// optional bool error_ui_full = 72;
bool PhotoMetadata::has_error_ui_full() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void PhotoMetadata::set_has_error_ui_full() {
  _has_bits_[1] |= 0x00010000u;
}
void PhotoMetadata::clear_has_error_ui_full() {
  _has_bits_[1] &= ~0x00010000u;
}
void PhotoMetadata::clear_error_ui_full() {
  error_ui_full_ = false;
  clear_has_error_ui_full();
}
bool PhotoMetadata::error_ui_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_ui_full)
  return error_ui_full_;
}
void PhotoMetadata::set_error_ui_full(bool value) {
  set_has_error_ui_full();
  error_ui_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_ui_full)
}

// optional bool error_ui_original = 74;
bool PhotoMetadata::has_error_ui_original() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void PhotoMetadata::set_has_error_ui_original() {
  _has_bits_[1] |= 0x00020000u;
}
void PhotoMetadata::clear_has_error_ui_original() {
  _has_bits_[1] &= ~0x00020000u;
}
void PhotoMetadata::clear_error_ui_original() {
  error_ui_original_ = false;
  clear_has_error_ui_original();
}
bool PhotoMetadata::error_ui_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_ui_original)
  return error_ui_original_;
}
void PhotoMetadata::set_error_ui_original(bool value) {
  set_has_error_ui_original();
  error_ui_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_ui_original)
}

// optional bool error_timestamp = 73;
bool PhotoMetadata::has_error_timestamp() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void PhotoMetadata::set_has_error_timestamp() {
  _has_bits_[1] |= 0x00040000u;
}
void PhotoMetadata::clear_has_error_timestamp() {
  _has_bits_[1] &= ~0x00040000u;
}
void PhotoMetadata::clear_error_timestamp() {
  error_timestamp_ = false;
  clear_has_error_timestamp();
}
bool PhotoMetadata::error_timestamp() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_timestamp)
  return error_timestamp_;
}
void PhotoMetadata::set_error_timestamp(bool value) {
  set_has_error_timestamp();
  error_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_timestamp)
}

// optional bool error_timestamp_invalid = 76;
bool PhotoMetadata::has_error_timestamp_invalid() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void PhotoMetadata::set_has_error_timestamp_invalid() {
  _has_bits_[1] |= 0x00080000u;
}
void PhotoMetadata::clear_has_error_timestamp_invalid() {
  _has_bits_[1] &= ~0x00080000u;
}
void PhotoMetadata::clear_error_timestamp_invalid() {
  error_timestamp_invalid_ = false;
  clear_has_error_timestamp_invalid();
}
bool PhotoMetadata::error_timestamp_invalid() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_timestamp_invalid)
  return error_timestamp_invalid_;
}
void PhotoMetadata::set_error_timestamp_invalid(bool value) {
  set_has_error_timestamp_invalid();
  error_timestamp_invalid_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_timestamp_invalid)
}

// optional bool error_placemark_invalid = 78;
bool PhotoMetadata::has_error_placemark_invalid() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void PhotoMetadata::set_has_error_placemark_invalid() {
  _has_bits_[1] |= 0x00100000u;
}
void PhotoMetadata::clear_has_error_placemark_invalid() {
  _has_bits_[1] &= ~0x00100000u;
}
void PhotoMetadata::clear_error_placemark_invalid() {
  error_placemark_invalid_ = false;
  clear_has_error_placemark_invalid();
}
bool PhotoMetadata::error_placemark_invalid() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_placemark_invalid)
  return error_placemark_invalid_;
}
void PhotoMetadata::set_error_placemark_invalid(bool value) {
  set_has_error_placemark_invalid();
  error_placemark_invalid_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_placemark_invalid)
}

// optional bool placemark_histogram = 90;
bool PhotoMetadata::has_placemark_histogram() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void PhotoMetadata::set_has_placemark_histogram() {
  _has_bits_[1] |= 0x00200000u;
}
void PhotoMetadata::clear_has_placemark_histogram() {
  _has_bits_[1] &= ~0x00200000u;
}
void PhotoMetadata::clear_placemark_histogram() {
  placemark_histogram_ = false;
  clear_has_placemark_histogram();
}
bool PhotoMetadata::placemark_histogram() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.placemark_histogram)
  return placemark_histogram_;
}
void PhotoMetadata::set_placemark_histogram(bool value) {
  set_has_placemark_histogram();
  placemark_histogram_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.placemark_histogram)
}

inline const PhotoMetadata* PhotoMetadata::internal_default_instance() {
  return &PhotoMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoPathMetadata::kServerIdFieldNumber;
const int PhotoPathMetadata::kMd5FieldNumber;
const int PhotoPathMetadata::kAccessTimeFieldNumber;
const int PhotoPathMetadata::kSizeFieldNumber;
const int PhotoPathMetadata::kParentSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoPathMetadata::PhotoPathMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PhotoMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhotoPathMetadata)
}

void PhotoPathMetadata::InitAsDefaultInstance() {
}

PhotoPathMetadata::PhotoPathMetadata(const PhotoPathMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PhotoPathMetadata)
}

void PhotoPathMetadata::SharedCtor() {
  _cached_size_ = 0;
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&parent_size_) -
    reinterpret_cast<char*>(&size_) + sizeof(parent_size_));
}

PhotoPathMetadata::~PhotoPathMetadata() {
  // @@protoc_insertion_point(destructor:PhotoPathMetadata)
  SharedDtor();
}

void PhotoPathMetadata::SharedDtor() {
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhotoPathMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoPathMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoPathMetadata_descriptor_;
}

const PhotoPathMetadata& PhotoPathMetadata::default_instance() {
  protobuf_InitDefaults_PhotoMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PhotoPathMetadata> PhotoPathMetadata_default_instance_;

PhotoPathMetadata* PhotoPathMetadata::New(::google::protobuf::Arena* arena) const {
  PhotoPathMetadata* n = new PhotoPathMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoPathMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:PhotoPathMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PhotoPathMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PhotoPathMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(size_, parent_size_);
    if (has_server_id()) {
      server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_md5()) {
      md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PhotoPathMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PhotoPathMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoPathMetadata.server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_md5;
        break;
      }

      // optional string md5 = 2;
      case 2: {
        if (tag == 18) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoPathMetadata.md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_access_time;
        break;
      }

      // optional uint32 access_time = 3;
      case 3: {
        if (tag == 24) {
         parse_access_time:
          set_has_access_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &access_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int64 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_parent_size;
        break;
      }

      // optional int32 parent_size = 5;
      case 5: {
        if (tag == 40) {
         parse_parent_size:
          set_has_parent_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PhotoPathMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PhotoPathMetadata)
  return false;
#undef DO_
}

void PhotoPathMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PhotoPathMetadata)
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoPathMetadata.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_id(), output);
  }

  // optional string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoPathMetadata.md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->md5(), output);
  }

  // optional uint32 access_time = 3;
  if (has_access_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->access_time(), output);
  }

  // optional int64 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->size(), output);
  }

  // optional int32 parent_size = 5;
  if (has_parent_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->parent_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PhotoPathMetadata)
}

::google::protobuf::uint8* PhotoPathMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PhotoPathMetadata)
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoPathMetadata.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_id(), target);
  }

  // optional string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoPathMetadata.md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->md5(), target);
  }

  // optional uint32 access_time = 3;
  if (has_access_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->access_time(), target);
  }

  // optional int64 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->size(), target);
  }

  // optional int32 parent_size = 5;
  if (has_parent_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->parent_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PhotoPathMetadata)
  return target;
}

size_t PhotoPathMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhotoPathMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // optional string md5 = 2;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional uint32 access_time = 3;
    if (has_access_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->access_time());
    }

    // optional int64 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional int32 parent_size = 5;
    if (has_parent_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoPathMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhotoPathMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhotoPathMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoPathMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhotoPathMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhotoPathMetadata)
    UnsafeMergeFrom(*source);
  }
}

void PhotoPathMetadata::MergeFrom(const PhotoPathMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhotoPathMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PhotoPathMetadata::UnsafeMergeFrom(const PhotoPathMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
    if (from.has_md5()) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (from.has_access_time()) {
      set_access_time(from.access_time());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_parent_size()) {
      set_parent_size(from.parent_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PhotoPathMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhotoPathMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoPathMetadata::CopyFrom(const PhotoPathMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhotoPathMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PhotoPathMetadata::IsInitialized() const {

  return true;
}

void PhotoPathMetadata::Swap(PhotoPathMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoPathMetadata::InternalSwap(PhotoPathMetadata* other) {
  server_id_.Swap(&other->server_id_);
  md5_.Swap(&other->md5_);
  std::swap(access_time_, other->access_time_);
  std::swap(size_, other->size_);
  std::swap(parent_size_, other->parent_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoPathMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoPathMetadata_descriptor_;
  metadata.reflection = PhotoPathMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoPathMetadata

// optional string server_id = 1;
bool PhotoPathMetadata::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PhotoPathMetadata::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PhotoPathMetadata::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PhotoPathMetadata::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
const ::std::string& PhotoPathMetadata::server_id() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoPathMetadata::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.server_id)
}
void PhotoPathMetadata::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoPathMetadata.server_id)
}
void PhotoPathMetadata::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoPathMetadata.server_id)
}
::std::string* PhotoPathMetadata::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:PhotoPathMetadata.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoPathMetadata::release_server_id() {
  // @@protoc_insertion_point(field_release:PhotoPathMetadata.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoPathMetadata::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:PhotoPathMetadata.server_id)
}

// optional string md5 = 2;
bool PhotoPathMetadata::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PhotoPathMetadata::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
void PhotoPathMetadata::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
void PhotoPathMetadata::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& PhotoPathMetadata::md5() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.md5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoPathMetadata::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.md5)
}
void PhotoPathMetadata::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoPathMetadata.md5)
}
void PhotoPathMetadata::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoPathMetadata.md5)
}
::std::string* PhotoPathMetadata::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:PhotoPathMetadata.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoPathMetadata::release_md5() {
  // @@protoc_insertion_point(field_release:PhotoPathMetadata.md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoPathMetadata::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:PhotoPathMetadata.md5)
}

// optional uint32 access_time = 3;
bool PhotoPathMetadata::has_access_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PhotoPathMetadata::set_has_access_time() {
  _has_bits_[0] |= 0x00000004u;
}
void PhotoPathMetadata::clear_has_access_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void PhotoPathMetadata::clear_access_time() {
  access_time_ = 0u;
  clear_has_access_time();
}
::google::protobuf::uint32 PhotoPathMetadata::access_time() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.access_time)
  return access_time_;
}
void PhotoPathMetadata::set_access_time(::google::protobuf::uint32 value) {
  set_has_access_time();
  access_time_ = value;
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.access_time)
}

// optional int64 size = 4;
bool PhotoPathMetadata::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PhotoPathMetadata::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void PhotoPathMetadata::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void PhotoPathMetadata::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
::google::protobuf::int64 PhotoPathMetadata::size() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.size)
  return size_;
}
void PhotoPathMetadata::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.size)
}

// optional int32 parent_size = 5;
bool PhotoPathMetadata::has_parent_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PhotoPathMetadata::set_has_parent_size() {
  _has_bits_[0] |= 0x00000010u;
}
void PhotoPathMetadata::clear_has_parent_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void PhotoPathMetadata::clear_parent_size() {
  parent_size_ = 0;
  clear_has_parent_size();
}
::google::protobuf::int32 PhotoPathMetadata::parent_size() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.parent_size)
  return parent_size_;
}
void PhotoPathMetadata::set_parent_size(::google::protobuf::int32 value) {
  set_has_parent_size();
  parent_size_ = value;
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.parent_size)
}

inline const PhotoPathMetadata* PhotoPathMetadata::internal_default_instance() {
  return &PhotoPathMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
