// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DayMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DayMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DayContributor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayContributor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DayContributor_ContributorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DayPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilteredEpisode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilteredEpisode_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrapdoorMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrapdoorMetadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TrapdoorMetadata_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EventMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedEpisode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedEpisode_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummaryRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummaryRow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SummaryRow_RowType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SummaryMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummaryMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewpointSummaryMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewpointSummaryMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewpointSummaryMetadata_Contributor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewpointSummaryMetadata_Contributor_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewpointSummaryMetadata_ActivityRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewpointSummaryMetadata_ActivityRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewpointSummaryMetadata_ActivityRow_Photo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewpointSummaryMetadata_ActivityRow_Photo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ViewpointSummaryMetadata_ActivityRowType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DayMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_DayMetadata_2eproto() {
  protobuf_AddDesc_DayMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DayMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  DayContributor_descriptor_ = file->message_type(0);
  static const int DayContributor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayContributor, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayContributor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayContributor, identity_),
  };
  DayContributor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DayContributor_descriptor_,
      DayContributor::internal_default_instance(),
      DayContributor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayContributor, _has_bits_),
      -1,
      -1,
      sizeof(DayContributor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayContributor, _internal_metadata_));
  DayContributor_ContributorType_descriptor_ = DayContributor_descriptor_->enum_type(0);
  DayPhoto_descriptor_ = file->message_type(1);
  static const int DayPhoto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayPhoto, photo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayPhoto, episode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayPhoto, aspect_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayPhoto, timestamp_),
  };
  DayPhoto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DayPhoto_descriptor_,
      DayPhoto::internal_default_instance(),
      DayPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayPhoto, _has_bits_),
      -1,
      -1,
      sizeof(DayPhoto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayPhoto, _internal_metadata_));
  FilteredEpisode_descriptor_ = file->message_type(2);
  static const int FilteredEpisode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilteredEpisode, episode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilteredEpisode, photo_ids_),
  };
  FilteredEpisode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FilteredEpisode_descriptor_,
      FilteredEpisode::internal_default_instance(),
      FilteredEpisode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilteredEpisode, _has_bits_),
      -1,
      -1,
      sizeof(FilteredEpisode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilteredEpisode, _internal_metadata_));
  TrapdoorMetadata_descriptor_ = file->message_type(3);
  static const int TrapdoorMetadata_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, viewpoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, cover_photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, earliest_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, latest_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, event_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, contributors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, sub_sampled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, photo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, comment_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, new_photo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, new_comment_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, unviewed_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, pending_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, muted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, autosave_),
  };
  TrapdoorMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrapdoorMetadata_descriptor_,
      TrapdoorMetadata::internal_default_instance(),
      TrapdoorMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, _has_bits_),
      -1,
      -1,
      sizeof(TrapdoorMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapdoorMetadata, _internal_metadata_));
  TrapdoorMetadata_Type_descriptor_ = TrapdoorMetadata_descriptor_->enum_type(0);
  EventMetadata_descriptor_ = file->message_type(4);
  static const int EventMetadata_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, earliest_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, latest_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, photo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, episodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, contributors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, placemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, trapdoors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, short_title_),
  };
  EventMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EventMetadata_descriptor_,
      EventMetadata::internal_default_instance(),
      EventMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, _has_bits_),
      -1,
      -1,
      sizeof(EventMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventMetadata, _internal_metadata_));
  CachedEpisode_descriptor_ = file->message_type(5);
  static const int CachedEpisode_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, viewpoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, placemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, earliest_photo_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, latest_photo_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, in_library_),
  };
  CachedEpisode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CachedEpisode_descriptor_,
      CachedEpisode::internal_default_instance(),
      CachedEpisode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, _has_bits_),
      -1,
      -1,
      sizeof(CachedEpisode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedEpisode, _internal_metadata_));
  DayMetadata_descriptor_ = file->message_type(6);
  static const int DayMetadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayMetadata, episodes_),
  };
  DayMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DayMetadata_descriptor_,
      DayMetadata::internal_default_instance(),
      DayMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayMetadata, _has_bits_),
      -1,
      -1,
      sizeof(DayMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayMetadata, _internal_metadata_));
  SummaryRow_descriptor_ = file->message_type(7);
  static const int SummaryRow_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, day_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, unviewed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, photo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, comment_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, contributor_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, share_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, episode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, original_row_index_),
  };
  SummaryRow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SummaryRow_descriptor_,
      SummaryRow::internal_default_instance(),
      SummaryRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, _has_bits_),
      -1,
      -1,
      sizeof(SummaryRow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryRow, _internal_metadata_));
  SummaryRow_RowType_descriptor_ = SummaryRow_descriptor_->enum_type(0);
  SummaryMetadata_descriptor_ = file->message_type(8);
  static const int SummaryMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryMetadata, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryMetadata, unviewed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryMetadata, photo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryMetadata, total_height_),
  };
  SummaryMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SummaryMetadata_descriptor_,
      SummaryMetadata::internal_default_instance(),
      SummaryMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryMetadata, _has_bits_),
      -1,
      -1,
      sizeof(SummaryMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryMetadata, _internal_metadata_));
  ViewpointSummaryMetadata_descriptor_ = file->message_type(9);
  static const int ViewpointSummaryMetadata_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, viewpoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, contributors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, cover_photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, activities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, earliest_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, latest_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, photo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, comment_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, new_photo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, new_comment_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, provisional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, scroll_to_row_),
  };
  ViewpointSummaryMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ViewpointSummaryMetadata_descriptor_,
      ViewpointSummaryMetadata::internal_default_instance(),
      ViewpointSummaryMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, _has_bits_),
      -1,
      -1,
      sizeof(ViewpointSummaryMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata, _internal_metadata_));
  ViewpointSummaryMetadata_Contributor_descriptor_ = ViewpointSummaryMetadata_descriptor_->nested_type(0);
  static const int ViewpointSummaryMetadata_Contributor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_Contributor, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_Contributor, update_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_Contributor, identity_),
  };
  ViewpointSummaryMetadata_Contributor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ViewpointSummaryMetadata_Contributor_descriptor_,
      ViewpointSummaryMetadata_Contributor::internal_default_instance(),
      ViewpointSummaryMetadata_Contributor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_Contributor, _has_bits_),
      -1,
      -1,
      sizeof(ViewpointSummaryMetadata_Contributor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_Contributor, _internal_metadata_));
  ViewpointSummaryMetadata_ActivityRow_descriptor_ = ViewpointSummaryMetadata_descriptor_->nested_type(1);
  static const int ViewpointSummaryMetadata_ActivityRow_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, user_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, user_identities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, row_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, update_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, pending_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, thread_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, is_comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, is_provisional_hint_),
  };
  ViewpointSummaryMetadata_ActivityRow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ViewpointSummaryMetadata_ActivityRow_descriptor_,
      ViewpointSummaryMetadata_ActivityRow::internal_default_instance(),
      ViewpointSummaryMetadata_ActivityRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, _has_bits_),
      -1,
      -1,
      sizeof(ViewpointSummaryMetadata_ActivityRow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow, _internal_metadata_));
  ViewpointSummaryMetadata_ActivityRow_Photo_descriptor_ = ViewpointSummaryMetadata_ActivityRow_descriptor_->nested_type(0);
  static const int ViewpointSummaryMetadata_ActivityRow_Photo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow_Photo, photo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow_Photo, episode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow_Photo, parent_episode_id_),
  };
  ViewpointSummaryMetadata_ActivityRow_Photo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ViewpointSummaryMetadata_ActivityRow_Photo_descriptor_,
      ViewpointSummaryMetadata_ActivityRow_Photo::internal_default_instance(),
      ViewpointSummaryMetadata_ActivityRow_Photo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow_Photo, _has_bits_),
      -1,
      -1,
      sizeof(ViewpointSummaryMetadata_ActivityRow_Photo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSummaryMetadata_ActivityRow_Photo, _internal_metadata_));
  ViewpointSummaryMetadata_ActivityRowType_descriptor_ = ViewpointSummaryMetadata_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DayMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DayContributor_descriptor_, DayContributor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DayPhoto_descriptor_, DayPhoto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FilteredEpisode_descriptor_, FilteredEpisode::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrapdoorMetadata_descriptor_, TrapdoorMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EventMetadata_descriptor_, EventMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CachedEpisode_descriptor_, CachedEpisode::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DayMetadata_descriptor_, DayMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SummaryRow_descriptor_, SummaryRow::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SummaryMetadata_descriptor_, SummaryMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ViewpointSummaryMetadata_descriptor_, ViewpointSummaryMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ViewpointSummaryMetadata_Contributor_descriptor_, ViewpointSummaryMetadata_Contributor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ViewpointSummaryMetadata_ActivityRow_descriptor_, ViewpointSummaryMetadata_ActivityRow::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ViewpointSummaryMetadata_ActivityRow_Photo_descriptor_, ViewpointSummaryMetadata_ActivityRow_Photo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DayMetadata_2eproto() {
  DayContributor_default_instance_.Shutdown();
  delete DayContributor_reflection_;
  DayPhoto_default_instance_.Shutdown();
  delete DayPhoto_reflection_;
  FilteredEpisode_default_instance_.Shutdown();
  delete FilteredEpisode_reflection_;
  TrapdoorMetadata_default_instance_.Shutdown();
  delete TrapdoorMetadata_reflection_;
  EventMetadata_default_instance_.Shutdown();
  delete EventMetadata_reflection_;
  CachedEpisode_default_instance_.Shutdown();
  delete CachedEpisode_reflection_;
  DayMetadata_default_instance_.Shutdown();
  delete DayMetadata_reflection_;
  SummaryRow_default_instance_.Shutdown();
  delete SummaryRow_reflection_;
  SummaryMetadata_default_instance_.Shutdown();
  delete SummaryMetadata_reflection_;
  ViewpointSummaryMetadata_default_instance_.Shutdown();
  delete ViewpointSummaryMetadata_reflection_;
  ViewpointSummaryMetadata_Contributor_default_instance_.Shutdown();
  delete ViewpointSummaryMetadata_Contributor_reflection_;
  ViewpointSummaryMetadata_ActivityRow_default_instance_.Shutdown();
  delete ViewpointSummaryMetadata_ActivityRow_reflection_;
  ViewpointSummaryMetadata_ActivityRow_Photo_default_instance_.Shutdown();
  delete ViewpointSummaryMetadata_ActivityRow_Photo_reflection_;
}

void protobuf_InitDefaults_DayMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_ContentIds_2eproto();
  ::protobuf_InitDefaults_Location_2eproto();
  ::protobuf_InitDefaults_Placemark_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  DayContributor_default_instance_.DefaultConstruct();
  DayPhoto_default_instance_.DefaultConstruct();
  FilteredEpisode_default_instance_.DefaultConstruct();
  TrapdoorMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EventMetadata_default_instance_.DefaultConstruct();
  CachedEpisode_default_instance_.DefaultConstruct();
  DayMetadata_default_instance_.DefaultConstruct();
  SummaryRow_default_instance_.DefaultConstruct();
  SummaryMetadata_default_instance_.DefaultConstruct();
  ViewpointSummaryMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ViewpointSummaryMetadata_Contributor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ViewpointSummaryMetadata_ActivityRow_default_instance_.DefaultConstruct();
  ViewpointSummaryMetadata_ActivityRow_Photo_default_instance_.DefaultConstruct();
  DayContributor_default_instance_.get_mutable()->InitAsDefaultInstance();
  DayPhoto_default_instance_.get_mutable()->InitAsDefaultInstance();
  FilteredEpisode_default_instance_.get_mutable()->InitAsDefaultInstance();
  TrapdoorMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  EventMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  CachedEpisode_default_instance_.get_mutable()->InitAsDefaultInstance();
  DayMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  SummaryRow_default_instance_.get_mutable()->InitAsDefaultInstance();
  SummaryMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  ViewpointSummaryMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  ViewpointSummaryMetadata_Contributor_default_instance_.get_mutable()->InitAsDefaultInstance();
  ViewpointSummaryMetadata_ActivityRow_default_instance_.get_mutable()->InitAsDefaultInstance();
  ViewpointSummaryMetadata_ActivityRow_Photo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_DayMetadata_2eproto_once_);
void protobuf_InitDefaults_DayMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_DayMetadata_2eproto_once_,
                 &protobuf_InitDefaults_DayMetadata_2eproto_impl);
}
void protobuf_AddDesc_DayMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_DayMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021DayMetadata.proto\032\020ContentIds.proto\032\016L"
    "ocation.proto\032\017Placemark.proto\"\257\001\n\016DayCo"
    "ntributor\022\017\n\007user_id\030\001 \001(\003\022-\n\004type\030\002 \001(\016"
    "2\037.DayContributor.ContributorType\022\020\n\010ide"
    "ntity\030\003 \001(\t\"K\n\017ContributorType\022\024\n\020UNVIEW"
    "ED_CONTENT\020\001\022\022\n\016VIEWED_CONTENT\020\002\022\016\n\nNO_C"
    "ONTENT\020\004\"Y\n\010DayPhoto\022\020\n\010photo_id\030\001 \001(\003\022\022"
    "\n\nepisode_id\030\002 \001(\003\022\024\n\014aspect_ratio\030\003 \001(\001"
    "\022\021\n\ttimestamp\030\004 \001(\001\"8\n\017FilteredEpisode\022\022"
    "\n\nepisode_id\030\001 \001(\003\022\021\n\tphoto_ids\030\002 \003(\003\"\342\003"
    "\n\020TrapdoorMetadata\022\024\n\014viewpoint_id\030\001 \001(\003"
    "\022$\n\004type\030\002 \001(\0162\026.TrapdoorMetadata.Type\022\036"
    "\n\013cover_photo\030\003 \001(\0132\t.DayPhoto\022\032\n\022earlie"
    "st_timestamp\030\004 \001(\001\022\030\n\020latest_timestamp\030\005"
    " \001(\001\022\023\n\013event_index\030\006 \001(\005\022%\n\014contributor"
    "s\030\007 \003(\0132\017.DayContributor\022\031\n\006photos\030\010 \003(\013"
    "2\t.DayPhoto\022\023\n\013sub_sampled\030\t \001(\010\022\023\n\013phot"
    "o_count\030\n \001(\005\022\025\n\rcomment_count\030\013 \001(\005\022\027\n\017"
    "new_photo_count\030\014 \001(\005\022\031\n\021new_comment_cou"
    "nt\030\r \001(\005\022\030\n\020unviewed_content\030\016 \001(\010\022\027\n\017pe"
    "nding_content\030\017 \001(\010\022\r\n\005muted\030\020 \001(\010\022\020\n\010au"
    "tosave\030\021 \001(\010\"\034\n\004Type\022\t\n\005INBOX\020\001\022\t\n\005EVENT"
    "\020\002\"\275\002\n\rEventMetadata\022\032\n\022earliest_timesta"
    "mp\030\001 \001(\001\022\030\n\020latest_timestamp\030\002 \001(\001\022\023\n\013ph"
    "oto_count\030\003 \001(\005\022\"\n\010episodes\030\004 \003(\0132\020.Filt"
    "eredEpisode\022%\n\014contributors\030\005 \003(\0132\017.DayC"
    "ontributor\022\033\n\010location\030\006 \001(\0132\t.Location\022"
    "\035\n\tplacemark\030\007 \001(\0132\n.Placemark\022\020\n\010distan"
    "ce\030\010 \001(\001\022$\n\ttrapdoors\030\t \003(\0132\021.TrapdoorMe"
    "tadata\022\r\n\005title\030\n \001(\t\022\023\n\013short_title\030\013 \001"
    "(\t\"\273\002\n\rCachedEpisode\022\026\n\002id\030\001 \001(\0132\n.Episo"
    "deId\022\035\n\tparent_id\030\002 \001(\0132\n.EpisodeId\022\"\n\014v"
    "iewpoint_id\030\003 \001(\0132\014.ViewpointId\022\017\n\007user_"
    "id\030\004 \001(\003\022\021\n\ttimestamp\030\005 \001(\001\022\033\n\010location\030"
    "\006 \001(\0132\t.Location\022\035\n\tplacemark\030\007 \001(\0132\n.Pl"
    "acemark\022 \n\030earliest_photo_timestamp\030\010 \001("
    "\001\022\036\n\026latest_photo_timestamp\030\t \001(\001\022\031\n\006pho"
    "tos\030\n \003(\0132\t.DayPhoto\022\022\n\nin_library\030\013 \001(\010"
    "\"B\n\013DayMetadata\022\021\n\ttimestamp\030\001 \001(\001\022 \n\010ep"
    "isodes\030\002 \003(\0132\016.CachedEpisode\"\227\003\n\nSummary"
    "Row\022!\n\004type\030\001 \001(\0162\023.SummaryRow.RowType\022\021"
    "\n\ttimestamp\030\002 \001(\001\022\025\n\rday_timestamp\030\003 \001(\001"
    "\022\022\n\nidentifier\030\004 \001(\003\022\016\n\006height\030\005 \001(\002\022\020\n\010"
    "unviewed\030\006 \001(\010\022\020\n\010position\030\007 \001(\002\022\016\n\006weig"
    "ht\030\010 \001(\002\022\023\n\013photo_count\030\t \001(\005\022\025\n\rcomment"
    "_count\030\n \001(\005\022\031\n\021contributor_count\030\013 \001(\005\022"
    "\023\n\013share_count\030\014 \001(\005\022\020\n\010distance\030\r \001(\001\022\022"
    "\n\nepisode_id\030\016 \001(\003\022\032\n\022original_row_index"
    "\030\024 \001(\005\"F\n\007RowType\022\t\n\005EVENT\020\001\022\016\n\nFULL_EVE"
    "NT\020\002\022\022\n\016EVENT_TRAPDOOR\020\004\022\014\n\010TRAPDOOR\020\005\"o"
    "\n\017SummaryMetadata\022\031\n\004rows\030\001 \003(\0132\013.Summar"
    "yRow\022\026\n\016unviewed_count\030\006 \001(\005\022\023\n\013photo_co"
    "unt\030\010 \001(\005\022\024\n\014total_height\030\t \001(\002\"\203\010\n\030View"
    "pointSummaryMetadata\022\024\n\014viewpoint_id\030\001 \001"
    "(\003\022;\n\014contributors\030\002 \003(\0132%.ViewpointSumm"
    "aryMetadata.Contributor\022\036\n\013cover_photo\030\003"
    " \001(\0132\t.DayPhoto\0229\n\nactivities\030\004 \003(\0132%.Vi"
    "ewpointSummaryMetadata.ActivityRow\022\032\n\022ea"
    "rliest_timestamp\030\005 \001(\001\022\030\n\020latest_timesta"
    "mp\030\006 \001(\001\022\023\n\013photo_count\030\007 \001(\005\022\025\n\rcomment"
    "_count\030\010 \001(\005\022\027\n\017new_photo_count\030\t \001(\005\022\031\n"
    "\021new_comment_count\030\n \001(\005\022\023\n\013provisional\030"
    "\013 \001(\010\022\025\n\rscroll_to_row\030\014 \001(\002\032D\n\013Contribu"
    "tor\022\017\n\007user_id\030\001 \001(\003\022\022\n\nupdate_seq\030\002 \001(\001"
    "\022\020\n\010identity\030\003 \001(\t\032\300\003\n\013ActivityRow\022\023\n\013ac"
    "tivity_id\030\001 \001(\003\022\020\n\010user_ids\030\002 \003(\003\022\027\n\017use"
    "r_identities\030\016 \003(\t\022\021\n\ttimestamp\030\003 \001(\001\0227\n"
    "\004type\030\004 \001(\0162).ViewpointSummaryMetadata.A"
    "ctivityRowType\022\016\n\006height\030\005 \001(\002\022\020\n\010positi"
    "on\030\006 \001(\002\022\021\n\trow_count\030\007 \001(\005\022\022\n\nupdate_se"
    "q\030\010 \001(\003\022\017\n\007pending\030\t \001(\010\022\023\n\013thread_type\030"
    "\n \001(\005\022;\n\006photos\030\013 \003(\0132+.ViewpointSummary"
    "Metadata.ActivityRow.Photo\022\022\n\nis_comment"
    "\030\014 \001(\010\022\033\n\023is_provisional_hint\030\r \001(\010\032H\n\005P"
    "hoto\022\020\n\010photo_id\030\001 \001(\003\022\022\n\nepisode_id\030\002 \001"
    "(\003\022\031\n\021parent_episode_id\030\003 \001(\003\"n\n\017Activit"
    "yRowType\022\n\n\006HEADER\020\001\022\014\n\010ACTIVITY\020\002\022\022\n\016RE"
    "PLY_ACTIVITY\020\003\022\n\n\006PHOTOS\020\004\022\t\n\005TITLE\020\005\022\n\n"
    "\006UPDATE\020\006\022\n\n\006FOOTER\020\007B$\n\023co.viewfinder.p"
    "rotoB\rDayMetadataPB", 3179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DayMetadata.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_ContentIds_2eproto();
  ::protobuf_AddDesc_Location_2eproto();
  ::protobuf_AddDesc_Placemark_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DayMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DayMetadata_2eproto_once_);
void protobuf_AddDesc_DayMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DayMetadata_2eproto_once_,
                 &protobuf_AddDesc_DayMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DayMetadata_2eproto {
  StaticDescriptorInitializer_DayMetadata_2eproto() {
    protobuf_AddDesc_DayMetadata_2eproto();
  }
} static_descriptor_initializer_DayMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* DayContributor_ContributorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayContributor_ContributorType_descriptor_;
}
bool DayContributor_ContributorType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DayContributor_ContributorType DayContributor::UNVIEWED_CONTENT;
const DayContributor_ContributorType DayContributor::VIEWED_CONTENT;
const DayContributor_ContributorType DayContributor::NO_CONTENT;
const DayContributor_ContributorType DayContributor::ContributorType_MIN;
const DayContributor_ContributorType DayContributor::ContributorType_MAX;
const int DayContributor::ContributorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DayContributor::kUserIdFieldNumber;
const int DayContributor::kTypeFieldNumber;
const int DayContributor::kIdentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DayContributor::DayContributor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DayContributor)
}

void DayContributor::InitAsDefaultInstance() {
}

DayContributor::DayContributor(const DayContributor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DayContributor)
}

void DayContributor::SharedCtor() {
  _cached_size_ = 0;
  identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_LONGLONG(0);
  type_ = 1;
}

DayContributor::~DayContributor() {
  // @@protoc_insertion_point(destructor:DayContributor)
  SharedDtor();
}

void DayContributor::SharedDtor() {
  identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DayContributor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayContributor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayContributor_descriptor_;
}

const DayContributor& DayContributor::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DayContributor> DayContributor_default_instance_;

DayContributor* DayContributor::New(::google::protobuf::Arena* arena) const {
  DayContributor* n = new DayContributor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DayContributor::Clear() {
// @@protoc_insertion_point(message_clear_start:DayContributor)
  if (_has_bits_[0 / 32] & 7u) {
    user_id_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    if (has_identity()) {
      identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DayContributor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DayContributor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .DayContributor.ContributorType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DayContributor_ContributorType_IsValid(value)) {
            set_type(static_cast< ::DayContributor_ContributorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_identity;
        break;
      }

      // optional string identity = 3;
      case 3: {
        if (tag == 26) {
         parse_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identity().data(), this->identity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DayContributor.identity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DayContributor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DayContributor)
  return false;
#undef DO_
}

void DayContributor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DayContributor)
  // optional int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional .DayContributor.ContributorType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string identity = 3;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DayContributor.identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->identity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DayContributor)
}

::google::protobuf::uint8* DayContributor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DayContributor)
  // optional int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional .DayContributor.ContributorType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string identity = 3;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DayContributor.identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->identity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DayContributor)
  return target;
}

size_t DayContributor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DayContributor)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional .DayContributor.ContributorType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string identity = 3;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identity());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayContributor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DayContributor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DayContributor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DayContributor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DayContributor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DayContributor)
    UnsafeMergeFrom(*source);
  }
}

void DayContributor::MergeFrom(const DayContributor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DayContributor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DayContributor::UnsafeMergeFrom(const DayContributor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_identity()) {
      set_has_identity();
      identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DayContributor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DayContributor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayContributor::CopyFrom(const DayContributor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DayContributor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DayContributor::IsInitialized() const {

  return true;
}

void DayContributor::Swap(DayContributor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DayContributor::InternalSwap(DayContributor* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(type_, other->type_);
  identity_.Swap(&other->identity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DayContributor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayContributor_descriptor_;
  metadata.reflection = DayContributor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DayContributor

// optional int64 user_id = 1;
bool DayContributor::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DayContributor::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DayContributor::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DayContributor::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 DayContributor::user_id() const {
  // @@protoc_insertion_point(field_get:DayContributor.user_id)
  return user_id_;
}
void DayContributor::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:DayContributor.user_id)
}

// optional .DayContributor.ContributorType type = 2;
bool DayContributor::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DayContributor::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DayContributor::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DayContributor::clear_type() {
  type_ = 1;
  clear_has_type();
}
::DayContributor_ContributorType DayContributor::type() const {
  // @@protoc_insertion_point(field_get:DayContributor.type)
  return static_cast< ::DayContributor_ContributorType >(type_);
}
void DayContributor::set_type(::DayContributor_ContributorType value) {
  assert(::DayContributor_ContributorType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:DayContributor.type)
}

// optional string identity = 3;
bool DayContributor::has_identity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DayContributor::set_has_identity() {
  _has_bits_[0] |= 0x00000004u;
}
void DayContributor::clear_has_identity() {
  _has_bits_[0] &= ~0x00000004u;
}
void DayContributor::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identity();
}
const ::std::string& DayContributor::identity() const {
  // @@protoc_insertion_point(field_get:DayContributor.identity)
  return identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DayContributor::set_identity(const ::std::string& value) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DayContributor.identity)
}
void DayContributor::set_identity(const char* value) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DayContributor.identity)
}
void DayContributor::set_identity(const char* value, size_t size) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DayContributor.identity)
}
::std::string* DayContributor::mutable_identity() {
  set_has_identity();
  // @@protoc_insertion_point(field_mutable:DayContributor.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DayContributor::release_identity() {
  // @@protoc_insertion_point(field_release:DayContributor.identity)
  clear_has_identity();
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DayContributor::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    set_has_identity();
  } else {
    clear_has_identity();
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:DayContributor.identity)
}

inline const DayContributor* DayContributor::internal_default_instance() {
  return &DayContributor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DayPhoto::kPhotoIdFieldNumber;
const int DayPhoto::kEpisodeIdFieldNumber;
const int DayPhoto::kAspectRatioFieldNumber;
const int DayPhoto::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DayPhoto::DayPhoto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DayPhoto)
}

void DayPhoto::InitAsDefaultInstance() {
}

DayPhoto::DayPhoto(const DayPhoto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DayPhoto)
}

void DayPhoto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&photo_id_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&photo_id_) + sizeof(timestamp_));
}

DayPhoto::~DayPhoto() {
  // @@protoc_insertion_point(destructor:DayPhoto)
  SharedDtor();
}

void DayPhoto::SharedDtor() {
}

void DayPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayPhoto_descriptor_;
}

const DayPhoto& DayPhoto::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DayPhoto> DayPhoto_default_instance_;

DayPhoto* DayPhoto::New(::google::protobuf::Arena* arena) const {
  DayPhoto* n = new DayPhoto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DayPhoto::Clear() {
// @@protoc_insertion_point(message_clear_start:DayPhoto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DayPhoto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DayPhoto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(photo_id_, timestamp_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DayPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DayPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 photo_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_photo_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &photo_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_episode_id;
        break;
      }

      // optional int64 episode_id = 2;
      case 2: {
        if (tag == 16) {
         parse_episode_id:
          set_has_episode_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &episode_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_aspect_ratio;
        break;
      }

      // optional double aspect_ratio = 3;
      case 3: {
        if (tag == 25) {
         parse_aspect_ratio:
          set_has_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 4;
      case 4: {
        if (tag == 33) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DayPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DayPhoto)
  return false;
#undef DO_
}

void DayPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DayPhoto)
  // optional int64 photo_id = 1;
  if (has_photo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->photo_id(), output);
  }

  // optional int64 episode_id = 2;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->episode_id(), output);
  }

  // optional double aspect_ratio = 3;
  if (has_aspect_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->aspect_ratio(), output);
  }

  // optional double timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DayPhoto)
}

::google::protobuf::uint8* DayPhoto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DayPhoto)
  // optional int64 photo_id = 1;
  if (has_photo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->photo_id(), target);
  }

  // optional int64 episode_id = 2;
  if (has_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->episode_id(), target);
  }

  // optional double aspect_ratio = 3;
  if (has_aspect_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->aspect_ratio(), target);
  }

  // optional double timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DayPhoto)
  return target;
}

size_t DayPhoto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DayPhoto)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 photo_id = 1;
    if (has_photo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->photo_id());
    }

    // optional int64 episode_id = 2;
    if (has_episode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->episode_id());
    }

    // optional double aspect_ratio = 3;
    if (has_aspect_ratio()) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayPhoto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DayPhoto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DayPhoto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DayPhoto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DayPhoto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DayPhoto)
    UnsafeMergeFrom(*source);
  }
}

void DayPhoto::MergeFrom(const DayPhoto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DayPhoto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DayPhoto::UnsafeMergeFrom(const DayPhoto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_photo_id()) {
      set_photo_id(from.photo_id());
    }
    if (from.has_episode_id()) {
      set_episode_id(from.episode_id());
    }
    if (from.has_aspect_ratio()) {
      set_aspect_ratio(from.aspect_ratio());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DayPhoto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DayPhoto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayPhoto::CopyFrom(const DayPhoto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DayPhoto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DayPhoto::IsInitialized() const {

  return true;
}

void DayPhoto::Swap(DayPhoto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DayPhoto::InternalSwap(DayPhoto* other) {
  std::swap(photo_id_, other->photo_id_);
  std::swap(episode_id_, other->episode_id_);
  std::swap(aspect_ratio_, other->aspect_ratio_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DayPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayPhoto_descriptor_;
  metadata.reflection = DayPhoto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DayPhoto

// optional int64 photo_id = 1;
bool DayPhoto::has_photo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DayPhoto::set_has_photo_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DayPhoto::clear_has_photo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DayPhoto::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
  clear_has_photo_id();
}
::google::protobuf::int64 DayPhoto::photo_id() const {
  // @@protoc_insertion_point(field_get:DayPhoto.photo_id)
  return photo_id_;
}
void DayPhoto::set_photo_id(::google::protobuf::int64 value) {
  set_has_photo_id();
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:DayPhoto.photo_id)
}

// optional int64 episode_id = 2;
bool DayPhoto::has_episode_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DayPhoto::set_has_episode_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DayPhoto::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DayPhoto::clear_episode_id() {
  episode_id_ = GOOGLE_LONGLONG(0);
  clear_has_episode_id();
}
::google::protobuf::int64 DayPhoto::episode_id() const {
  // @@protoc_insertion_point(field_get:DayPhoto.episode_id)
  return episode_id_;
}
void DayPhoto::set_episode_id(::google::protobuf::int64 value) {
  set_has_episode_id();
  episode_id_ = value;
  // @@protoc_insertion_point(field_set:DayPhoto.episode_id)
}

// optional double aspect_ratio = 3;
bool DayPhoto::has_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DayPhoto::set_has_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void DayPhoto::clear_has_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void DayPhoto::clear_aspect_ratio() {
  aspect_ratio_ = 0;
  clear_has_aspect_ratio();
}
double DayPhoto::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:DayPhoto.aspect_ratio)
  return aspect_ratio_;
}
void DayPhoto::set_aspect_ratio(double value) {
  set_has_aspect_ratio();
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:DayPhoto.aspect_ratio)
}

// optional double timestamp = 4;
bool DayPhoto::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DayPhoto::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void DayPhoto::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void DayPhoto::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double DayPhoto::timestamp() const {
  // @@protoc_insertion_point(field_get:DayPhoto.timestamp)
  return timestamp_;
}
void DayPhoto::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:DayPhoto.timestamp)
}

inline const DayPhoto* DayPhoto::internal_default_instance() {
  return &DayPhoto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilteredEpisode::kEpisodeIdFieldNumber;
const int FilteredEpisode::kPhotoIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilteredEpisode::FilteredEpisode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FilteredEpisode)
}

void FilteredEpisode::InitAsDefaultInstance() {
}

FilteredEpisode::FilteredEpisode(const FilteredEpisode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FilteredEpisode)
}

void FilteredEpisode::SharedCtor() {
  _cached_size_ = 0;
  episode_id_ = GOOGLE_LONGLONG(0);
}

FilteredEpisode::~FilteredEpisode() {
  // @@protoc_insertion_point(destructor:FilteredEpisode)
  SharedDtor();
}

void FilteredEpisode::SharedDtor() {
}

void FilteredEpisode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilteredEpisode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilteredEpisode_descriptor_;
}

const FilteredEpisode& FilteredEpisode::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FilteredEpisode> FilteredEpisode_default_instance_;

FilteredEpisode* FilteredEpisode::New(::google::protobuf::Arena* arena) const {
  FilteredEpisode* n = new FilteredEpisode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilteredEpisode::Clear() {
// @@protoc_insertion_point(message_clear_start:FilteredEpisode)
  episode_id_ = GOOGLE_LONGLONG(0);
  photo_ids_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FilteredEpisode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FilteredEpisode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 episode_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_episode_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &episode_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_photo_ids;
        break;
      }

      // repeated int64 photo_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_photo_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_photo_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_photo_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_photo_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FilteredEpisode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FilteredEpisode)
  return false;
#undef DO_
}

void FilteredEpisode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FilteredEpisode)
  // optional int64 episode_id = 1;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->episode_id(), output);
  }

  // repeated int64 photo_ids = 2;
  for (int i = 0; i < this->photo_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->photo_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FilteredEpisode)
}

::google::protobuf::uint8* FilteredEpisode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FilteredEpisode)
  // optional int64 episode_id = 1;
  if (has_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->episode_id(), target);
  }

  // repeated int64 photo_ids = 2;
  for (int i = 0; i < this->photo_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->photo_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FilteredEpisode)
  return target;
}

size_t FilteredEpisode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FilteredEpisode)
  size_t total_size = 0;

  // optional int64 episode_id = 1;
  if (has_episode_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->episode_id());
  }

  // repeated int64 photo_ids = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->photo_ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->photo_ids(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->photo_ids_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilteredEpisode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FilteredEpisode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FilteredEpisode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FilteredEpisode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FilteredEpisode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FilteredEpisode)
    UnsafeMergeFrom(*source);
  }
}

void FilteredEpisode::MergeFrom(const FilteredEpisode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FilteredEpisode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FilteredEpisode::UnsafeMergeFrom(const FilteredEpisode& from) {
  GOOGLE_DCHECK(&from != this);
  photo_ids_.UnsafeMergeFrom(from.photo_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_episode_id()) {
      set_episode_id(from.episode_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void FilteredEpisode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FilteredEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilteredEpisode::CopyFrom(const FilteredEpisode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FilteredEpisode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FilteredEpisode::IsInitialized() const {

  return true;
}

void FilteredEpisode::Swap(FilteredEpisode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilteredEpisode::InternalSwap(FilteredEpisode* other) {
  std::swap(episode_id_, other->episode_id_);
  photo_ids_.UnsafeArenaSwap(&other->photo_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilteredEpisode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilteredEpisode_descriptor_;
  metadata.reflection = FilteredEpisode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilteredEpisode

// optional int64 episode_id = 1;
bool FilteredEpisode::has_episode_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FilteredEpisode::set_has_episode_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FilteredEpisode::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FilteredEpisode::clear_episode_id() {
  episode_id_ = GOOGLE_LONGLONG(0);
  clear_has_episode_id();
}
::google::protobuf::int64 FilteredEpisode::episode_id() const {
  // @@protoc_insertion_point(field_get:FilteredEpisode.episode_id)
  return episode_id_;
}
void FilteredEpisode::set_episode_id(::google::protobuf::int64 value) {
  set_has_episode_id();
  episode_id_ = value;
  // @@protoc_insertion_point(field_set:FilteredEpisode.episode_id)
}

// repeated int64 photo_ids = 2;
int FilteredEpisode::photo_ids_size() const {
  return photo_ids_.size();
}
void FilteredEpisode::clear_photo_ids() {
  photo_ids_.Clear();
}
::google::protobuf::int64 FilteredEpisode::photo_ids(int index) const {
  // @@protoc_insertion_point(field_get:FilteredEpisode.photo_ids)
  return photo_ids_.Get(index);
}
void FilteredEpisode::set_photo_ids(int index, ::google::protobuf::int64 value) {
  photo_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:FilteredEpisode.photo_ids)
}
void FilteredEpisode::add_photo_ids(::google::protobuf::int64 value) {
  photo_ids_.Add(value);
  // @@protoc_insertion_point(field_add:FilteredEpisode.photo_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FilteredEpisode::photo_ids() const {
  // @@protoc_insertion_point(field_list:FilteredEpisode.photo_ids)
  return photo_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FilteredEpisode::mutable_photo_ids() {
  // @@protoc_insertion_point(field_mutable_list:FilteredEpisode.photo_ids)
  return &photo_ids_;
}

inline const FilteredEpisode* FilteredEpisode::internal_default_instance() {
  return &FilteredEpisode_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TrapdoorMetadata_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrapdoorMetadata_Type_descriptor_;
}
bool TrapdoorMetadata_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrapdoorMetadata_Type TrapdoorMetadata::INBOX;
const TrapdoorMetadata_Type TrapdoorMetadata::EVENT;
const TrapdoorMetadata_Type TrapdoorMetadata::Type_MIN;
const TrapdoorMetadata_Type TrapdoorMetadata::Type_MAX;
const int TrapdoorMetadata::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrapdoorMetadata::kViewpointIdFieldNumber;
const int TrapdoorMetadata::kTypeFieldNumber;
const int TrapdoorMetadata::kCoverPhotoFieldNumber;
const int TrapdoorMetadata::kEarliestTimestampFieldNumber;
const int TrapdoorMetadata::kLatestTimestampFieldNumber;
const int TrapdoorMetadata::kEventIndexFieldNumber;
const int TrapdoorMetadata::kContributorsFieldNumber;
const int TrapdoorMetadata::kPhotosFieldNumber;
const int TrapdoorMetadata::kSubSampledFieldNumber;
const int TrapdoorMetadata::kPhotoCountFieldNumber;
const int TrapdoorMetadata::kCommentCountFieldNumber;
const int TrapdoorMetadata::kNewPhotoCountFieldNumber;
const int TrapdoorMetadata::kNewCommentCountFieldNumber;
const int TrapdoorMetadata::kUnviewedContentFieldNumber;
const int TrapdoorMetadata::kPendingContentFieldNumber;
const int TrapdoorMetadata::kMutedFieldNumber;
const int TrapdoorMetadata::kAutosaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrapdoorMetadata::TrapdoorMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrapdoorMetadata)
}

void TrapdoorMetadata::InitAsDefaultInstance() {
  cover_photo_ = const_cast< ::DayPhoto*>(
      ::DayPhoto::internal_default_instance());
}

TrapdoorMetadata::TrapdoorMetadata(const TrapdoorMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrapdoorMetadata)
}

void TrapdoorMetadata::SharedCtor() {
  _cached_size_ = 0;
  cover_photo_ = NULL;
  ::memset(&viewpoint_id_, 0, reinterpret_cast<char*>(&autosave_) -
    reinterpret_cast<char*>(&viewpoint_id_) + sizeof(autosave_));
  type_ = 1;
}

TrapdoorMetadata::~TrapdoorMetadata() {
  // @@protoc_insertion_point(destructor:TrapdoorMetadata)
  SharedDtor();
}

void TrapdoorMetadata::SharedDtor() {
  if (this != &TrapdoorMetadata_default_instance_.get()) {
    delete cover_photo_;
  }
}

void TrapdoorMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrapdoorMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrapdoorMetadata_descriptor_;
}

const TrapdoorMetadata& TrapdoorMetadata::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TrapdoorMetadata> TrapdoorMetadata_default_instance_;

TrapdoorMetadata* TrapdoorMetadata::New(::google::protobuf::Arena* arena) const {
  TrapdoorMetadata* n = new TrapdoorMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrapdoorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TrapdoorMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrapdoorMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrapdoorMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(viewpoint_id_, event_index_);
    type_ = 1;
    if (has_cover_photo()) {
      if (cover_photo_ != NULL) cover_photo_->::DayPhoto::Clear();
    }
  }
  ZR_(photo_count_, muted_);
  autosave_ = false;

#undef ZR_HELPER_
#undef ZR_

  contributors_.Clear();
  photos_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrapdoorMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrapdoorMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 viewpoint_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_viewpoint_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &viewpoint_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .TrapdoorMetadata.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TrapdoorMetadata_Type_IsValid(value)) {
            set_type(static_cast< ::TrapdoorMetadata_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cover_photo;
        break;
      }

      // optional .DayPhoto cover_photo = 3;
      case 3: {
        if (tag == 26) {
         parse_cover_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cover_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_earliest_timestamp;
        break;
      }

      // optional double earliest_timestamp = 4;
      case 4: {
        if (tag == 33) {
         parse_earliest_timestamp:
          set_has_earliest_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &earliest_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_latest_timestamp;
        break;
      }

      // optional double latest_timestamp = 5;
      case 5: {
        if (tag == 41) {
         parse_latest_timestamp:
          set_has_latest_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latest_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_event_index;
        break;
      }

      // optional int32 event_index = 6;
      case 6: {
        if (tag == 48) {
         parse_event_index:
          set_has_event_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_contributors;
        break;
      }

      // repeated .DayContributor contributors = 7;
      case 7: {
        if (tag == 58) {
         parse_contributors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_contributors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contributors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_contributors;
        if (input->ExpectTag(66)) goto parse_loop_photos;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .DayPhoto photos = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_photos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_sub_sampled;
        break;
      }

      // optional bool sub_sampled = 9;
      case 9: {
        if (tag == 72) {
         parse_sub_sampled:
          set_has_sub_sampled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_sampled_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_photo_count;
        break;
      }

      // optional int32 photo_count = 10;
      case 10: {
        if (tag == 80) {
         parse_photo_count:
          set_has_photo_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_comment_count;
        break;
      }

      // optional int32 comment_count = 11;
      case 11: {
        if (tag == 88) {
         parse_comment_count:
          set_has_comment_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_new_photo_count;
        break;
      }

      // optional int32 new_photo_count = 12;
      case 12: {
        if (tag == 96) {
         parse_new_photo_count:
          set_has_new_photo_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_photo_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_new_comment_count;
        break;
      }

      // optional int32 new_comment_count = 13;
      case 13: {
        if (tag == 104) {
         parse_new_comment_count:
          set_has_new_comment_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_comment_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_unviewed_content;
        break;
      }

      // optional bool unviewed_content = 14;
      case 14: {
        if (tag == 112) {
         parse_unviewed_content:
          set_has_unviewed_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unviewed_content_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_pending_content;
        break;
      }

      // optional bool pending_content = 15;
      case 15: {
        if (tag == 120) {
         parse_pending_content:
          set_has_pending_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pending_content_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_muted;
        break;
      }

      // optional bool muted = 16;
      case 16: {
        if (tag == 128) {
         parse_muted:
          set_has_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &muted_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_autosave;
        break;
      }

      // optional bool autosave = 17;
      case 17: {
        if (tag == 136) {
         parse_autosave:
          set_has_autosave();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autosave_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrapdoorMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrapdoorMetadata)
  return false;
#undef DO_
}

void TrapdoorMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrapdoorMetadata)
  // optional int64 viewpoint_id = 1;
  if (has_viewpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->viewpoint_id(), output);
  }

  // optional .TrapdoorMetadata.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .DayPhoto cover_photo = 3;
  if (has_cover_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cover_photo_, output);
  }

  // optional double earliest_timestamp = 4;
  if (has_earliest_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->earliest_timestamp(), output);
  }

  // optional double latest_timestamp = 5;
  if (has_latest_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latest_timestamp(), output);
  }

  // optional int32 event_index = 6;
  if (has_event_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->event_index(), output);
  }

  // repeated .DayContributor contributors = 7;
  for (unsigned int i = 0, n = this->contributors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->contributors(i), output);
  }

  // repeated .DayPhoto photos = 8;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->photos(i), output);
  }

  // optional bool sub_sampled = 9;
  if (has_sub_sampled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->sub_sampled(), output);
  }

  // optional int32 photo_count = 10;
  if (has_photo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->photo_count(), output);
  }

  // optional int32 comment_count = 11;
  if (has_comment_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->comment_count(), output);
  }

  // optional int32 new_photo_count = 12;
  if (has_new_photo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->new_photo_count(), output);
  }

  // optional int32 new_comment_count = 13;
  if (has_new_comment_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->new_comment_count(), output);
  }

  // optional bool unviewed_content = 14;
  if (has_unviewed_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->unviewed_content(), output);
  }

  // optional bool pending_content = 15;
  if (has_pending_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->pending_content(), output);
  }

  // optional bool muted = 16;
  if (has_muted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->muted(), output);
  }

  // optional bool autosave = 17;
  if (has_autosave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->autosave(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrapdoorMetadata)
}

::google::protobuf::uint8* TrapdoorMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TrapdoorMetadata)
  // optional int64 viewpoint_id = 1;
  if (has_viewpoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->viewpoint_id(), target);
  }

  // optional .TrapdoorMetadata.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .DayPhoto cover_photo = 3;
  if (has_cover_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cover_photo_, false, target);
  }

  // optional double earliest_timestamp = 4;
  if (has_earliest_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->earliest_timestamp(), target);
  }

  // optional double latest_timestamp = 5;
  if (has_latest_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latest_timestamp(), target);
  }

  // optional int32 event_index = 6;
  if (has_event_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->event_index(), target);
  }

  // repeated .DayContributor contributors = 7;
  for (unsigned int i = 0, n = this->contributors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->contributors(i), false, target);
  }

  // repeated .DayPhoto photos = 8;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->photos(i), false, target);
  }

  // optional bool sub_sampled = 9;
  if (has_sub_sampled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->sub_sampled(), target);
  }

  // optional int32 photo_count = 10;
  if (has_photo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->photo_count(), target);
  }

  // optional int32 comment_count = 11;
  if (has_comment_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->comment_count(), target);
  }

  // optional int32 new_photo_count = 12;
  if (has_new_photo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->new_photo_count(), target);
  }

  // optional int32 new_comment_count = 13;
  if (has_new_comment_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->new_comment_count(), target);
  }

  // optional bool unviewed_content = 14;
  if (has_unviewed_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->unviewed_content(), target);
  }

  // optional bool pending_content = 15;
  if (has_pending_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->pending_content(), target);
  }

  // optional bool muted = 16;
  if (has_muted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->muted(), target);
  }

  // optional bool autosave = 17;
  if (has_autosave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->autosave(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrapdoorMetadata)
  return target;
}

size_t TrapdoorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrapdoorMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional int64 viewpoint_id = 1;
    if (has_viewpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->viewpoint_id());
    }

    // optional .TrapdoorMetadata.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .DayPhoto cover_photo = 3;
    if (has_cover_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cover_photo_);
    }

    // optional double earliest_timestamp = 4;
    if (has_earliest_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double latest_timestamp = 5;
    if (has_latest_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int32 event_index = 6;
    if (has_event_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_index());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool sub_sampled = 9;
    if (has_sub_sampled()) {
      total_size += 1 + 1;
    }

    // optional int32 photo_count = 10;
    if (has_photo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_count());
    }

    // optional int32 comment_count = 11;
    if (has_comment_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_count());
    }

    // optional int32 new_photo_count = 12;
    if (has_new_photo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_photo_count());
    }

    // optional int32 new_comment_count = 13;
    if (has_new_comment_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_comment_count());
    }

    // optional bool unviewed_content = 14;
    if (has_unviewed_content()) {
      total_size += 1 + 1;
    }

    // optional bool pending_content = 15;
    if (has_pending_content()) {
      total_size += 1 + 1;
    }

    // optional bool muted = 16;
    if (has_muted()) {
      total_size += 2 + 1;
    }

  }
  // optional bool autosave = 17;
  if (has_autosave()) {
    total_size += 2 + 1;
  }

  // repeated .DayContributor contributors = 7;
  {
    unsigned int count = this->contributors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contributors(i));
    }
  }

  // repeated .DayPhoto photos = 8;
  {
    unsigned int count = this->photos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photos(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapdoorMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrapdoorMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrapdoorMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrapdoorMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrapdoorMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrapdoorMetadata)
    UnsafeMergeFrom(*source);
  }
}

void TrapdoorMetadata::MergeFrom(const TrapdoorMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrapdoorMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TrapdoorMetadata::UnsafeMergeFrom(const TrapdoorMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  contributors_.MergeFrom(from.contributors_);
  photos_.MergeFrom(from.photos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewpoint_id()) {
      set_viewpoint_id(from.viewpoint_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cover_photo()) {
      mutable_cover_photo()->::DayPhoto::MergeFrom(from.cover_photo());
    }
    if (from.has_earliest_timestamp()) {
      set_earliest_timestamp(from.earliest_timestamp());
    }
    if (from.has_latest_timestamp()) {
      set_latest_timestamp(from.latest_timestamp());
    }
    if (from.has_event_index()) {
      set_event_index(from.event_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sub_sampled()) {
      set_sub_sampled(from.sub_sampled());
    }
    if (from.has_photo_count()) {
      set_photo_count(from.photo_count());
    }
    if (from.has_comment_count()) {
      set_comment_count(from.comment_count());
    }
    if (from.has_new_photo_count()) {
      set_new_photo_count(from.new_photo_count());
    }
    if (from.has_new_comment_count()) {
      set_new_comment_count(from.new_comment_count());
    }
    if (from.has_unviewed_content()) {
      set_unviewed_content(from.unviewed_content());
    }
    if (from.has_pending_content()) {
      set_pending_content(from.pending_content());
    }
    if (from.has_muted()) {
      set_muted(from.muted());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_autosave()) {
      set_autosave(from.autosave());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TrapdoorMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrapdoorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrapdoorMetadata::CopyFrom(const TrapdoorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrapdoorMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TrapdoorMetadata::IsInitialized() const {

  return true;
}

void TrapdoorMetadata::Swap(TrapdoorMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrapdoorMetadata::InternalSwap(TrapdoorMetadata* other) {
  std::swap(viewpoint_id_, other->viewpoint_id_);
  std::swap(type_, other->type_);
  std::swap(cover_photo_, other->cover_photo_);
  std::swap(earliest_timestamp_, other->earliest_timestamp_);
  std::swap(latest_timestamp_, other->latest_timestamp_);
  std::swap(event_index_, other->event_index_);
  contributors_.UnsafeArenaSwap(&other->contributors_);
  photos_.UnsafeArenaSwap(&other->photos_);
  std::swap(sub_sampled_, other->sub_sampled_);
  std::swap(photo_count_, other->photo_count_);
  std::swap(comment_count_, other->comment_count_);
  std::swap(new_photo_count_, other->new_photo_count_);
  std::swap(new_comment_count_, other->new_comment_count_);
  std::swap(unviewed_content_, other->unviewed_content_);
  std::swap(pending_content_, other->pending_content_);
  std::swap(muted_, other->muted_);
  std::swap(autosave_, other->autosave_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrapdoorMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrapdoorMetadata_descriptor_;
  metadata.reflection = TrapdoorMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrapdoorMetadata

// optional int64 viewpoint_id = 1;
bool TrapdoorMetadata::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrapdoorMetadata::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrapdoorMetadata::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrapdoorMetadata::clear_viewpoint_id() {
  viewpoint_id_ = GOOGLE_LONGLONG(0);
  clear_has_viewpoint_id();
}
::google::protobuf::int64 TrapdoorMetadata::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.viewpoint_id)
  return viewpoint_id_;
}
void TrapdoorMetadata::set_viewpoint_id(::google::protobuf::int64 value) {
  set_has_viewpoint_id();
  viewpoint_id_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.viewpoint_id)
}

// optional .TrapdoorMetadata.Type type = 2;
bool TrapdoorMetadata::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrapdoorMetadata::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void TrapdoorMetadata::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrapdoorMetadata::clear_type() {
  type_ = 1;
  clear_has_type();
}
::TrapdoorMetadata_Type TrapdoorMetadata::type() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.type)
  return static_cast< ::TrapdoorMetadata_Type >(type_);
}
void TrapdoorMetadata::set_type(::TrapdoorMetadata_Type value) {
  assert(::TrapdoorMetadata_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.type)
}

// optional .DayPhoto cover_photo = 3;
bool TrapdoorMetadata::has_cover_photo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrapdoorMetadata::set_has_cover_photo() {
  _has_bits_[0] |= 0x00000004u;
}
void TrapdoorMetadata::clear_has_cover_photo() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrapdoorMetadata::clear_cover_photo() {
  if (cover_photo_ != NULL) cover_photo_->::DayPhoto::Clear();
  clear_has_cover_photo();
}
const ::DayPhoto& TrapdoorMetadata::cover_photo() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.cover_photo)
  return cover_photo_ != NULL ? *cover_photo_
                         : *::DayPhoto::internal_default_instance();
}
::DayPhoto* TrapdoorMetadata::mutable_cover_photo() {
  set_has_cover_photo();
  if (cover_photo_ == NULL) {
    cover_photo_ = new ::DayPhoto;
  }
  // @@protoc_insertion_point(field_mutable:TrapdoorMetadata.cover_photo)
  return cover_photo_;
}
::DayPhoto* TrapdoorMetadata::release_cover_photo() {
  // @@protoc_insertion_point(field_release:TrapdoorMetadata.cover_photo)
  clear_has_cover_photo();
  ::DayPhoto* temp = cover_photo_;
  cover_photo_ = NULL;
  return temp;
}
void TrapdoorMetadata::set_allocated_cover_photo(::DayPhoto* cover_photo) {
  delete cover_photo_;
  cover_photo_ = cover_photo;
  if (cover_photo) {
    set_has_cover_photo();
  } else {
    clear_has_cover_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:TrapdoorMetadata.cover_photo)
}

// optional double earliest_timestamp = 4;
bool TrapdoorMetadata::has_earliest_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrapdoorMetadata::set_has_earliest_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void TrapdoorMetadata::clear_has_earliest_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrapdoorMetadata::clear_earliest_timestamp() {
  earliest_timestamp_ = 0;
  clear_has_earliest_timestamp();
}
double TrapdoorMetadata::earliest_timestamp() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.earliest_timestamp)
  return earliest_timestamp_;
}
void TrapdoorMetadata::set_earliest_timestamp(double value) {
  set_has_earliest_timestamp();
  earliest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.earliest_timestamp)
}

// optional double latest_timestamp = 5;
bool TrapdoorMetadata::has_latest_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrapdoorMetadata::set_has_latest_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void TrapdoorMetadata::clear_has_latest_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrapdoorMetadata::clear_latest_timestamp() {
  latest_timestamp_ = 0;
  clear_has_latest_timestamp();
}
double TrapdoorMetadata::latest_timestamp() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.latest_timestamp)
  return latest_timestamp_;
}
void TrapdoorMetadata::set_latest_timestamp(double value) {
  set_has_latest_timestamp();
  latest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.latest_timestamp)
}

// optional int32 event_index = 6;
bool TrapdoorMetadata::has_event_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrapdoorMetadata::set_has_event_index() {
  _has_bits_[0] |= 0x00000020u;
}
void TrapdoorMetadata::clear_has_event_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrapdoorMetadata::clear_event_index() {
  event_index_ = 0;
  clear_has_event_index();
}
::google::protobuf::int32 TrapdoorMetadata::event_index() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.event_index)
  return event_index_;
}
void TrapdoorMetadata::set_event_index(::google::protobuf::int32 value) {
  set_has_event_index();
  event_index_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.event_index)
}

// repeated .DayContributor contributors = 7;
int TrapdoorMetadata::contributors_size() const {
  return contributors_.size();
}
void TrapdoorMetadata::clear_contributors() {
  contributors_.Clear();
}
const ::DayContributor& TrapdoorMetadata::contributors(int index) const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.contributors)
  return contributors_.Get(index);
}
::DayContributor* TrapdoorMetadata::mutable_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:TrapdoorMetadata.contributors)
  return contributors_.Mutable(index);
}
::DayContributor* TrapdoorMetadata::add_contributors() {
  // @@protoc_insertion_point(field_add:TrapdoorMetadata.contributors)
  return contributors_.Add();
}
::google::protobuf::RepeatedPtrField< ::DayContributor >*
TrapdoorMetadata::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:TrapdoorMetadata.contributors)
  return &contributors_;
}
const ::google::protobuf::RepeatedPtrField< ::DayContributor >&
TrapdoorMetadata::contributors() const {
  // @@protoc_insertion_point(field_list:TrapdoorMetadata.contributors)
  return contributors_;
}

// repeated .DayPhoto photos = 8;
int TrapdoorMetadata::photos_size() const {
  return photos_.size();
}
void TrapdoorMetadata::clear_photos() {
  photos_.Clear();
}
const ::DayPhoto& TrapdoorMetadata::photos(int index) const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.photos)
  return photos_.Get(index);
}
::DayPhoto* TrapdoorMetadata::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:TrapdoorMetadata.photos)
  return photos_.Mutable(index);
}
::DayPhoto* TrapdoorMetadata::add_photos() {
  // @@protoc_insertion_point(field_add:TrapdoorMetadata.photos)
  return photos_.Add();
}
::google::protobuf::RepeatedPtrField< ::DayPhoto >*
TrapdoorMetadata::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:TrapdoorMetadata.photos)
  return &photos_;
}
const ::google::protobuf::RepeatedPtrField< ::DayPhoto >&
TrapdoorMetadata::photos() const {
  // @@protoc_insertion_point(field_list:TrapdoorMetadata.photos)
  return photos_;
}

// optional bool sub_sampled = 9;
bool TrapdoorMetadata::has_sub_sampled() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TrapdoorMetadata::set_has_sub_sampled() {
  _has_bits_[0] |= 0x00000100u;
}
void TrapdoorMetadata::clear_has_sub_sampled() {
  _has_bits_[0] &= ~0x00000100u;
}
void TrapdoorMetadata::clear_sub_sampled() {
  sub_sampled_ = false;
  clear_has_sub_sampled();
}
bool TrapdoorMetadata::sub_sampled() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.sub_sampled)
  return sub_sampled_;
}
void TrapdoorMetadata::set_sub_sampled(bool value) {
  set_has_sub_sampled();
  sub_sampled_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.sub_sampled)
}

// optional int32 photo_count = 10;
bool TrapdoorMetadata::has_photo_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TrapdoorMetadata::set_has_photo_count() {
  _has_bits_[0] |= 0x00000200u;
}
void TrapdoorMetadata::clear_has_photo_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void TrapdoorMetadata::clear_photo_count() {
  photo_count_ = 0;
  clear_has_photo_count();
}
::google::protobuf::int32 TrapdoorMetadata::photo_count() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.photo_count)
  return photo_count_;
}
void TrapdoorMetadata::set_photo_count(::google::protobuf::int32 value) {
  set_has_photo_count();
  photo_count_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.photo_count)
}

// optional int32 comment_count = 11;
bool TrapdoorMetadata::has_comment_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TrapdoorMetadata::set_has_comment_count() {
  _has_bits_[0] |= 0x00000400u;
}
void TrapdoorMetadata::clear_has_comment_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void TrapdoorMetadata::clear_comment_count() {
  comment_count_ = 0;
  clear_has_comment_count();
}
::google::protobuf::int32 TrapdoorMetadata::comment_count() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.comment_count)
  return comment_count_;
}
void TrapdoorMetadata::set_comment_count(::google::protobuf::int32 value) {
  set_has_comment_count();
  comment_count_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.comment_count)
}

// optional int32 new_photo_count = 12;
bool TrapdoorMetadata::has_new_photo_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TrapdoorMetadata::set_has_new_photo_count() {
  _has_bits_[0] |= 0x00000800u;
}
void TrapdoorMetadata::clear_has_new_photo_count() {
  _has_bits_[0] &= ~0x00000800u;
}
void TrapdoorMetadata::clear_new_photo_count() {
  new_photo_count_ = 0;
  clear_has_new_photo_count();
}
::google::protobuf::int32 TrapdoorMetadata::new_photo_count() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.new_photo_count)
  return new_photo_count_;
}
void TrapdoorMetadata::set_new_photo_count(::google::protobuf::int32 value) {
  set_has_new_photo_count();
  new_photo_count_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.new_photo_count)
}

// optional int32 new_comment_count = 13;
bool TrapdoorMetadata::has_new_comment_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TrapdoorMetadata::set_has_new_comment_count() {
  _has_bits_[0] |= 0x00001000u;
}
void TrapdoorMetadata::clear_has_new_comment_count() {
  _has_bits_[0] &= ~0x00001000u;
}
void TrapdoorMetadata::clear_new_comment_count() {
  new_comment_count_ = 0;
  clear_has_new_comment_count();
}
::google::protobuf::int32 TrapdoorMetadata::new_comment_count() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.new_comment_count)
  return new_comment_count_;
}
void TrapdoorMetadata::set_new_comment_count(::google::protobuf::int32 value) {
  set_has_new_comment_count();
  new_comment_count_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.new_comment_count)
}

// optional bool unviewed_content = 14;
bool TrapdoorMetadata::has_unviewed_content() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TrapdoorMetadata::set_has_unviewed_content() {
  _has_bits_[0] |= 0x00002000u;
}
void TrapdoorMetadata::clear_has_unviewed_content() {
  _has_bits_[0] &= ~0x00002000u;
}
void TrapdoorMetadata::clear_unviewed_content() {
  unviewed_content_ = false;
  clear_has_unviewed_content();
}
bool TrapdoorMetadata::unviewed_content() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.unviewed_content)
  return unviewed_content_;
}
void TrapdoorMetadata::set_unviewed_content(bool value) {
  set_has_unviewed_content();
  unviewed_content_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.unviewed_content)
}

// optional bool pending_content = 15;
bool TrapdoorMetadata::has_pending_content() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TrapdoorMetadata::set_has_pending_content() {
  _has_bits_[0] |= 0x00004000u;
}
void TrapdoorMetadata::clear_has_pending_content() {
  _has_bits_[0] &= ~0x00004000u;
}
void TrapdoorMetadata::clear_pending_content() {
  pending_content_ = false;
  clear_has_pending_content();
}
bool TrapdoorMetadata::pending_content() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.pending_content)
  return pending_content_;
}
void TrapdoorMetadata::set_pending_content(bool value) {
  set_has_pending_content();
  pending_content_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.pending_content)
}

// optional bool muted = 16;
bool TrapdoorMetadata::has_muted() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TrapdoorMetadata::set_has_muted() {
  _has_bits_[0] |= 0x00008000u;
}
void TrapdoorMetadata::clear_has_muted() {
  _has_bits_[0] &= ~0x00008000u;
}
void TrapdoorMetadata::clear_muted() {
  muted_ = false;
  clear_has_muted();
}
bool TrapdoorMetadata::muted() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.muted)
  return muted_;
}
void TrapdoorMetadata::set_muted(bool value) {
  set_has_muted();
  muted_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.muted)
}

// optional bool autosave = 17;
bool TrapdoorMetadata::has_autosave() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TrapdoorMetadata::set_has_autosave() {
  _has_bits_[0] |= 0x00010000u;
}
void TrapdoorMetadata::clear_has_autosave() {
  _has_bits_[0] &= ~0x00010000u;
}
void TrapdoorMetadata::clear_autosave() {
  autosave_ = false;
  clear_has_autosave();
}
bool TrapdoorMetadata::autosave() const {
  // @@protoc_insertion_point(field_get:TrapdoorMetadata.autosave)
  return autosave_;
}
void TrapdoorMetadata::set_autosave(bool value) {
  set_has_autosave();
  autosave_ = value;
  // @@protoc_insertion_point(field_set:TrapdoorMetadata.autosave)
}

inline const TrapdoorMetadata* TrapdoorMetadata::internal_default_instance() {
  return &TrapdoorMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventMetadata::kEarliestTimestampFieldNumber;
const int EventMetadata::kLatestTimestampFieldNumber;
const int EventMetadata::kPhotoCountFieldNumber;
const int EventMetadata::kEpisodesFieldNumber;
const int EventMetadata::kContributorsFieldNumber;
const int EventMetadata::kLocationFieldNumber;
const int EventMetadata::kPlacemarkFieldNumber;
const int EventMetadata::kDistanceFieldNumber;
const int EventMetadata::kTrapdoorsFieldNumber;
const int EventMetadata::kTitleFieldNumber;
const int EventMetadata::kShortTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventMetadata::EventMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:EventMetadata)
}

void EventMetadata::InitAsDefaultInstance() {
  location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  placemark_ = const_cast< ::Placemark*>(
      ::Placemark::internal_default_instance());
}

EventMetadata::EventMetadata(const EventMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EventMetadata)
}

void EventMetadata::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  placemark_ = NULL;
  ::memset(&earliest_timestamp_, 0, reinterpret_cast<char*>(&photo_count_) -
    reinterpret_cast<char*>(&earliest_timestamp_) + sizeof(photo_count_));
}

EventMetadata::~EventMetadata() {
  // @@protoc_insertion_point(destructor:EventMetadata)
  SharedDtor();
}

void EventMetadata::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &EventMetadata_default_instance_.get()) {
    delete location_;
    delete placemark_;
  }
}

void EventMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventMetadata_descriptor_;
}

const EventMetadata& EventMetadata::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EventMetadata> EventMetadata_default_instance_;

EventMetadata* EventMetadata::New(::google::protobuf::Arena* arena) const {
  EventMetadata* n = new EventMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:EventMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EventMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EventMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 231u) {
    ZR_(earliest_timestamp_, photo_count_);
    if (has_location()) {
      if (location_ != NULL) location_->::Location::Clear();
    }
    if (has_placemark()) {
      if (placemark_ != NULL) placemark_->::Placemark::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1536u) {
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_short_title()) {
      short_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  episodes_.Clear();
  contributors_.Clear();
  trapdoors_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EventMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EventMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double earliest_timestamp = 1;
      case 1: {
        if (tag == 9) {
          set_has_earliest_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &earliest_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latest_timestamp;
        break;
      }

      // optional double latest_timestamp = 2;
      case 2: {
        if (tag == 17) {
         parse_latest_timestamp:
          set_has_latest_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latest_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_photo_count;
        break;
      }

      // optional int32 photo_count = 3;
      case 3: {
        if (tag == 24) {
         parse_photo_count:
          set_has_photo_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_episodes;
        break;
      }

      // repeated .FilteredEpisode episodes = 4;
      case 4: {
        if (tag == 34) {
         parse_episodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_episodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_episodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_episodes;
        if (input->ExpectTag(42)) goto parse_loop_contributors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .DayContributor contributors = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_contributors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contributors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_contributors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }

      // optional .Location location = 6;
      case 6: {
        if (tag == 50) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_placemark;
        break;
      }

      // optional .Placemark placemark = 7;
      case 7: {
        if (tag == 58) {
         parse_placemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placemark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_distance;
        break;
      }

      // optional double distance = 8;
      case 8: {
        if (tag == 65) {
         parse_distance:
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_trapdoors;
        break;
      }

      // repeated .TrapdoorMetadata trapdoors = 9;
      case 9: {
        if (tag == 74) {
         parse_trapdoors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trapdoors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trapdoors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_trapdoors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_title;
        break;
      }

      // optional string title = 10;
      case 10: {
        if (tag == 82) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EventMetadata.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_short_title;
        break;
      }

      // optional string short_title = 11;
      case 11: {
        if (tag == 90) {
         parse_short_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_title().data(), this->short_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EventMetadata.short_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EventMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EventMetadata)
  return false;
#undef DO_
}

void EventMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EventMetadata)
  // optional double earliest_timestamp = 1;
  if (has_earliest_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->earliest_timestamp(), output);
  }

  // optional double latest_timestamp = 2;
  if (has_latest_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latest_timestamp(), output);
  }

  // optional int32 photo_count = 3;
  if (has_photo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->photo_count(), output);
  }

  // repeated .FilteredEpisode episodes = 4;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->episodes(i), output);
  }

  // repeated .DayContributor contributors = 5;
  for (unsigned int i = 0, n = this->contributors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->contributors(i), output);
  }

  // optional .Location location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->location_, output);
  }

  // optional .Placemark placemark = 7;
  if (has_placemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->placemark_, output);
  }

  // optional double distance = 8;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->distance(), output);
  }

  // repeated .TrapdoorMetadata trapdoors = 9;
  for (unsigned int i = 0, n = this->trapdoors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->trapdoors(i), output);
  }

  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EventMetadata.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->title(), output);
  }

  // optional string short_title = 11;
  if (has_short_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_title().data(), this->short_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EventMetadata.short_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->short_title(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EventMetadata)
}

::google::protobuf::uint8* EventMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EventMetadata)
  // optional double earliest_timestamp = 1;
  if (has_earliest_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->earliest_timestamp(), target);
  }

  // optional double latest_timestamp = 2;
  if (has_latest_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latest_timestamp(), target);
  }

  // optional int32 photo_count = 3;
  if (has_photo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->photo_count(), target);
  }

  // repeated .FilteredEpisode episodes = 4;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->episodes(i), false, target);
  }

  // repeated .DayContributor contributors = 5;
  for (unsigned int i = 0, n = this->contributors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->contributors(i), false, target);
  }

  // optional .Location location = 6;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->location_, false, target);
  }

  // optional .Placemark placemark = 7;
  if (has_placemark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->placemark_, false, target);
  }

  // optional double distance = 8;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->distance(), target);
  }

  // repeated .TrapdoorMetadata trapdoors = 9;
  for (unsigned int i = 0, n = this->trapdoors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->trapdoors(i), false, target);
  }

  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EventMetadata.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->title(), target);
  }

  // optional string short_title = 11;
  if (has_short_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_title().data(), this->short_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EventMetadata.short_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->short_title(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventMetadata)
  return target;
}

size_t EventMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 231u) {
    // optional double earliest_timestamp = 1;
    if (has_earliest_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double latest_timestamp = 2;
    if (has_latest_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int32 photo_count = 3;
    if (has_photo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_count());
    }

    // optional .Location location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional .Placemark placemark = 7;
    if (has_placemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->placemark_);
    }

    // optional double distance = 8;
    if (has_distance()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[9 / 32] & 1536u) {
    // optional string title = 10;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string short_title = 11;
    if (has_short_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_title());
    }

  }
  // repeated .FilteredEpisode episodes = 4;
  {
    unsigned int count = this->episodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->episodes(i));
    }
  }

  // repeated .DayContributor contributors = 5;
  {
    unsigned int count = this->contributors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contributors(i));
    }
  }

  // repeated .TrapdoorMetadata trapdoors = 9;
  {
    unsigned int count = this->trapdoors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trapdoors(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EventMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EventMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EventMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EventMetadata)
    UnsafeMergeFrom(*source);
  }
}

void EventMetadata::MergeFrom(const EventMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EventMetadata::UnsafeMergeFrom(const EventMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  episodes_.MergeFrom(from.episodes_);
  contributors_.MergeFrom(from.contributors_);
  trapdoors_.MergeFrom(from.trapdoors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_earliest_timestamp()) {
      set_earliest_timestamp(from.earliest_timestamp());
    }
    if (from.has_latest_timestamp()) {
      set_latest_timestamp(from.latest_timestamp());
    }
    if (from.has_photo_count()) {
      set_photo_count(from.photo_count());
    }
    if (from.has_location()) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (from.has_placemark()) {
      mutable_placemark()->::Placemark::MergeFrom(from.placemark());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_short_title()) {
      set_has_short_title();
      short_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_title_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EventMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EventMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMetadata::CopyFrom(const EventMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EventMetadata::IsInitialized() const {

  return true;
}

void EventMetadata::Swap(EventMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventMetadata::InternalSwap(EventMetadata* other) {
  std::swap(earliest_timestamp_, other->earliest_timestamp_);
  std::swap(latest_timestamp_, other->latest_timestamp_);
  std::swap(photo_count_, other->photo_count_);
  episodes_.UnsafeArenaSwap(&other->episodes_);
  contributors_.UnsafeArenaSwap(&other->contributors_);
  std::swap(location_, other->location_);
  std::swap(placemark_, other->placemark_);
  std::swap(distance_, other->distance_);
  trapdoors_.UnsafeArenaSwap(&other->trapdoors_);
  title_.Swap(&other->title_);
  short_title_.Swap(&other->short_title_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventMetadata_descriptor_;
  metadata.reflection = EventMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventMetadata

// optional double earliest_timestamp = 1;
bool EventMetadata::has_earliest_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EventMetadata::set_has_earliest_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void EventMetadata::clear_has_earliest_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void EventMetadata::clear_earliest_timestamp() {
  earliest_timestamp_ = 0;
  clear_has_earliest_timestamp();
}
double EventMetadata::earliest_timestamp() const {
  // @@protoc_insertion_point(field_get:EventMetadata.earliest_timestamp)
  return earliest_timestamp_;
}
void EventMetadata::set_earliest_timestamp(double value) {
  set_has_earliest_timestamp();
  earliest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:EventMetadata.earliest_timestamp)
}

// optional double latest_timestamp = 2;
bool EventMetadata::has_latest_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EventMetadata::set_has_latest_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void EventMetadata::clear_has_latest_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void EventMetadata::clear_latest_timestamp() {
  latest_timestamp_ = 0;
  clear_has_latest_timestamp();
}
double EventMetadata::latest_timestamp() const {
  // @@protoc_insertion_point(field_get:EventMetadata.latest_timestamp)
  return latest_timestamp_;
}
void EventMetadata::set_latest_timestamp(double value) {
  set_has_latest_timestamp();
  latest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:EventMetadata.latest_timestamp)
}

// optional int32 photo_count = 3;
bool EventMetadata::has_photo_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EventMetadata::set_has_photo_count() {
  _has_bits_[0] |= 0x00000004u;
}
void EventMetadata::clear_has_photo_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void EventMetadata::clear_photo_count() {
  photo_count_ = 0;
  clear_has_photo_count();
}
::google::protobuf::int32 EventMetadata::photo_count() const {
  // @@protoc_insertion_point(field_get:EventMetadata.photo_count)
  return photo_count_;
}
void EventMetadata::set_photo_count(::google::protobuf::int32 value) {
  set_has_photo_count();
  photo_count_ = value;
  // @@protoc_insertion_point(field_set:EventMetadata.photo_count)
}

// repeated .FilteredEpisode episodes = 4;
int EventMetadata::episodes_size() const {
  return episodes_.size();
}
void EventMetadata::clear_episodes() {
  episodes_.Clear();
}
const ::FilteredEpisode& EventMetadata::episodes(int index) const {
  // @@protoc_insertion_point(field_get:EventMetadata.episodes)
  return episodes_.Get(index);
}
::FilteredEpisode* EventMetadata::mutable_episodes(int index) {
  // @@protoc_insertion_point(field_mutable:EventMetadata.episodes)
  return episodes_.Mutable(index);
}
::FilteredEpisode* EventMetadata::add_episodes() {
  // @@protoc_insertion_point(field_add:EventMetadata.episodes)
  return episodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::FilteredEpisode >*
EventMetadata::mutable_episodes() {
  // @@protoc_insertion_point(field_mutable_list:EventMetadata.episodes)
  return &episodes_;
}
const ::google::protobuf::RepeatedPtrField< ::FilteredEpisode >&
EventMetadata::episodes() const {
  // @@protoc_insertion_point(field_list:EventMetadata.episodes)
  return episodes_;
}

// repeated .DayContributor contributors = 5;
int EventMetadata::contributors_size() const {
  return contributors_.size();
}
void EventMetadata::clear_contributors() {
  contributors_.Clear();
}
const ::DayContributor& EventMetadata::contributors(int index) const {
  // @@protoc_insertion_point(field_get:EventMetadata.contributors)
  return contributors_.Get(index);
}
::DayContributor* EventMetadata::mutable_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:EventMetadata.contributors)
  return contributors_.Mutable(index);
}
::DayContributor* EventMetadata::add_contributors() {
  // @@protoc_insertion_point(field_add:EventMetadata.contributors)
  return contributors_.Add();
}
::google::protobuf::RepeatedPtrField< ::DayContributor >*
EventMetadata::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:EventMetadata.contributors)
  return &contributors_;
}
const ::google::protobuf::RepeatedPtrField< ::DayContributor >&
EventMetadata::contributors() const {
  // @@protoc_insertion_point(field_list:EventMetadata.contributors)
  return contributors_;
}

// optional .Location location = 6;
bool EventMetadata::has_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EventMetadata::set_has_location() {
  _has_bits_[0] |= 0x00000020u;
}
void EventMetadata::clear_has_location() {
  _has_bits_[0] &= ~0x00000020u;
}
void EventMetadata::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& EventMetadata::location() const {
  // @@protoc_insertion_point(field_get:EventMetadata.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* EventMetadata::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:EventMetadata.location)
  return location_;
}
::Location* EventMetadata::release_location() {
  // @@protoc_insertion_point(field_release:EventMetadata.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void EventMetadata::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:EventMetadata.location)
}

// optional .Placemark placemark = 7;
bool EventMetadata::has_placemark() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EventMetadata::set_has_placemark() {
  _has_bits_[0] |= 0x00000040u;
}
void EventMetadata::clear_has_placemark() {
  _has_bits_[0] &= ~0x00000040u;
}
void EventMetadata::clear_placemark() {
  if (placemark_ != NULL) placemark_->::Placemark::Clear();
  clear_has_placemark();
}
const ::Placemark& EventMetadata::placemark() const {
  // @@protoc_insertion_point(field_get:EventMetadata.placemark)
  return placemark_ != NULL ? *placemark_
                         : *::Placemark::internal_default_instance();
}
::Placemark* EventMetadata::mutable_placemark() {
  set_has_placemark();
  if (placemark_ == NULL) {
    placemark_ = new ::Placemark;
  }
  // @@protoc_insertion_point(field_mutable:EventMetadata.placemark)
  return placemark_;
}
::Placemark* EventMetadata::release_placemark() {
  // @@protoc_insertion_point(field_release:EventMetadata.placemark)
  clear_has_placemark();
  ::Placemark* temp = placemark_;
  placemark_ = NULL;
  return temp;
}
void EventMetadata::set_allocated_placemark(::Placemark* placemark) {
  delete placemark_;
  placemark_ = placemark;
  if (placemark) {
    set_has_placemark();
  } else {
    clear_has_placemark();
  }
  // @@protoc_insertion_point(field_set_allocated:EventMetadata.placemark)
}

// optional double distance = 8;
bool EventMetadata::has_distance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EventMetadata::set_has_distance() {
  _has_bits_[0] |= 0x00000080u;
}
void EventMetadata::clear_has_distance() {
  _has_bits_[0] &= ~0x00000080u;
}
void EventMetadata::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
double EventMetadata::distance() const {
  // @@protoc_insertion_point(field_get:EventMetadata.distance)
  return distance_;
}
void EventMetadata::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:EventMetadata.distance)
}

// repeated .TrapdoorMetadata trapdoors = 9;
int EventMetadata::trapdoors_size() const {
  return trapdoors_.size();
}
void EventMetadata::clear_trapdoors() {
  trapdoors_.Clear();
}
const ::TrapdoorMetadata& EventMetadata::trapdoors(int index) const {
  // @@protoc_insertion_point(field_get:EventMetadata.trapdoors)
  return trapdoors_.Get(index);
}
::TrapdoorMetadata* EventMetadata::mutable_trapdoors(int index) {
  // @@protoc_insertion_point(field_mutable:EventMetadata.trapdoors)
  return trapdoors_.Mutable(index);
}
::TrapdoorMetadata* EventMetadata::add_trapdoors() {
  // @@protoc_insertion_point(field_add:EventMetadata.trapdoors)
  return trapdoors_.Add();
}
::google::protobuf::RepeatedPtrField< ::TrapdoorMetadata >*
EventMetadata::mutable_trapdoors() {
  // @@protoc_insertion_point(field_mutable_list:EventMetadata.trapdoors)
  return &trapdoors_;
}
const ::google::protobuf::RepeatedPtrField< ::TrapdoorMetadata >&
EventMetadata::trapdoors() const {
  // @@protoc_insertion_point(field_list:EventMetadata.trapdoors)
  return trapdoors_;
}

// optional string title = 10;
bool EventMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EventMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000200u;
}
void EventMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000200u;
}
void EventMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& EventMetadata::title() const {
  // @@protoc_insertion_point(field_get:EventMetadata.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventMetadata.title)
}
void EventMetadata::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventMetadata.title)
}
void EventMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventMetadata.title)
}
::std::string* EventMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:EventMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventMetadata::release_title() {
  // @@protoc_insertion_point(field_release:EventMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:EventMetadata.title)
}

// optional string short_title = 11;
bool EventMetadata::has_short_title() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void EventMetadata::set_has_short_title() {
  _has_bits_[0] |= 0x00000400u;
}
void EventMetadata::clear_has_short_title() {
  _has_bits_[0] &= ~0x00000400u;
}
void EventMetadata::clear_short_title() {
  short_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_short_title();
}
const ::std::string& EventMetadata::short_title() const {
  // @@protoc_insertion_point(field_get:EventMetadata.short_title)
  return short_title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventMetadata::set_short_title(const ::std::string& value) {
  set_has_short_title();
  short_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventMetadata.short_title)
}
void EventMetadata::set_short_title(const char* value) {
  set_has_short_title();
  short_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventMetadata.short_title)
}
void EventMetadata::set_short_title(const char* value, size_t size) {
  set_has_short_title();
  short_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventMetadata.short_title)
}
::std::string* EventMetadata::mutable_short_title() {
  set_has_short_title();
  // @@protoc_insertion_point(field_mutable:EventMetadata.short_title)
  return short_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventMetadata::release_short_title() {
  // @@protoc_insertion_point(field_release:EventMetadata.short_title)
  clear_has_short_title();
  return short_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventMetadata::set_allocated_short_title(::std::string* short_title) {
  if (short_title != NULL) {
    set_has_short_title();
  } else {
    clear_has_short_title();
  }
  short_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_title);
  // @@protoc_insertion_point(field_set_allocated:EventMetadata.short_title)
}

inline const EventMetadata* EventMetadata::internal_default_instance() {
  return &EventMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CachedEpisode::kIdFieldNumber;
const int CachedEpisode::kParentIdFieldNumber;
const int CachedEpisode::kViewpointIdFieldNumber;
const int CachedEpisode::kUserIdFieldNumber;
const int CachedEpisode::kTimestampFieldNumber;
const int CachedEpisode::kLocationFieldNumber;
const int CachedEpisode::kPlacemarkFieldNumber;
const int CachedEpisode::kEarliestPhotoTimestampFieldNumber;
const int CachedEpisode::kLatestPhotoTimestampFieldNumber;
const int CachedEpisode::kPhotosFieldNumber;
const int CachedEpisode::kInLibraryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CachedEpisode::CachedEpisode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CachedEpisode)
}

void CachedEpisode::InitAsDefaultInstance() {
  id_ = const_cast< ::EpisodeId*>(
      ::EpisodeId::internal_default_instance());
  parent_id_ = const_cast< ::EpisodeId*>(
      ::EpisodeId::internal_default_instance());
  viewpoint_id_ = const_cast< ::ViewpointId*>(
      ::ViewpointId::internal_default_instance());
  location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  placemark_ = const_cast< ::Placemark*>(
      ::Placemark::internal_default_instance());
}

CachedEpisode::CachedEpisode(const CachedEpisode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CachedEpisode)
}

void CachedEpisode::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  parent_id_ = NULL;
  viewpoint_id_ = NULL;
  location_ = NULL;
  placemark_ = NULL;
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&in_library_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(in_library_));
}

CachedEpisode::~CachedEpisode() {
  // @@protoc_insertion_point(destructor:CachedEpisode)
  SharedDtor();
}

void CachedEpisode::SharedDtor() {
  if (this != &CachedEpisode_default_instance_.get()) {
    delete id_;
    delete parent_id_;
    delete viewpoint_id_;
    delete location_;
    delete placemark_;
  }
}

void CachedEpisode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedEpisode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedEpisode_descriptor_;
}

const CachedEpisode& CachedEpisode::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CachedEpisode> CachedEpisode_default_instance_;

CachedEpisode* CachedEpisode::New(::google::protobuf::Arena* arena) const {
  CachedEpisode* n = new CachedEpisode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CachedEpisode::Clear() {
// @@protoc_insertion_point(message_clear_start:CachedEpisode)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CachedEpisode, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CachedEpisode*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(user_id_, earliest_photo_timestamp_);
    if (has_id()) {
      if (id_ != NULL) id_->::EpisodeId::Clear();
    }
    if (has_parent_id()) {
      if (parent_id_ != NULL) parent_id_->::EpisodeId::Clear();
    }
    if (has_viewpoint_id()) {
      if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
    }
    if (has_location()) {
      if (location_ != NULL) location_->::Location::Clear();
    }
    if (has_placemark()) {
      if (placemark_ != NULL) placemark_->::Placemark::Clear();
    }
  }
  ZR_(latest_photo_timestamp_, in_library_);

#undef ZR_HELPER_
#undef ZR_

  photos_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CachedEpisode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CachedEpisode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EpisodeId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parent_id;
        break;
      }

      // optional .EpisodeId parent_id = 2;
      case 2: {
        if (tag == 18) {
         parse_parent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_viewpoint_id;
        break;
      }

      // optional .ViewpointId viewpoint_id = 3;
      case 3: {
        if (tag == 26) {
         parse_viewpoint_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewpoint_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 5;
      case 5: {
        if (tag == 41) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }

      // optional .Location location = 6;
      case 6: {
        if (tag == 50) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_placemark;
        break;
      }

      // optional .Placemark placemark = 7;
      case 7: {
        if (tag == 58) {
         parse_placemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placemark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_earliest_photo_timestamp;
        break;
      }

      // optional double earliest_photo_timestamp = 8;
      case 8: {
        if (tag == 65) {
         parse_earliest_photo_timestamp:
          set_has_earliest_photo_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &earliest_photo_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_latest_photo_timestamp;
        break;
      }

      // optional double latest_photo_timestamp = 9;
      case 9: {
        if (tag == 73) {
         parse_latest_photo_timestamp:
          set_has_latest_photo_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latest_photo_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_photos;
        break;
      }

      // repeated .DayPhoto photos = 10;
      case 10: {
        if (tag == 82) {
         parse_photos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_photos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_in_library;
        break;
      }

      // optional bool in_library = 11;
      case 11: {
        if (tag == 88) {
         parse_in_library:
          set_has_in_library();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_library_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CachedEpisode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CachedEpisode)
  return false;
#undef DO_
}

void CachedEpisode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CachedEpisode)
  // optional .EpisodeId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .EpisodeId parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parent_id_, output);
  }

  // optional .ViewpointId viewpoint_id = 3;
  if (has_viewpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->viewpoint_id_, output);
  }

  // optional int64 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->user_id(), output);
  }

  // optional double timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->timestamp(), output);
  }

  // optional .Location location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->location_, output);
  }

  // optional .Placemark placemark = 7;
  if (has_placemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->placemark_, output);
  }

  // optional double earliest_photo_timestamp = 8;
  if (has_earliest_photo_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->earliest_photo_timestamp(), output);
  }

  // optional double latest_photo_timestamp = 9;
  if (has_latest_photo_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->latest_photo_timestamp(), output);
  }

  // repeated .DayPhoto photos = 10;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->photos(i), output);
  }

  // optional bool in_library = 11;
  if (has_in_library()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->in_library(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CachedEpisode)
}

::google::protobuf::uint8* CachedEpisode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CachedEpisode)
  // optional .EpisodeId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .EpisodeId parent_id = 2;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->parent_id_, false, target);
  }

  // optional .ViewpointId viewpoint_id = 3;
  if (has_viewpoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->viewpoint_id_, false, target);
  }

  // optional int64 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->user_id(), target);
  }

  // optional double timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->timestamp(), target);
  }

  // optional .Location location = 6;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->location_, false, target);
  }

  // optional .Placemark placemark = 7;
  if (has_placemark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->placemark_, false, target);
  }

  // optional double earliest_photo_timestamp = 8;
  if (has_earliest_photo_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->earliest_photo_timestamp(), target);
  }

  // optional double latest_photo_timestamp = 9;
  if (has_latest_photo_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->latest_photo_timestamp(), target);
  }

  // repeated .DayPhoto photos = 10;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->photos(i), false, target);
  }

  // optional bool in_library = 11;
  if (has_in_library()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->in_library(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CachedEpisode)
  return target;
}

size_t CachedEpisode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CachedEpisode)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .EpisodeId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .EpisodeId parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parent_id_);
    }

    // optional .ViewpointId viewpoint_id = 3;
    if (has_viewpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->viewpoint_id_);
    }

    // optional int64 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional double timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .Location location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional .Placemark placemark = 7;
    if (has_placemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->placemark_);
    }

    // optional double earliest_photo_timestamp = 8;
    if (has_earliest_photo_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1280u) {
    // optional double latest_photo_timestamp = 9;
    if (has_latest_photo_timestamp()) {
      total_size += 1 + 8;
    }

    // optional bool in_library = 11;
    if (has_in_library()) {
      total_size += 1 + 1;
    }

  }
  // repeated .DayPhoto photos = 10;
  {
    unsigned int count = this->photos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photos(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedEpisode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CachedEpisode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CachedEpisode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CachedEpisode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CachedEpisode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CachedEpisode)
    UnsafeMergeFrom(*source);
  }
}

void CachedEpisode::MergeFrom(const CachedEpisode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CachedEpisode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CachedEpisode::UnsafeMergeFrom(const CachedEpisode& from) {
  GOOGLE_DCHECK(&from != this);
  photos_.MergeFrom(from.photos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::EpisodeId::MergeFrom(from.id());
    }
    if (from.has_parent_id()) {
      mutable_parent_id()->::EpisodeId::MergeFrom(from.parent_id());
    }
    if (from.has_viewpoint_id()) {
      mutable_viewpoint_id()->::ViewpointId::MergeFrom(from.viewpoint_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_location()) {
      mutable_location()->::Location::MergeFrom(from.location());
    }
    if (from.has_placemark()) {
      mutable_placemark()->::Placemark::MergeFrom(from.placemark());
    }
    if (from.has_earliest_photo_timestamp()) {
      set_earliest_photo_timestamp(from.earliest_photo_timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_latest_photo_timestamp()) {
      set_latest_photo_timestamp(from.latest_photo_timestamp());
    }
    if (from.has_in_library()) {
      set_in_library(from.in_library());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CachedEpisode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CachedEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedEpisode::CopyFrom(const CachedEpisode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CachedEpisode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CachedEpisode::IsInitialized() const {

  return true;
}

void CachedEpisode::Swap(CachedEpisode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CachedEpisode::InternalSwap(CachedEpisode* other) {
  std::swap(id_, other->id_);
  std::swap(parent_id_, other->parent_id_);
  std::swap(viewpoint_id_, other->viewpoint_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(location_, other->location_);
  std::swap(placemark_, other->placemark_);
  std::swap(earliest_photo_timestamp_, other->earliest_photo_timestamp_);
  std::swap(latest_photo_timestamp_, other->latest_photo_timestamp_);
  photos_.UnsafeArenaSwap(&other->photos_);
  std::swap(in_library_, other->in_library_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CachedEpisode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedEpisode_descriptor_;
  metadata.reflection = CachedEpisode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CachedEpisode

// optional .EpisodeId id = 1;
bool CachedEpisode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CachedEpisode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CachedEpisode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CachedEpisode::clear_id() {
  if (id_ != NULL) id_->::EpisodeId::Clear();
  clear_has_id();
}
const ::EpisodeId& CachedEpisode::id() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.id)
  return id_ != NULL ? *id_
                         : *::EpisodeId::internal_default_instance();
}
::EpisodeId* CachedEpisode::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:CachedEpisode.id)
  return id_;
}
::EpisodeId* CachedEpisode::release_id() {
  // @@protoc_insertion_point(field_release:CachedEpisode.id)
  clear_has_id();
  ::EpisodeId* temp = id_;
  id_ = NULL;
  return temp;
}
void CachedEpisode::set_allocated_id(::EpisodeId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CachedEpisode.id)
}

// optional .EpisodeId parent_id = 2;
bool CachedEpisode::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CachedEpisode::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CachedEpisode::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CachedEpisode::clear_parent_id() {
  if (parent_id_ != NULL) parent_id_->::EpisodeId::Clear();
  clear_has_parent_id();
}
const ::EpisodeId& CachedEpisode::parent_id() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.parent_id)
  return parent_id_ != NULL ? *parent_id_
                         : *::EpisodeId::internal_default_instance();
}
::EpisodeId* CachedEpisode::mutable_parent_id() {
  set_has_parent_id();
  if (parent_id_ == NULL) {
    parent_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:CachedEpisode.parent_id)
  return parent_id_;
}
::EpisodeId* CachedEpisode::release_parent_id() {
  // @@protoc_insertion_point(field_release:CachedEpisode.parent_id)
  clear_has_parent_id();
  ::EpisodeId* temp = parent_id_;
  parent_id_ = NULL;
  return temp;
}
void CachedEpisode::set_allocated_parent_id(::EpisodeId* parent_id) {
  delete parent_id_;
  parent_id_ = parent_id;
  if (parent_id) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CachedEpisode.parent_id)
}

// optional .ViewpointId viewpoint_id = 3;
bool CachedEpisode::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CachedEpisode::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CachedEpisode::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CachedEpisode::clear_viewpoint_id() {
  if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
  clear_has_viewpoint_id();
}
const ::ViewpointId& CachedEpisode::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.viewpoint_id)
  return viewpoint_id_ != NULL ? *viewpoint_id_
                         : *::ViewpointId::internal_default_instance();
}
::ViewpointId* CachedEpisode::mutable_viewpoint_id() {
  set_has_viewpoint_id();
  if (viewpoint_id_ == NULL) {
    viewpoint_id_ = new ::ViewpointId;
  }
  // @@protoc_insertion_point(field_mutable:CachedEpisode.viewpoint_id)
  return viewpoint_id_;
}
::ViewpointId* CachedEpisode::release_viewpoint_id() {
  // @@protoc_insertion_point(field_release:CachedEpisode.viewpoint_id)
  clear_has_viewpoint_id();
  ::ViewpointId* temp = viewpoint_id_;
  viewpoint_id_ = NULL;
  return temp;
}
void CachedEpisode::set_allocated_viewpoint_id(::ViewpointId* viewpoint_id) {
  delete viewpoint_id_;
  viewpoint_id_ = viewpoint_id;
  if (viewpoint_id) {
    set_has_viewpoint_id();
  } else {
    clear_has_viewpoint_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CachedEpisode.viewpoint_id)
}

// optional int64 user_id = 4;
bool CachedEpisode::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CachedEpisode::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CachedEpisode::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CachedEpisode::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 CachedEpisode::user_id() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.user_id)
  return user_id_;
}
void CachedEpisode::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:CachedEpisode.user_id)
}

// optional double timestamp = 5;
bool CachedEpisode::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CachedEpisode::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void CachedEpisode::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void CachedEpisode::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double CachedEpisode::timestamp() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.timestamp)
  return timestamp_;
}
void CachedEpisode::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CachedEpisode.timestamp)
}

// optional .Location location = 6;
bool CachedEpisode::has_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CachedEpisode::set_has_location() {
  _has_bits_[0] |= 0x00000020u;
}
void CachedEpisode::clear_has_location() {
  _has_bits_[0] &= ~0x00000020u;
}
void CachedEpisode::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
const ::Location& CachedEpisode::location() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
::Location* CachedEpisode::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:CachedEpisode.location)
  return location_;
}
::Location* CachedEpisode::release_location() {
  // @@protoc_insertion_point(field_release:CachedEpisode.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void CachedEpisode::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:CachedEpisode.location)
}

// optional .Placemark placemark = 7;
bool CachedEpisode::has_placemark() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CachedEpisode::set_has_placemark() {
  _has_bits_[0] |= 0x00000040u;
}
void CachedEpisode::clear_has_placemark() {
  _has_bits_[0] &= ~0x00000040u;
}
void CachedEpisode::clear_placemark() {
  if (placemark_ != NULL) placemark_->::Placemark::Clear();
  clear_has_placemark();
}
const ::Placemark& CachedEpisode::placemark() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.placemark)
  return placemark_ != NULL ? *placemark_
                         : *::Placemark::internal_default_instance();
}
::Placemark* CachedEpisode::mutable_placemark() {
  set_has_placemark();
  if (placemark_ == NULL) {
    placemark_ = new ::Placemark;
  }
  // @@protoc_insertion_point(field_mutable:CachedEpisode.placemark)
  return placemark_;
}
::Placemark* CachedEpisode::release_placemark() {
  // @@protoc_insertion_point(field_release:CachedEpisode.placemark)
  clear_has_placemark();
  ::Placemark* temp = placemark_;
  placemark_ = NULL;
  return temp;
}
void CachedEpisode::set_allocated_placemark(::Placemark* placemark) {
  delete placemark_;
  placemark_ = placemark;
  if (placemark) {
    set_has_placemark();
  } else {
    clear_has_placemark();
  }
  // @@protoc_insertion_point(field_set_allocated:CachedEpisode.placemark)
}

// optional double earliest_photo_timestamp = 8;
bool CachedEpisode::has_earliest_photo_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CachedEpisode::set_has_earliest_photo_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
void CachedEpisode::clear_has_earliest_photo_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void CachedEpisode::clear_earliest_photo_timestamp() {
  earliest_photo_timestamp_ = 0;
  clear_has_earliest_photo_timestamp();
}
double CachedEpisode::earliest_photo_timestamp() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.earliest_photo_timestamp)
  return earliest_photo_timestamp_;
}
void CachedEpisode::set_earliest_photo_timestamp(double value) {
  set_has_earliest_photo_timestamp();
  earliest_photo_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CachedEpisode.earliest_photo_timestamp)
}

// optional double latest_photo_timestamp = 9;
bool CachedEpisode::has_latest_photo_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CachedEpisode::set_has_latest_photo_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
void CachedEpisode::clear_has_latest_photo_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
void CachedEpisode::clear_latest_photo_timestamp() {
  latest_photo_timestamp_ = 0;
  clear_has_latest_photo_timestamp();
}
double CachedEpisode::latest_photo_timestamp() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.latest_photo_timestamp)
  return latest_photo_timestamp_;
}
void CachedEpisode::set_latest_photo_timestamp(double value) {
  set_has_latest_photo_timestamp();
  latest_photo_timestamp_ = value;
  // @@protoc_insertion_point(field_set:CachedEpisode.latest_photo_timestamp)
}

// repeated .DayPhoto photos = 10;
int CachedEpisode::photos_size() const {
  return photos_.size();
}
void CachedEpisode::clear_photos() {
  photos_.Clear();
}
const ::DayPhoto& CachedEpisode::photos(int index) const {
  // @@protoc_insertion_point(field_get:CachedEpisode.photos)
  return photos_.Get(index);
}
::DayPhoto* CachedEpisode::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:CachedEpisode.photos)
  return photos_.Mutable(index);
}
::DayPhoto* CachedEpisode::add_photos() {
  // @@protoc_insertion_point(field_add:CachedEpisode.photos)
  return photos_.Add();
}
::google::protobuf::RepeatedPtrField< ::DayPhoto >*
CachedEpisode::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:CachedEpisode.photos)
  return &photos_;
}
const ::google::protobuf::RepeatedPtrField< ::DayPhoto >&
CachedEpisode::photos() const {
  // @@protoc_insertion_point(field_list:CachedEpisode.photos)
  return photos_;
}

// optional bool in_library = 11;
bool CachedEpisode::has_in_library() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CachedEpisode::set_has_in_library() {
  _has_bits_[0] |= 0x00000400u;
}
void CachedEpisode::clear_has_in_library() {
  _has_bits_[0] &= ~0x00000400u;
}
void CachedEpisode::clear_in_library() {
  in_library_ = false;
  clear_has_in_library();
}
bool CachedEpisode::in_library() const {
  // @@protoc_insertion_point(field_get:CachedEpisode.in_library)
  return in_library_;
}
void CachedEpisode::set_in_library(bool value) {
  set_has_in_library();
  in_library_ = value;
  // @@protoc_insertion_point(field_set:CachedEpisode.in_library)
}

inline const CachedEpisode* CachedEpisode::internal_default_instance() {
  return &CachedEpisode_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DayMetadata::kTimestampFieldNumber;
const int DayMetadata::kEpisodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DayMetadata::DayMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DayMetadata)
}

void DayMetadata::InitAsDefaultInstance() {
}

DayMetadata::DayMetadata(const DayMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DayMetadata)
}

void DayMetadata::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
}

DayMetadata::~DayMetadata() {
  // @@protoc_insertion_point(destructor:DayMetadata)
  SharedDtor();
}

void DayMetadata::SharedDtor() {
}

void DayMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayMetadata_descriptor_;
}

const DayMetadata& DayMetadata::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DayMetadata> DayMetadata_default_instance_;

DayMetadata* DayMetadata::New(::google::protobuf::Arena* arena) const {
  DayMetadata* n = new DayMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DayMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:DayMetadata)
  timestamp_ = 0;
  episodes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DayMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DayMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_episodes;
        break;
      }

      // repeated .CachedEpisode episodes = 2;
      case 2: {
        if (tag == 18) {
         parse_episodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_episodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_episodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_episodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DayMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DayMetadata)
  return false;
#undef DO_
}

void DayMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DayMetadata)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // repeated .CachedEpisode episodes = 2;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->episodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DayMetadata)
}

::google::protobuf::uint8* DayMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DayMetadata)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // repeated .CachedEpisode episodes = 2;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->episodes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DayMetadata)
  return target;
}

size_t DayMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DayMetadata)
  size_t total_size = 0;

  // optional double timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 + 8;
  }

  // repeated .CachedEpisode episodes = 2;
  {
    unsigned int count = this->episodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->episodes(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DayMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DayMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DayMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DayMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DayMetadata)
    UnsafeMergeFrom(*source);
  }
}

void DayMetadata::MergeFrom(const DayMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DayMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DayMetadata::UnsafeMergeFrom(const DayMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  episodes_.MergeFrom(from.episodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DayMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DayMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayMetadata::CopyFrom(const DayMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DayMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DayMetadata::IsInitialized() const {

  return true;
}

void DayMetadata::Swap(DayMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DayMetadata::InternalSwap(DayMetadata* other) {
  std::swap(timestamp_, other->timestamp_);
  episodes_.UnsafeArenaSwap(&other->episodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DayMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayMetadata_descriptor_;
  metadata.reflection = DayMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DayMetadata

// optional double timestamp = 1;
bool DayMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DayMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void DayMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void DayMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double DayMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:DayMetadata.timestamp)
  return timestamp_;
}
void DayMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:DayMetadata.timestamp)
}

// repeated .CachedEpisode episodes = 2;
int DayMetadata::episodes_size() const {
  return episodes_.size();
}
void DayMetadata::clear_episodes() {
  episodes_.Clear();
}
const ::CachedEpisode& DayMetadata::episodes(int index) const {
  // @@protoc_insertion_point(field_get:DayMetadata.episodes)
  return episodes_.Get(index);
}
::CachedEpisode* DayMetadata::mutable_episodes(int index) {
  // @@protoc_insertion_point(field_mutable:DayMetadata.episodes)
  return episodes_.Mutable(index);
}
::CachedEpisode* DayMetadata::add_episodes() {
  // @@protoc_insertion_point(field_add:DayMetadata.episodes)
  return episodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CachedEpisode >*
DayMetadata::mutable_episodes() {
  // @@protoc_insertion_point(field_mutable_list:DayMetadata.episodes)
  return &episodes_;
}
const ::google::protobuf::RepeatedPtrField< ::CachedEpisode >&
DayMetadata::episodes() const {
  // @@protoc_insertion_point(field_list:DayMetadata.episodes)
  return episodes_;
}

inline const DayMetadata* DayMetadata::internal_default_instance() {
  return &DayMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SummaryRow_RowType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummaryRow_RowType_descriptor_;
}
bool SummaryRow_RowType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SummaryRow_RowType SummaryRow::EVENT;
const SummaryRow_RowType SummaryRow::FULL_EVENT;
const SummaryRow_RowType SummaryRow::EVENT_TRAPDOOR;
const SummaryRow_RowType SummaryRow::TRAPDOOR;
const SummaryRow_RowType SummaryRow::RowType_MIN;
const SummaryRow_RowType SummaryRow::RowType_MAX;
const int SummaryRow::RowType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SummaryRow::kTypeFieldNumber;
const int SummaryRow::kTimestampFieldNumber;
const int SummaryRow::kDayTimestampFieldNumber;
const int SummaryRow::kIdentifierFieldNumber;
const int SummaryRow::kHeightFieldNumber;
const int SummaryRow::kUnviewedFieldNumber;
const int SummaryRow::kPositionFieldNumber;
const int SummaryRow::kWeightFieldNumber;
const int SummaryRow::kPhotoCountFieldNumber;
const int SummaryRow::kCommentCountFieldNumber;
const int SummaryRow::kContributorCountFieldNumber;
const int SummaryRow::kShareCountFieldNumber;
const int SummaryRow::kDistanceFieldNumber;
const int SummaryRow::kEpisodeIdFieldNumber;
const int SummaryRow::kOriginalRowIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SummaryRow::SummaryRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SummaryRow)
}

void SummaryRow::InitAsDefaultInstance() {
}

SummaryRow::SummaryRow(const SummaryRow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SummaryRow)
}

void SummaryRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&original_row_index_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(original_row_index_));
  type_ = 1;
}

SummaryRow::~SummaryRow() {
  // @@protoc_insertion_point(destructor:SummaryRow)
  SharedDtor();
}

void SummaryRow::SharedDtor() {
}

void SummaryRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummaryRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummaryRow_descriptor_;
}

const SummaryRow& SummaryRow::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SummaryRow> SummaryRow_default_instance_;

SummaryRow* SummaryRow::New(::google::protobuf::Arena* arena) const {
  SummaryRow* n = new SummaryRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SummaryRow::Clear() {
// @@protoc_insertion_point(message_clear_start:SummaryRow)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SummaryRow, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SummaryRow*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(timestamp_, weight_);
    type_ = 1;
  }
  ZR_(photo_count_, original_row_index_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SummaryRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SummaryRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SummaryRow.RowType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SummaryRow_RowType_IsValid(value)) {
            set_type(static_cast< ::SummaryRow_RowType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 2;
      case 2: {
        if (tag == 17) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_day_timestamp;
        break;
      }

      // optional double day_timestamp = 3;
      case 3: {
        if (tag == 25) {
         parse_day_timestamp:
          set_has_day_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &day_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_identifier;
        break;
      }

      // optional int64 identifier = 4;
      case 4: {
        if (tag == 32) {
         parse_identifier:
          set_has_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_height;
        break;
      }

      // optional float height = 5;
      case 5: {
        if (tag == 45) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unviewed;
        break;
      }

      // optional bool unviewed = 6;
      case 6: {
        if (tag == 48) {
         parse_unviewed:
          set_has_unviewed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unviewed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_position;
        break;
      }

      // optional float position = 7;
      case 7: {
        if (tag == 61) {
         parse_position:
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_weight;
        break;
      }

      // optional float weight = 8;
      case 8: {
        if (tag == 69) {
         parse_weight:
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_photo_count;
        break;
      }

      // optional int32 photo_count = 9;
      case 9: {
        if (tag == 72) {
         parse_photo_count:
          set_has_photo_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_comment_count;
        break;
      }

      // optional int32 comment_count = 10;
      case 10: {
        if (tag == 80) {
         parse_comment_count:
          set_has_comment_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_contributor_count;
        break;
      }

      // optional int32 contributor_count = 11;
      case 11: {
        if (tag == 88) {
         parse_contributor_count:
          set_has_contributor_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contributor_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_share_count;
        break;
      }

      // optional int32 share_count = 12;
      case 12: {
        if (tag == 96) {
         parse_share_count:
          set_has_share_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &share_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_distance;
        break;
      }

      // optional double distance = 13;
      case 13: {
        if (tag == 105) {
         parse_distance:
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_episode_id;
        break;
      }

      // optional int64 episode_id = 14;
      case 14: {
        if (tag == 112) {
         parse_episode_id:
          set_has_episode_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &episode_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_original_row_index;
        break;
      }

      // optional int32 original_row_index = 20;
      case 20: {
        if (tag == 160) {
         parse_original_row_index:
          set_has_original_row_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_row_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SummaryRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SummaryRow)
  return false;
#undef DO_
}

void SummaryRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SummaryRow)
  // optional .SummaryRow.RowType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // optional double day_timestamp = 3;
  if (has_day_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->day_timestamp(), output);
  }

  // optional int64 identifier = 4;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->identifier(), output);
  }

  // optional float height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }

  // optional bool unviewed = 6;
  if (has_unviewed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->unviewed(), output);
  }

  // optional float position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->position(), output);
  }

  // optional float weight = 8;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->weight(), output);
  }

  // optional int32 photo_count = 9;
  if (has_photo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->photo_count(), output);
  }

  // optional int32 comment_count = 10;
  if (has_comment_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->comment_count(), output);
  }

  // optional int32 contributor_count = 11;
  if (has_contributor_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->contributor_count(), output);
  }

  // optional int32 share_count = 12;
  if (has_share_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->share_count(), output);
  }

  // optional double distance = 13;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->distance(), output);
  }

  // optional int64 episode_id = 14;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->episode_id(), output);
  }

  // optional int32 original_row_index = 20;
  if (has_original_row_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->original_row_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SummaryRow)
}

::google::protobuf::uint8* SummaryRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SummaryRow)
  // optional .SummaryRow.RowType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // optional double day_timestamp = 3;
  if (has_day_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->day_timestamp(), target);
  }

  // optional int64 identifier = 4;
  if (has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->identifier(), target);
  }

  // optional float height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->height(), target);
  }

  // optional bool unviewed = 6;
  if (has_unviewed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->unviewed(), target);
  }

  // optional float position = 7;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->position(), target);
  }

  // optional float weight = 8;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->weight(), target);
  }

  // optional int32 photo_count = 9;
  if (has_photo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->photo_count(), target);
  }

  // optional int32 comment_count = 10;
  if (has_comment_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->comment_count(), target);
  }

  // optional int32 contributor_count = 11;
  if (has_contributor_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->contributor_count(), target);
  }

  // optional int32 share_count = 12;
  if (has_share_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->share_count(), target);
  }

  // optional double distance = 13;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->distance(), target);
  }

  // optional int64 episode_id = 14;
  if (has_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->episode_id(), target);
  }

  // optional int32 original_row_index = 20;
  if (has_original_row_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->original_row_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SummaryRow)
  return target;
}

size_t SummaryRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SummaryRow)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .SummaryRow.RowType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double day_timestamp = 3;
    if (has_day_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int64 identifier = 4;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->identifier());
    }

    // optional float height = 5;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional bool unviewed = 6;
    if (has_unviewed()) {
      total_size += 1 + 1;
    }

    // optional float position = 7;
    if (has_position()) {
      total_size += 1 + 4;
    }

    // optional float weight = 8;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int32 photo_count = 9;
    if (has_photo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_count());
    }

    // optional int32 comment_count = 10;
    if (has_comment_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_count());
    }

    // optional int32 contributor_count = 11;
    if (has_contributor_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contributor_count());
    }

    // optional int32 share_count = 12;
    if (has_share_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->share_count());
    }

    // optional double distance = 13;
    if (has_distance()) {
      total_size += 1 + 8;
    }

    // optional int64 episode_id = 14;
    if (has_episode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->episode_id());
    }

    // optional int32 original_row_index = 20;
    if (has_original_row_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_row_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummaryRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SummaryRow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SummaryRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SummaryRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SummaryRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SummaryRow)
    UnsafeMergeFrom(*source);
  }
}

void SummaryRow::MergeFrom(const SummaryRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SummaryRow)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SummaryRow::UnsafeMergeFrom(const SummaryRow& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_day_timestamp()) {
      set_day_timestamp(from.day_timestamp());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_unviewed()) {
      set_unviewed(from.unviewed());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_photo_count()) {
      set_photo_count(from.photo_count());
    }
    if (from.has_comment_count()) {
      set_comment_count(from.comment_count());
    }
    if (from.has_contributor_count()) {
      set_contributor_count(from.contributor_count());
    }
    if (from.has_share_count()) {
      set_share_count(from.share_count());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_episode_id()) {
      set_episode_id(from.episode_id());
    }
    if (from.has_original_row_index()) {
      set_original_row_index(from.original_row_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SummaryRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SummaryRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryRow::CopyFrom(const SummaryRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SummaryRow)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SummaryRow::IsInitialized() const {

  return true;
}

void SummaryRow::Swap(SummaryRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SummaryRow::InternalSwap(SummaryRow* other) {
  std::swap(type_, other->type_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(day_timestamp_, other->day_timestamp_);
  std::swap(identifier_, other->identifier_);
  std::swap(height_, other->height_);
  std::swap(unviewed_, other->unviewed_);
  std::swap(position_, other->position_);
  std::swap(weight_, other->weight_);
  std::swap(photo_count_, other->photo_count_);
  std::swap(comment_count_, other->comment_count_);
  std::swap(contributor_count_, other->contributor_count_);
  std::swap(share_count_, other->share_count_);
  std::swap(distance_, other->distance_);
  std::swap(episode_id_, other->episode_id_);
  std::swap(original_row_index_, other->original_row_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SummaryRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummaryRow_descriptor_;
  metadata.reflection = SummaryRow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SummaryRow

// optional .SummaryRow.RowType type = 1;
bool SummaryRow::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SummaryRow::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SummaryRow::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SummaryRow::clear_type() {
  type_ = 1;
  clear_has_type();
}
::SummaryRow_RowType SummaryRow::type() const {
  // @@protoc_insertion_point(field_get:SummaryRow.type)
  return static_cast< ::SummaryRow_RowType >(type_);
}
void SummaryRow::set_type(::SummaryRow_RowType value) {
  assert(::SummaryRow_RowType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.type)
}

// optional double timestamp = 2;
bool SummaryRow::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SummaryRow::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void SummaryRow::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void SummaryRow::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double SummaryRow::timestamp() const {
  // @@protoc_insertion_point(field_get:SummaryRow.timestamp)
  return timestamp_;
}
void SummaryRow::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.timestamp)
}

// optional double day_timestamp = 3;
bool SummaryRow::has_day_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SummaryRow::set_has_day_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void SummaryRow::clear_has_day_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void SummaryRow::clear_day_timestamp() {
  day_timestamp_ = 0;
  clear_has_day_timestamp();
}
double SummaryRow::day_timestamp() const {
  // @@protoc_insertion_point(field_get:SummaryRow.day_timestamp)
  return day_timestamp_;
}
void SummaryRow::set_day_timestamp(double value) {
  set_has_day_timestamp();
  day_timestamp_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.day_timestamp)
}

// optional int64 identifier = 4;
bool SummaryRow::has_identifier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SummaryRow::set_has_identifier() {
  _has_bits_[0] |= 0x00000008u;
}
void SummaryRow::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000008u;
}
void SummaryRow::clear_identifier() {
  identifier_ = GOOGLE_LONGLONG(0);
  clear_has_identifier();
}
::google::protobuf::int64 SummaryRow::identifier() const {
  // @@protoc_insertion_point(field_get:SummaryRow.identifier)
  return identifier_;
}
void SummaryRow::set_identifier(::google::protobuf::int64 value) {
  set_has_identifier();
  identifier_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.identifier)
}

// optional float height = 5;
bool SummaryRow::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SummaryRow::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void SummaryRow::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void SummaryRow::clear_height() {
  height_ = 0;
  clear_has_height();
}
float SummaryRow::height() const {
  // @@protoc_insertion_point(field_get:SummaryRow.height)
  return height_;
}
void SummaryRow::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.height)
}

// optional bool unviewed = 6;
bool SummaryRow::has_unviewed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SummaryRow::set_has_unviewed() {
  _has_bits_[0] |= 0x00000020u;
}
void SummaryRow::clear_has_unviewed() {
  _has_bits_[0] &= ~0x00000020u;
}
void SummaryRow::clear_unviewed() {
  unviewed_ = false;
  clear_has_unviewed();
}
bool SummaryRow::unviewed() const {
  // @@protoc_insertion_point(field_get:SummaryRow.unviewed)
  return unviewed_;
}
void SummaryRow::set_unviewed(bool value) {
  set_has_unviewed();
  unviewed_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.unviewed)
}

// optional float position = 7;
bool SummaryRow::has_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SummaryRow::set_has_position() {
  _has_bits_[0] |= 0x00000040u;
}
void SummaryRow::clear_has_position() {
  _has_bits_[0] &= ~0x00000040u;
}
void SummaryRow::clear_position() {
  position_ = 0;
  clear_has_position();
}
float SummaryRow::position() const {
  // @@protoc_insertion_point(field_get:SummaryRow.position)
  return position_;
}
void SummaryRow::set_position(float value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.position)
}

// optional float weight = 8;
bool SummaryRow::has_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SummaryRow::set_has_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void SummaryRow::clear_has_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void SummaryRow::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
float SummaryRow::weight() const {
  // @@protoc_insertion_point(field_get:SummaryRow.weight)
  return weight_;
}
void SummaryRow::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.weight)
}

// optional int32 photo_count = 9;
bool SummaryRow::has_photo_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SummaryRow::set_has_photo_count() {
  _has_bits_[0] |= 0x00000100u;
}
void SummaryRow::clear_has_photo_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void SummaryRow::clear_photo_count() {
  photo_count_ = 0;
  clear_has_photo_count();
}
::google::protobuf::int32 SummaryRow::photo_count() const {
  // @@protoc_insertion_point(field_get:SummaryRow.photo_count)
  return photo_count_;
}
void SummaryRow::set_photo_count(::google::protobuf::int32 value) {
  set_has_photo_count();
  photo_count_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.photo_count)
}

// optional int32 comment_count = 10;
bool SummaryRow::has_comment_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SummaryRow::set_has_comment_count() {
  _has_bits_[0] |= 0x00000200u;
}
void SummaryRow::clear_has_comment_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void SummaryRow::clear_comment_count() {
  comment_count_ = 0;
  clear_has_comment_count();
}
::google::protobuf::int32 SummaryRow::comment_count() const {
  // @@protoc_insertion_point(field_get:SummaryRow.comment_count)
  return comment_count_;
}
void SummaryRow::set_comment_count(::google::protobuf::int32 value) {
  set_has_comment_count();
  comment_count_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.comment_count)
}

// optional int32 contributor_count = 11;
bool SummaryRow::has_contributor_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SummaryRow::set_has_contributor_count() {
  _has_bits_[0] |= 0x00000400u;
}
void SummaryRow::clear_has_contributor_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void SummaryRow::clear_contributor_count() {
  contributor_count_ = 0;
  clear_has_contributor_count();
}
::google::protobuf::int32 SummaryRow::contributor_count() const {
  // @@protoc_insertion_point(field_get:SummaryRow.contributor_count)
  return contributor_count_;
}
void SummaryRow::set_contributor_count(::google::protobuf::int32 value) {
  set_has_contributor_count();
  contributor_count_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.contributor_count)
}

// optional int32 share_count = 12;
bool SummaryRow::has_share_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SummaryRow::set_has_share_count() {
  _has_bits_[0] |= 0x00000800u;
}
void SummaryRow::clear_has_share_count() {
  _has_bits_[0] &= ~0x00000800u;
}
void SummaryRow::clear_share_count() {
  share_count_ = 0;
  clear_has_share_count();
}
::google::protobuf::int32 SummaryRow::share_count() const {
  // @@protoc_insertion_point(field_get:SummaryRow.share_count)
  return share_count_;
}
void SummaryRow::set_share_count(::google::protobuf::int32 value) {
  set_has_share_count();
  share_count_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.share_count)
}

// optional double distance = 13;
bool SummaryRow::has_distance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SummaryRow::set_has_distance() {
  _has_bits_[0] |= 0x00001000u;
}
void SummaryRow::clear_has_distance() {
  _has_bits_[0] &= ~0x00001000u;
}
void SummaryRow::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
double SummaryRow::distance() const {
  // @@protoc_insertion_point(field_get:SummaryRow.distance)
  return distance_;
}
void SummaryRow::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.distance)
}

// optional int64 episode_id = 14;
bool SummaryRow::has_episode_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SummaryRow::set_has_episode_id() {
  _has_bits_[0] |= 0x00002000u;
}
void SummaryRow::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void SummaryRow::clear_episode_id() {
  episode_id_ = GOOGLE_LONGLONG(0);
  clear_has_episode_id();
}
::google::protobuf::int64 SummaryRow::episode_id() const {
  // @@protoc_insertion_point(field_get:SummaryRow.episode_id)
  return episode_id_;
}
void SummaryRow::set_episode_id(::google::protobuf::int64 value) {
  set_has_episode_id();
  episode_id_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.episode_id)
}

// optional int32 original_row_index = 20;
bool SummaryRow::has_original_row_index() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SummaryRow::set_has_original_row_index() {
  _has_bits_[0] |= 0x00004000u;
}
void SummaryRow::clear_has_original_row_index() {
  _has_bits_[0] &= ~0x00004000u;
}
void SummaryRow::clear_original_row_index() {
  original_row_index_ = 0;
  clear_has_original_row_index();
}
::google::protobuf::int32 SummaryRow::original_row_index() const {
  // @@protoc_insertion_point(field_get:SummaryRow.original_row_index)
  return original_row_index_;
}
void SummaryRow::set_original_row_index(::google::protobuf::int32 value) {
  set_has_original_row_index();
  original_row_index_ = value;
  // @@protoc_insertion_point(field_set:SummaryRow.original_row_index)
}

inline const SummaryRow* SummaryRow::internal_default_instance() {
  return &SummaryRow_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SummaryMetadata::kRowsFieldNumber;
const int SummaryMetadata::kUnviewedCountFieldNumber;
const int SummaryMetadata::kPhotoCountFieldNumber;
const int SummaryMetadata::kTotalHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SummaryMetadata::SummaryMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SummaryMetadata)
}

void SummaryMetadata::InitAsDefaultInstance() {
}

SummaryMetadata::SummaryMetadata(const SummaryMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SummaryMetadata)
}

void SummaryMetadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&unviewed_count_, 0, reinterpret_cast<char*>(&total_height_) -
    reinterpret_cast<char*>(&unviewed_count_) + sizeof(total_height_));
}

SummaryMetadata::~SummaryMetadata() {
  // @@protoc_insertion_point(destructor:SummaryMetadata)
  SharedDtor();
}

void SummaryMetadata::SharedDtor() {
}

void SummaryMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummaryMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummaryMetadata_descriptor_;
}

const SummaryMetadata& SummaryMetadata::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SummaryMetadata> SummaryMetadata_default_instance_;

SummaryMetadata* SummaryMetadata::New(::google::protobuf::Arena* arena) const {
  SummaryMetadata* n = new SummaryMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SummaryMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:SummaryMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SummaryMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SummaryMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(unviewed_count_, total_height_);

#undef ZR_HELPER_
#undef ZR_

  rows_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SummaryMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SummaryMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SummaryRow rows = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rows;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_unviewed_count;
        break;
      }

      // optional int32 unviewed_count = 6;
      case 6: {
        if (tag == 48) {
         parse_unviewed_count:
          set_has_unviewed_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unviewed_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_photo_count;
        break;
      }

      // optional int32 photo_count = 8;
      case 8: {
        if (tag == 64) {
         parse_photo_count:
          set_has_photo_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_total_height;
        break;
      }

      // optional float total_height = 9;
      case 9: {
        if (tag == 77) {
         parse_total_height:
          set_has_total_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SummaryMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SummaryMetadata)
  return false;
#undef DO_
}

void SummaryMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SummaryMetadata)
  // repeated .SummaryRow rows = 1;
  for (unsigned int i = 0, n = this->rows_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rows(i), output);
  }

  // optional int32 unviewed_count = 6;
  if (has_unviewed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unviewed_count(), output);
  }

  // optional int32 photo_count = 8;
  if (has_photo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->photo_count(), output);
  }

  // optional float total_height = 9;
  if (has_total_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->total_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SummaryMetadata)
}

::google::protobuf::uint8* SummaryMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SummaryMetadata)
  // repeated .SummaryRow rows = 1;
  for (unsigned int i = 0, n = this->rows_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rows(i), false, target);
  }

  // optional int32 unviewed_count = 6;
  if (has_unviewed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unviewed_count(), target);
  }

  // optional int32 photo_count = 8;
  if (has_photo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->photo_count(), target);
  }

  // optional float total_height = 9;
  if (has_total_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->total_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SummaryMetadata)
  return target;
}

size_t SummaryMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SummaryMetadata)
  size_t total_size = 0;

  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 unviewed_count = 6;
    if (has_unviewed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unviewed_count());
    }

    // optional int32 photo_count = 8;
    if (has_photo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_count());
    }

    // optional float total_height = 9;
    if (has_total_height()) {
      total_size += 1 + 4;
    }

  }
  // repeated .SummaryRow rows = 1;
  {
    unsigned int count = this->rows_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rows(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummaryMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SummaryMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SummaryMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SummaryMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SummaryMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SummaryMetadata)
    UnsafeMergeFrom(*source);
  }
}

void SummaryMetadata::MergeFrom(const SummaryMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SummaryMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SummaryMetadata::UnsafeMergeFrom(const SummaryMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_unviewed_count()) {
      set_unviewed_count(from.unviewed_count());
    }
    if (from.has_photo_count()) {
      set_photo_count(from.photo_count());
    }
    if (from.has_total_height()) {
      set_total_height(from.total_height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SummaryMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SummaryMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryMetadata::CopyFrom(const SummaryMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SummaryMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SummaryMetadata::IsInitialized() const {

  return true;
}

void SummaryMetadata::Swap(SummaryMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SummaryMetadata::InternalSwap(SummaryMetadata* other) {
  rows_.UnsafeArenaSwap(&other->rows_);
  std::swap(unviewed_count_, other->unviewed_count_);
  std::swap(photo_count_, other->photo_count_);
  std::swap(total_height_, other->total_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SummaryMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummaryMetadata_descriptor_;
  metadata.reflection = SummaryMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SummaryMetadata

// repeated .SummaryRow rows = 1;
int SummaryMetadata::rows_size() const {
  return rows_.size();
}
void SummaryMetadata::clear_rows() {
  rows_.Clear();
}
const ::SummaryRow& SummaryMetadata::rows(int index) const {
  // @@protoc_insertion_point(field_get:SummaryMetadata.rows)
  return rows_.Get(index);
}
::SummaryRow* SummaryMetadata::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:SummaryMetadata.rows)
  return rows_.Mutable(index);
}
::SummaryRow* SummaryMetadata::add_rows() {
  // @@protoc_insertion_point(field_add:SummaryMetadata.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::SummaryRow >*
SummaryMetadata::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:SummaryMetadata.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::SummaryRow >&
SummaryMetadata::rows() const {
  // @@protoc_insertion_point(field_list:SummaryMetadata.rows)
  return rows_;
}

// optional int32 unviewed_count = 6;
bool SummaryMetadata::has_unviewed_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SummaryMetadata::set_has_unviewed_count() {
  _has_bits_[0] |= 0x00000002u;
}
void SummaryMetadata::clear_has_unviewed_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void SummaryMetadata::clear_unviewed_count() {
  unviewed_count_ = 0;
  clear_has_unviewed_count();
}
::google::protobuf::int32 SummaryMetadata::unviewed_count() const {
  // @@protoc_insertion_point(field_get:SummaryMetadata.unviewed_count)
  return unviewed_count_;
}
void SummaryMetadata::set_unviewed_count(::google::protobuf::int32 value) {
  set_has_unviewed_count();
  unviewed_count_ = value;
  // @@protoc_insertion_point(field_set:SummaryMetadata.unviewed_count)
}

// optional int32 photo_count = 8;
bool SummaryMetadata::has_photo_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SummaryMetadata::set_has_photo_count() {
  _has_bits_[0] |= 0x00000004u;
}
void SummaryMetadata::clear_has_photo_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void SummaryMetadata::clear_photo_count() {
  photo_count_ = 0;
  clear_has_photo_count();
}
::google::protobuf::int32 SummaryMetadata::photo_count() const {
  // @@protoc_insertion_point(field_get:SummaryMetadata.photo_count)
  return photo_count_;
}
void SummaryMetadata::set_photo_count(::google::protobuf::int32 value) {
  set_has_photo_count();
  photo_count_ = value;
  // @@protoc_insertion_point(field_set:SummaryMetadata.photo_count)
}

// optional float total_height = 9;
bool SummaryMetadata::has_total_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SummaryMetadata::set_has_total_height() {
  _has_bits_[0] |= 0x00000008u;
}
void SummaryMetadata::clear_has_total_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void SummaryMetadata::clear_total_height() {
  total_height_ = 0;
  clear_has_total_height();
}
float SummaryMetadata::total_height() const {
  // @@protoc_insertion_point(field_get:SummaryMetadata.total_height)
  return total_height_;
}
void SummaryMetadata::set_total_height(float value) {
  set_has_total_height();
  total_height_ = value;
  // @@protoc_insertion_point(field_set:SummaryMetadata.total_height)
}

inline const SummaryMetadata* SummaryMetadata::internal_default_instance() {
  return &SummaryMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ViewpointSummaryMetadata_ActivityRowType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewpointSummaryMetadata_ActivityRowType_descriptor_;
}
bool ViewpointSummaryMetadata_ActivityRowType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata::HEADER;
const ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata::ACTIVITY;
const ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata::REPLY_ACTIVITY;
const ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata::PHOTOS;
const ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata::TITLE;
const ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata::UPDATE;
const ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata::FOOTER;
const ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata::ActivityRowType_MIN;
const ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata::ActivityRowType_MAX;
const int ViewpointSummaryMetadata::ActivityRowType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewpointSummaryMetadata_Contributor::kUserIdFieldNumber;
const int ViewpointSummaryMetadata_Contributor::kUpdateSeqFieldNumber;
const int ViewpointSummaryMetadata_Contributor::kIdentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewpointSummaryMetadata_Contributor::ViewpointSummaryMetadata_Contributor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ViewpointSummaryMetadata.Contributor)
}

void ViewpointSummaryMetadata_Contributor::InitAsDefaultInstance() {
}

ViewpointSummaryMetadata_Contributor::ViewpointSummaryMetadata_Contributor(const ViewpointSummaryMetadata_Contributor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ViewpointSummaryMetadata.Contributor)
}

void ViewpointSummaryMetadata_Contributor::SharedCtor() {
  _cached_size_ = 0;
  identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&update_seq_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(update_seq_));
}

ViewpointSummaryMetadata_Contributor::~ViewpointSummaryMetadata_Contributor() {
  // @@protoc_insertion_point(destructor:ViewpointSummaryMetadata.Contributor)
  SharedDtor();
}

void ViewpointSummaryMetadata_Contributor::SharedDtor() {
  identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ViewpointSummaryMetadata_Contributor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewpointSummaryMetadata_Contributor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewpointSummaryMetadata_Contributor_descriptor_;
}

const ViewpointSummaryMetadata_Contributor& ViewpointSummaryMetadata_Contributor::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ViewpointSummaryMetadata_Contributor> ViewpointSummaryMetadata_Contributor_default_instance_;

ViewpointSummaryMetadata_Contributor* ViewpointSummaryMetadata_Contributor::New(::google::protobuf::Arena* arena) const {
  ViewpointSummaryMetadata_Contributor* n = new ViewpointSummaryMetadata_Contributor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewpointSummaryMetadata_Contributor::Clear() {
// @@protoc_insertion_point(message_clear_start:ViewpointSummaryMetadata.Contributor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ViewpointSummaryMetadata_Contributor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ViewpointSummaryMetadata_Contributor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(user_id_, update_seq_);
    if (has_identity()) {
      identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ViewpointSummaryMetadata_Contributor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ViewpointSummaryMetadata.Contributor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_update_seq;
        break;
      }

      // optional double update_seq = 2;
      case 2: {
        if (tag == 17) {
         parse_update_seq:
          set_has_update_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_seq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_identity;
        break;
      }

      // optional string identity = 3;
      case 3: {
        if (tag == 26) {
         parse_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identity().data(), this->identity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointSummaryMetadata.Contributor.identity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ViewpointSummaryMetadata.Contributor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ViewpointSummaryMetadata.Contributor)
  return false;
#undef DO_
}

void ViewpointSummaryMetadata_Contributor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ViewpointSummaryMetadata.Contributor)
  // optional int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional double update_seq = 2;
  if (has_update_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->update_seq(), output);
  }

  // optional string identity = 3;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSummaryMetadata.Contributor.identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->identity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ViewpointSummaryMetadata.Contributor)
}

::google::protobuf::uint8* ViewpointSummaryMetadata_Contributor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ViewpointSummaryMetadata.Contributor)
  // optional int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional double update_seq = 2;
  if (has_update_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->update_seq(), target);
  }

  // optional string identity = 3;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSummaryMetadata.Contributor.identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->identity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ViewpointSummaryMetadata.Contributor)
  return target;
}

size_t ViewpointSummaryMetadata_Contributor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ViewpointSummaryMetadata.Contributor)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional double update_seq = 2;
    if (has_update_seq()) {
      total_size += 1 + 8;
    }

    // optional string identity = 3;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identity());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewpointSummaryMetadata_Contributor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ViewpointSummaryMetadata.Contributor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ViewpointSummaryMetadata_Contributor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewpointSummaryMetadata_Contributor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ViewpointSummaryMetadata.Contributor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ViewpointSummaryMetadata.Contributor)
    UnsafeMergeFrom(*source);
  }
}

void ViewpointSummaryMetadata_Contributor::MergeFrom(const ViewpointSummaryMetadata_Contributor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ViewpointSummaryMetadata.Contributor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ViewpointSummaryMetadata_Contributor::UnsafeMergeFrom(const ViewpointSummaryMetadata_Contributor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_seq()) {
      set_update_seq(from.update_seq());
    }
    if (from.has_identity()) {
      set_has_identity();
      identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ViewpointSummaryMetadata_Contributor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ViewpointSummaryMetadata.Contributor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewpointSummaryMetadata_Contributor::CopyFrom(const ViewpointSummaryMetadata_Contributor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ViewpointSummaryMetadata.Contributor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ViewpointSummaryMetadata_Contributor::IsInitialized() const {

  return true;
}

void ViewpointSummaryMetadata_Contributor::Swap(ViewpointSummaryMetadata_Contributor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewpointSummaryMetadata_Contributor::InternalSwap(ViewpointSummaryMetadata_Contributor* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(update_seq_, other->update_seq_);
  identity_.Swap(&other->identity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewpointSummaryMetadata_Contributor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewpointSummaryMetadata_Contributor_descriptor_;
  metadata.reflection = ViewpointSummaryMetadata_Contributor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewpointSummaryMetadata_ActivityRow_Photo::kPhotoIdFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow_Photo::kEpisodeIdFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow_Photo::kParentEpisodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewpointSummaryMetadata_ActivityRow_Photo::ViewpointSummaryMetadata_ActivityRow_Photo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ViewpointSummaryMetadata.ActivityRow.Photo)
}

void ViewpointSummaryMetadata_ActivityRow_Photo::InitAsDefaultInstance() {
}

ViewpointSummaryMetadata_ActivityRow_Photo::ViewpointSummaryMetadata_ActivityRow_Photo(const ViewpointSummaryMetadata_ActivityRow_Photo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ViewpointSummaryMetadata.ActivityRow.Photo)
}

void ViewpointSummaryMetadata_ActivityRow_Photo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&photo_id_, 0, reinterpret_cast<char*>(&parent_episode_id_) -
    reinterpret_cast<char*>(&photo_id_) + sizeof(parent_episode_id_));
}

ViewpointSummaryMetadata_ActivityRow_Photo::~ViewpointSummaryMetadata_ActivityRow_Photo() {
  // @@protoc_insertion_point(destructor:ViewpointSummaryMetadata.ActivityRow.Photo)
  SharedDtor();
}

void ViewpointSummaryMetadata_ActivityRow_Photo::SharedDtor() {
}

void ViewpointSummaryMetadata_ActivityRow_Photo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewpointSummaryMetadata_ActivityRow_Photo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewpointSummaryMetadata_ActivityRow_Photo_descriptor_;
}

const ViewpointSummaryMetadata_ActivityRow_Photo& ViewpointSummaryMetadata_ActivityRow_Photo::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ViewpointSummaryMetadata_ActivityRow_Photo> ViewpointSummaryMetadata_ActivityRow_Photo_default_instance_;

ViewpointSummaryMetadata_ActivityRow_Photo* ViewpointSummaryMetadata_ActivityRow_Photo::New(::google::protobuf::Arena* arena) const {
  ViewpointSummaryMetadata_ActivityRow_Photo* n = new ViewpointSummaryMetadata_ActivityRow_Photo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewpointSummaryMetadata_ActivityRow_Photo::Clear() {
// @@protoc_insertion_point(message_clear_start:ViewpointSummaryMetadata.ActivityRow.Photo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ViewpointSummaryMetadata_ActivityRow_Photo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ViewpointSummaryMetadata_ActivityRow_Photo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(photo_id_, parent_episode_id_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ViewpointSummaryMetadata_ActivityRow_Photo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ViewpointSummaryMetadata.ActivityRow.Photo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 photo_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_photo_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &photo_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_episode_id;
        break;
      }

      // optional int64 episode_id = 2;
      case 2: {
        if (tag == 16) {
         parse_episode_id:
          set_has_episode_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &episode_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parent_episode_id;
        break;
      }

      // optional int64 parent_episode_id = 3;
      case 3: {
        if (tag == 24) {
         parse_parent_episode_id:
          set_has_parent_episode_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parent_episode_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ViewpointSummaryMetadata.ActivityRow.Photo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ViewpointSummaryMetadata.ActivityRow.Photo)
  return false;
#undef DO_
}

void ViewpointSummaryMetadata_ActivityRow_Photo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ViewpointSummaryMetadata.ActivityRow.Photo)
  // optional int64 photo_id = 1;
  if (has_photo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->photo_id(), output);
  }

  // optional int64 episode_id = 2;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->episode_id(), output);
  }

  // optional int64 parent_episode_id = 3;
  if (has_parent_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->parent_episode_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ViewpointSummaryMetadata.ActivityRow.Photo)
}

::google::protobuf::uint8* ViewpointSummaryMetadata_ActivityRow_Photo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ViewpointSummaryMetadata.ActivityRow.Photo)
  // optional int64 photo_id = 1;
  if (has_photo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->photo_id(), target);
  }

  // optional int64 episode_id = 2;
  if (has_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->episode_id(), target);
  }

  // optional int64 parent_episode_id = 3;
  if (has_parent_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->parent_episode_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ViewpointSummaryMetadata.ActivityRow.Photo)
  return target;
}

size_t ViewpointSummaryMetadata_ActivityRow_Photo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ViewpointSummaryMetadata.ActivityRow.Photo)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 photo_id = 1;
    if (has_photo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->photo_id());
    }

    // optional int64 episode_id = 2;
    if (has_episode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->episode_id());
    }

    // optional int64 parent_episode_id = 3;
    if (has_parent_episode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parent_episode_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewpointSummaryMetadata_ActivityRow_Photo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ViewpointSummaryMetadata.ActivityRow.Photo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ViewpointSummaryMetadata_ActivityRow_Photo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewpointSummaryMetadata_ActivityRow_Photo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ViewpointSummaryMetadata.ActivityRow.Photo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ViewpointSummaryMetadata.ActivityRow.Photo)
    UnsafeMergeFrom(*source);
  }
}

void ViewpointSummaryMetadata_ActivityRow_Photo::MergeFrom(const ViewpointSummaryMetadata_ActivityRow_Photo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ViewpointSummaryMetadata.ActivityRow.Photo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ViewpointSummaryMetadata_ActivityRow_Photo::UnsafeMergeFrom(const ViewpointSummaryMetadata_ActivityRow_Photo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_photo_id()) {
      set_photo_id(from.photo_id());
    }
    if (from.has_episode_id()) {
      set_episode_id(from.episode_id());
    }
    if (from.has_parent_episode_id()) {
      set_parent_episode_id(from.parent_episode_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ViewpointSummaryMetadata_ActivityRow_Photo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ViewpointSummaryMetadata.ActivityRow.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewpointSummaryMetadata_ActivityRow_Photo::CopyFrom(const ViewpointSummaryMetadata_ActivityRow_Photo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ViewpointSummaryMetadata.ActivityRow.Photo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ViewpointSummaryMetadata_ActivityRow_Photo::IsInitialized() const {

  return true;
}

void ViewpointSummaryMetadata_ActivityRow_Photo::Swap(ViewpointSummaryMetadata_ActivityRow_Photo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewpointSummaryMetadata_ActivityRow_Photo::InternalSwap(ViewpointSummaryMetadata_ActivityRow_Photo* other) {
  std::swap(photo_id_, other->photo_id_);
  std::swap(episode_id_, other->episode_id_);
  std::swap(parent_episode_id_, other->parent_episode_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewpointSummaryMetadata_ActivityRow_Photo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewpointSummaryMetadata_ActivityRow_Photo_descriptor_;
  metadata.reflection = ViewpointSummaryMetadata_ActivityRow_Photo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewpointSummaryMetadata_ActivityRow::kActivityIdFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kUserIdsFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kUserIdentitiesFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kTimestampFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kTypeFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kHeightFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kPositionFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kRowCountFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kUpdateSeqFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kPendingFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kThreadTypeFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kPhotosFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kIsCommentFieldNumber;
const int ViewpointSummaryMetadata_ActivityRow::kIsProvisionalHintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewpointSummaryMetadata_ActivityRow::ViewpointSummaryMetadata_ActivityRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ViewpointSummaryMetadata.ActivityRow)
}

void ViewpointSummaryMetadata_ActivityRow::InitAsDefaultInstance() {
}

ViewpointSummaryMetadata_ActivityRow::ViewpointSummaryMetadata_ActivityRow(const ViewpointSummaryMetadata_ActivityRow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ViewpointSummaryMetadata.ActivityRow)
}

void ViewpointSummaryMetadata_ActivityRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&activity_id_, 0, reinterpret_cast<char*>(&is_provisional_hint_) -
    reinterpret_cast<char*>(&activity_id_) + sizeof(is_provisional_hint_));
  type_ = 1;
}

ViewpointSummaryMetadata_ActivityRow::~ViewpointSummaryMetadata_ActivityRow() {
  // @@protoc_insertion_point(destructor:ViewpointSummaryMetadata.ActivityRow)
  SharedDtor();
}

void ViewpointSummaryMetadata_ActivityRow::SharedDtor() {
}

void ViewpointSummaryMetadata_ActivityRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewpointSummaryMetadata_ActivityRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewpointSummaryMetadata_ActivityRow_descriptor_;
}

const ViewpointSummaryMetadata_ActivityRow& ViewpointSummaryMetadata_ActivityRow::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ViewpointSummaryMetadata_ActivityRow> ViewpointSummaryMetadata_ActivityRow_default_instance_;

ViewpointSummaryMetadata_ActivityRow* ViewpointSummaryMetadata_ActivityRow::New(::google::protobuf::Arena* arena) const {
  ViewpointSummaryMetadata_ActivityRow* n = new ViewpointSummaryMetadata_ActivityRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewpointSummaryMetadata_ActivityRow::Clear() {
// @@protoc_insertion_point(message_clear_start:ViewpointSummaryMetadata.ActivityRow)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ViewpointSummaryMetadata_ActivityRow, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ViewpointSummaryMetadata_ActivityRow*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 249u) {
    ZR_(activity_id_, position_);
    type_ = 1;
    row_count_ = 0;
  }
  if (_has_bits_[8 / 32] & 14080u) {
    ZR_(thread_type_, is_provisional_hint_);
    update_seq_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  user_ids_.Clear();
  user_identities_.Clear();
  photos_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ViewpointSummaryMetadata_ActivityRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ViewpointSummaryMetadata.ActivityRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 activity_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_activity_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activity_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_ids;
        break;
      }

      // repeated int64 user_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_user_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_user_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_ids;
        if (input->ExpectTag(25)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 3;
      case 3: {
        if (tag == 25) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .ViewpointSummaryMetadata.ActivityRowType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ViewpointSummaryMetadata_ActivityRowType_IsValid(value)) {
            set_type(static_cast< ::ViewpointSummaryMetadata_ActivityRowType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_height;
        break;
      }

      // optional float height = 5;
      case 5: {
        if (tag == 45) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_position;
        break;
      }

      // optional float position = 6;
      case 6: {
        if (tag == 53) {
         parse_position:
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_row_count;
        break;
      }

      // optional int32 row_count = 7;
      case 7: {
        if (tag == 56) {
         parse_row_count:
          set_has_row_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_update_seq;
        break;
      }

      // optional int64 update_seq = 8;
      case 8: {
        if (tag == 64) {
         parse_update_seq:
          set_has_update_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_seq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pending;
        break;
      }

      // optional bool pending = 9;
      case 9: {
        if (tag == 72) {
         parse_pending:
          set_has_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pending_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_thread_type;
        break;
      }

      // optional int32 thread_type = 10;
      case 10: {
        if (tag == 80) {
         parse_thread_type:
          set_has_thread_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_photos;
        break;
      }

      // repeated .ViewpointSummaryMetadata.ActivityRow.Photo photos = 11;
      case 11: {
        if (tag == 90) {
         parse_photos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_photos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(96)) goto parse_is_comment;
        break;
      }

      // optional bool is_comment = 12;
      case 12: {
        if (tag == 96) {
         parse_is_comment:
          set_has_is_comment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_comment_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_provisional_hint;
        break;
      }

      // optional bool is_provisional_hint = 13;
      case 13: {
        if (tag == 104) {
         parse_is_provisional_hint:
          set_has_is_provisional_hint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_provisional_hint_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_user_identities;
        break;
      }

      // repeated string user_identities = 14;
      case 14: {
        if (tag == 114) {
         parse_user_identities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_identities()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_identities(this->user_identities_size() - 1).data(),
            this->user_identities(this->user_identities_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointSummaryMetadata.ActivityRow.user_identities");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_user_identities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ViewpointSummaryMetadata.ActivityRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ViewpointSummaryMetadata.ActivityRow)
  return false;
#undef DO_
}

void ViewpointSummaryMetadata_ActivityRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ViewpointSummaryMetadata.ActivityRow)
  // optional int64 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->activity_id(), output);
  }

  // repeated int64 user_ids = 2;
  for (int i = 0; i < this->user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->user_ids(i), output);
  }

  // optional double timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  // optional .ViewpointSummaryMetadata.ActivityRowType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional float height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }

  // optional float position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->position(), output);
  }

  // optional int32 row_count = 7;
  if (has_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->row_count(), output);
  }

  // optional int64 update_seq = 8;
  if (has_update_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->update_seq(), output);
  }

  // optional bool pending = 9;
  if (has_pending()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->pending(), output);
  }

  // optional int32 thread_type = 10;
  if (has_thread_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->thread_type(), output);
  }

  // repeated .ViewpointSummaryMetadata.ActivityRow.Photo photos = 11;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->photos(i), output);
  }

  // optional bool is_comment = 12;
  if (has_is_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_comment(), output);
  }

  // optional bool is_provisional_hint = 13;
  if (has_is_provisional_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_provisional_hint(), output);
  }

  // repeated string user_identities = 14;
  for (int i = 0; i < this->user_identities_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_identities(i).data(), this->user_identities(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSummaryMetadata.ActivityRow.user_identities");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->user_identities(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ViewpointSummaryMetadata.ActivityRow)
}

::google::protobuf::uint8* ViewpointSummaryMetadata_ActivityRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ViewpointSummaryMetadata.ActivityRow)
  // optional int64 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->activity_id(), target);
  }

  // repeated int64 user_ids = 2;
  for (int i = 0; i < this->user_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->user_ids(i), target);
  }

  // optional double timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  // optional .ViewpointSummaryMetadata.ActivityRowType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional float height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->height(), target);
  }

  // optional float position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->position(), target);
  }

  // optional int32 row_count = 7;
  if (has_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->row_count(), target);
  }

  // optional int64 update_seq = 8;
  if (has_update_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->update_seq(), target);
  }

  // optional bool pending = 9;
  if (has_pending()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->pending(), target);
  }

  // optional int32 thread_type = 10;
  if (has_thread_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->thread_type(), target);
  }

  // repeated .ViewpointSummaryMetadata.ActivityRow.Photo photos = 11;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->photos(i), false, target);
  }

  // optional bool is_comment = 12;
  if (has_is_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_comment(), target);
  }

  // optional bool is_provisional_hint = 13;
  if (has_is_provisional_hint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_provisional_hint(), target);
  }

  // repeated string user_identities = 14;
  for (int i = 0; i < this->user_identities_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_identities(i).data(), this->user_identities(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSummaryMetadata.ActivityRow.user_identities");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->user_identities(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ViewpointSummaryMetadata.ActivityRow)
  return target;
}

size_t ViewpointSummaryMetadata_ActivityRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ViewpointSummaryMetadata.ActivityRow)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 249u) {
    // optional int64 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activity_id());
    }

    // optional double timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .ViewpointSummaryMetadata.ActivityRowType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float height = 5;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional float position = 6;
    if (has_position()) {
      total_size += 1 + 4;
    }

    // optional int32 row_count = 7;
    if (has_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_count());
    }

  }
  if (_has_bits_[8 / 32] & 14080u) {
    // optional int64 update_seq = 8;
    if (has_update_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_seq());
    }

    // optional bool pending = 9;
    if (has_pending()) {
      total_size += 1 + 1;
    }

    // optional int32 thread_type = 10;
    if (has_thread_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_type());
    }

    // optional bool is_comment = 12;
    if (has_is_comment()) {
      total_size += 1 + 1;
    }

    // optional bool is_provisional_hint = 13;
    if (has_is_provisional_hint()) {
      total_size += 1 + 1;
    }

  }
  // repeated int64 user_ids = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->user_ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_ids(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->user_ids_size());
    total_size += data_size;
  }

  // repeated string user_identities = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_identities_size());
  for (int i = 0; i < this->user_identities_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_identities(i));
  }

  // repeated .ViewpointSummaryMetadata.ActivityRow.Photo photos = 11;
  {
    unsigned int count = this->photos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photos(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewpointSummaryMetadata_ActivityRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ViewpointSummaryMetadata.ActivityRow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ViewpointSummaryMetadata_ActivityRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewpointSummaryMetadata_ActivityRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ViewpointSummaryMetadata.ActivityRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ViewpointSummaryMetadata.ActivityRow)
    UnsafeMergeFrom(*source);
  }
}

void ViewpointSummaryMetadata_ActivityRow::MergeFrom(const ViewpointSummaryMetadata_ActivityRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ViewpointSummaryMetadata.ActivityRow)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ViewpointSummaryMetadata_ActivityRow::UnsafeMergeFrom(const ViewpointSummaryMetadata_ActivityRow& from) {
  GOOGLE_DCHECK(&from != this);
  user_ids_.UnsafeMergeFrom(from.user_ids_);
  user_identities_.UnsafeMergeFrom(from.user_identities_);
  photos_.MergeFrom(from.photos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_row_count()) {
      set_row_count(from.row_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_seq()) {
      set_update_seq(from.update_seq());
    }
    if (from.has_pending()) {
      set_pending(from.pending());
    }
    if (from.has_thread_type()) {
      set_thread_type(from.thread_type());
    }
    if (from.has_is_comment()) {
      set_is_comment(from.is_comment());
    }
    if (from.has_is_provisional_hint()) {
      set_is_provisional_hint(from.is_provisional_hint());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ViewpointSummaryMetadata_ActivityRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ViewpointSummaryMetadata.ActivityRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewpointSummaryMetadata_ActivityRow::CopyFrom(const ViewpointSummaryMetadata_ActivityRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ViewpointSummaryMetadata.ActivityRow)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ViewpointSummaryMetadata_ActivityRow::IsInitialized() const {

  return true;
}

void ViewpointSummaryMetadata_ActivityRow::Swap(ViewpointSummaryMetadata_ActivityRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewpointSummaryMetadata_ActivityRow::InternalSwap(ViewpointSummaryMetadata_ActivityRow* other) {
  std::swap(activity_id_, other->activity_id_);
  user_ids_.UnsafeArenaSwap(&other->user_ids_);
  user_identities_.UnsafeArenaSwap(&other->user_identities_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(type_, other->type_);
  std::swap(height_, other->height_);
  std::swap(position_, other->position_);
  std::swap(row_count_, other->row_count_);
  std::swap(update_seq_, other->update_seq_);
  std::swap(pending_, other->pending_);
  std::swap(thread_type_, other->thread_type_);
  photos_.UnsafeArenaSwap(&other->photos_);
  std::swap(is_comment_, other->is_comment_);
  std::swap(is_provisional_hint_, other->is_provisional_hint_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewpointSummaryMetadata_ActivityRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewpointSummaryMetadata_ActivityRow_descriptor_;
  metadata.reflection = ViewpointSummaryMetadata_ActivityRow_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewpointSummaryMetadata::kViewpointIdFieldNumber;
const int ViewpointSummaryMetadata::kContributorsFieldNumber;
const int ViewpointSummaryMetadata::kCoverPhotoFieldNumber;
const int ViewpointSummaryMetadata::kActivitiesFieldNumber;
const int ViewpointSummaryMetadata::kEarliestTimestampFieldNumber;
const int ViewpointSummaryMetadata::kLatestTimestampFieldNumber;
const int ViewpointSummaryMetadata::kPhotoCountFieldNumber;
const int ViewpointSummaryMetadata::kCommentCountFieldNumber;
const int ViewpointSummaryMetadata::kNewPhotoCountFieldNumber;
const int ViewpointSummaryMetadata::kNewCommentCountFieldNumber;
const int ViewpointSummaryMetadata::kProvisionalFieldNumber;
const int ViewpointSummaryMetadata::kScrollToRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewpointSummaryMetadata::ViewpointSummaryMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DayMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ViewpointSummaryMetadata)
}

void ViewpointSummaryMetadata::InitAsDefaultInstance() {
  cover_photo_ = const_cast< ::DayPhoto*>(
      ::DayPhoto::internal_default_instance());
}

ViewpointSummaryMetadata::ViewpointSummaryMetadata(const ViewpointSummaryMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ViewpointSummaryMetadata)
}

void ViewpointSummaryMetadata::SharedCtor() {
  _cached_size_ = 0;
  cover_photo_ = NULL;
  ::memset(&viewpoint_id_, 0, reinterpret_cast<char*>(&scroll_to_row_) -
    reinterpret_cast<char*>(&viewpoint_id_) + sizeof(scroll_to_row_));
}

ViewpointSummaryMetadata::~ViewpointSummaryMetadata() {
  // @@protoc_insertion_point(destructor:ViewpointSummaryMetadata)
  SharedDtor();
}

void ViewpointSummaryMetadata::SharedDtor() {
  if (this != &ViewpointSummaryMetadata_default_instance_.get()) {
    delete cover_photo_;
  }
}

void ViewpointSummaryMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewpointSummaryMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewpointSummaryMetadata_descriptor_;
}

const ViewpointSummaryMetadata& ViewpointSummaryMetadata::default_instance() {
  protobuf_InitDefaults_DayMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ViewpointSummaryMetadata> ViewpointSummaryMetadata_default_instance_;

ViewpointSummaryMetadata* ViewpointSummaryMetadata::New(::google::protobuf::Arena* arena) const {
  ViewpointSummaryMetadata* n = new ViewpointSummaryMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewpointSummaryMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ViewpointSummaryMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ViewpointSummaryMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ViewpointSummaryMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 245u) {
    ZR_(viewpoint_id_, comment_count_);
    if (has_cover_photo()) {
      if (cover_photo_ != NULL) cover_photo_->::DayPhoto::Clear();
    }
  }
  ZR_(new_photo_count_, scroll_to_row_);

#undef ZR_HELPER_
#undef ZR_

  contributors_.Clear();
  activities_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ViewpointSummaryMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ViewpointSummaryMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 viewpoint_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_viewpoint_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &viewpoint_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contributors;
        break;
      }

      // repeated .ViewpointSummaryMetadata.Contributor contributors = 2;
      case 2: {
        if (tag == 18) {
         parse_contributors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_contributors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contributors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_contributors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_cover_photo;
        break;
      }

      // optional .DayPhoto cover_photo = 3;
      case 3: {
        if (tag == 26) {
         parse_cover_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cover_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_activities;
        break;
      }

      // repeated .ViewpointSummaryMetadata.ActivityRow activities = 4;
      case 4: {
        if (tag == 34) {
         parse_activities:
          DO_(input->IncrementRecursionDepth());
         parse_loop_activities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_activities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_activities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(41)) goto parse_earliest_timestamp;
        break;
      }

      // optional double earliest_timestamp = 5;
      case 5: {
        if (tag == 41) {
         parse_earliest_timestamp:
          set_has_earliest_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &earliest_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_latest_timestamp;
        break;
      }

      // optional double latest_timestamp = 6;
      case 6: {
        if (tag == 49) {
         parse_latest_timestamp:
          set_has_latest_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latest_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_photo_count;
        break;
      }

      // optional int32 photo_count = 7;
      case 7: {
        if (tag == 56) {
         parse_photo_count:
          set_has_photo_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photo_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_comment_count;
        break;
      }

      // optional int32 comment_count = 8;
      case 8: {
        if (tag == 64) {
         parse_comment_count:
          set_has_comment_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_new_photo_count;
        break;
      }

      // optional int32 new_photo_count = 9;
      case 9: {
        if (tag == 72) {
         parse_new_photo_count:
          set_has_new_photo_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_photo_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_new_comment_count;
        break;
      }

      // optional int32 new_comment_count = 10;
      case 10: {
        if (tag == 80) {
         parse_new_comment_count:
          set_has_new_comment_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_comment_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_provisional;
        break;
      }

      // optional bool provisional = 11;
      case 11: {
        if (tag == 88) {
         parse_provisional:
          set_has_provisional();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provisional_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_scroll_to_row;
        break;
      }

      // optional float scroll_to_row = 12;
      case 12: {
        if (tag == 101) {
         parse_scroll_to_row:
          set_has_scroll_to_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scroll_to_row_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ViewpointSummaryMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ViewpointSummaryMetadata)
  return false;
#undef DO_
}

void ViewpointSummaryMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ViewpointSummaryMetadata)
  // optional int64 viewpoint_id = 1;
  if (has_viewpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->viewpoint_id(), output);
  }

  // repeated .ViewpointSummaryMetadata.Contributor contributors = 2;
  for (unsigned int i = 0, n = this->contributors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contributors(i), output);
  }

  // optional .DayPhoto cover_photo = 3;
  if (has_cover_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cover_photo_, output);
  }

  // repeated .ViewpointSummaryMetadata.ActivityRow activities = 4;
  for (unsigned int i = 0, n = this->activities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->activities(i), output);
  }

  // optional double earliest_timestamp = 5;
  if (has_earliest_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->earliest_timestamp(), output);
  }

  // optional double latest_timestamp = 6;
  if (has_latest_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latest_timestamp(), output);
  }

  // optional int32 photo_count = 7;
  if (has_photo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->photo_count(), output);
  }

  // optional int32 comment_count = 8;
  if (has_comment_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->comment_count(), output);
  }

  // optional int32 new_photo_count = 9;
  if (has_new_photo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->new_photo_count(), output);
  }

  // optional int32 new_comment_count = 10;
  if (has_new_comment_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->new_comment_count(), output);
  }

  // optional bool provisional = 11;
  if (has_provisional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->provisional(), output);
  }

  // optional float scroll_to_row = 12;
  if (has_scroll_to_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->scroll_to_row(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ViewpointSummaryMetadata)
}

::google::protobuf::uint8* ViewpointSummaryMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ViewpointSummaryMetadata)
  // optional int64 viewpoint_id = 1;
  if (has_viewpoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->viewpoint_id(), target);
  }

  // repeated .ViewpointSummaryMetadata.Contributor contributors = 2;
  for (unsigned int i = 0, n = this->contributors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->contributors(i), false, target);
  }

  // optional .DayPhoto cover_photo = 3;
  if (has_cover_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cover_photo_, false, target);
  }

  // repeated .ViewpointSummaryMetadata.ActivityRow activities = 4;
  for (unsigned int i = 0, n = this->activities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->activities(i), false, target);
  }

  // optional double earliest_timestamp = 5;
  if (has_earliest_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->earliest_timestamp(), target);
  }

  // optional double latest_timestamp = 6;
  if (has_latest_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latest_timestamp(), target);
  }

  // optional int32 photo_count = 7;
  if (has_photo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->photo_count(), target);
  }

  // optional int32 comment_count = 8;
  if (has_comment_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->comment_count(), target);
  }

  // optional int32 new_photo_count = 9;
  if (has_new_photo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->new_photo_count(), target);
  }

  // optional int32 new_comment_count = 10;
  if (has_new_comment_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->new_comment_count(), target);
  }

  // optional bool provisional = 11;
  if (has_provisional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->provisional(), target);
  }

  // optional float scroll_to_row = 12;
  if (has_scroll_to_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->scroll_to_row(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ViewpointSummaryMetadata)
  return target;
}

size_t ViewpointSummaryMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ViewpointSummaryMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 245u) {
    // optional int64 viewpoint_id = 1;
    if (has_viewpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->viewpoint_id());
    }

    // optional .DayPhoto cover_photo = 3;
    if (has_cover_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cover_photo_);
    }

    // optional double earliest_timestamp = 5;
    if (has_earliest_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double latest_timestamp = 6;
    if (has_latest_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int32 photo_count = 7;
    if (has_photo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photo_count());
    }

    // optional int32 comment_count = 8;
    if (has_comment_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_count());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 new_photo_count = 9;
    if (has_new_photo_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_photo_count());
    }

    // optional int32 new_comment_count = 10;
    if (has_new_comment_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_comment_count());
    }

    // optional bool provisional = 11;
    if (has_provisional()) {
      total_size += 1 + 1;
    }

    // optional float scroll_to_row = 12;
    if (has_scroll_to_row()) {
      total_size += 1 + 4;
    }

  }
  // repeated .ViewpointSummaryMetadata.Contributor contributors = 2;
  {
    unsigned int count = this->contributors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contributors(i));
    }
  }

  // repeated .ViewpointSummaryMetadata.ActivityRow activities = 4;
  {
    unsigned int count = this->activities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activities(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewpointSummaryMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ViewpointSummaryMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ViewpointSummaryMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewpointSummaryMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ViewpointSummaryMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ViewpointSummaryMetadata)
    UnsafeMergeFrom(*source);
  }
}

void ViewpointSummaryMetadata::MergeFrom(const ViewpointSummaryMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ViewpointSummaryMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ViewpointSummaryMetadata::UnsafeMergeFrom(const ViewpointSummaryMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  contributors_.MergeFrom(from.contributors_);
  activities_.MergeFrom(from.activities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewpoint_id()) {
      set_viewpoint_id(from.viewpoint_id());
    }
    if (from.has_cover_photo()) {
      mutable_cover_photo()->::DayPhoto::MergeFrom(from.cover_photo());
    }
    if (from.has_earliest_timestamp()) {
      set_earliest_timestamp(from.earliest_timestamp());
    }
    if (from.has_latest_timestamp()) {
      set_latest_timestamp(from.latest_timestamp());
    }
    if (from.has_photo_count()) {
      set_photo_count(from.photo_count());
    }
    if (from.has_comment_count()) {
      set_comment_count(from.comment_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_photo_count()) {
      set_new_photo_count(from.new_photo_count());
    }
    if (from.has_new_comment_count()) {
      set_new_comment_count(from.new_comment_count());
    }
    if (from.has_provisional()) {
      set_provisional(from.provisional());
    }
    if (from.has_scroll_to_row()) {
      set_scroll_to_row(from.scroll_to_row());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ViewpointSummaryMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ViewpointSummaryMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewpointSummaryMetadata::CopyFrom(const ViewpointSummaryMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ViewpointSummaryMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ViewpointSummaryMetadata::IsInitialized() const {

  return true;
}

void ViewpointSummaryMetadata::Swap(ViewpointSummaryMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewpointSummaryMetadata::InternalSwap(ViewpointSummaryMetadata* other) {
  std::swap(viewpoint_id_, other->viewpoint_id_);
  contributors_.UnsafeArenaSwap(&other->contributors_);
  std::swap(cover_photo_, other->cover_photo_);
  activities_.UnsafeArenaSwap(&other->activities_);
  std::swap(earliest_timestamp_, other->earliest_timestamp_);
  std::swap(latest_timestamp_, other->latest_timestamp_);
  std::swap(photo_count_, other->photo_count_);
  std::swap(comment_count_, other->comment_count_);
  std::swap(new_photo_count_, other->new_photo_count_);
  std::swap(new_comment_count_, other->new_comment_count_);
  std::swap(provisional_, other->provisional_);
  std::swap(scroll_to_row_, other->scroll_to_row_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewpointSummaryMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewpointSummaryMetadata_descriptor_;
  metadata.reflection = ViewpointSummaryMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ViewpointSummaryMetadata_Contributor

// optional int64 user_id = 1;
bool ViewpointSummaryMetadata_Contributor::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ViewpointSummaryMetadata_Contributor::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ViewpointSummaryMetadata_Contributor::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ViewpointSummaryMetadata_Contributor::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 ViewpointSummaryMetadata_Contributor::user_id() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.Contributor.user_id)
  return user_id_;
}
void ViewpointSummaryMetadata_Contributor::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.Contributor.user_id)
}

// optional double update_seq = 2;
bool ViewpointSummaryMetadata_Contributor::has_update_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ViewpointSummaryMetadata_Contributor::set_has_update_seq() {
  _has_bits_[0] |= 0x00000002u;
}
void ViewpointSummaryMetadata_Contributor::clear_has_update_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
void ViewpointSummaryMetadata_Contributor::clear_update_seq() {
  update_seq_ = 0;
  clear_has_update_seq();
}
double ViewpointSummaryMetadata_Contributor::update_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.Contributor.update_seq)
  return update_seq_;
}
void ViewpointSummaryMetadata_Contributor::set_update_seq(double value) {
  set_has_update_seq();
  update_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.Contributor.update_seq)
}

// optional string identity = 3;
bool ViewpointSummaryMetadata_Contributor::has_identity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ViewpointSummaryMetadata_Contributor::set_has_identity() {
  _has_bits_[0] |= 0x00000004u;
}
void ViewpointSummaryMetadata_Contributor::clear_has_identity() {
  _has_bits_[0] &= ~0x00000004u;
}
void ViewpointSummaryMetadata_Contributor::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identity();
}
const ::std::string& ViewpointSummaryMetadata_Contributor::identity() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.Contributor.identity)
  return identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSummaryMetadata_Contributor::set_identity(const ::std::string& value) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.Contributor.identity)
}
void ViewpointSummaryMetadata_Contributor::set_identity(const char* value) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointSummaryMetadata.Contributor.identity)
}
void ViewpointSummaryMetadata_Contributor::set_identity(const char* value, size_t size) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointSummaryMetadata.Contributor.identity)
}
::std::string* ViewpointSummaryMetadata_Contributor::mutable_identity() {
  set_has_identity();
  // @@protoc_insertion_point(field_mutable:ViewpointSummaryMetadata.Contributor.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointSummaryMetadata_Contributor::release_identity() {
  // @@protoc_insertion_point(field_release:ViewpointSummaryMetadata.Contributor.identity)
  clear_has_identity();
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSummaryMetadata_Contributor::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    set_has_identity();
  } else {
    clear_has_identity();
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:ViewpointSummaryMetadata.Contributor.identity)
}

inline const ViewpointSummaryMetadata_Contributor* ViewpointSummaryMetadata_Contributor::internal_default_instance() {
  return &ViewpointSummaryMetadata_Contributor_default_instance_.get();
}
// -------------------------------------------------------------------

// ViewpointSummaryMetadata_ActivityRow_Photo

// optional int64 photo_id = 1;
bool ViewpointSummaryMetadata_ActivityRow_Photo::has_photo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::set_has_photo_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::clear_has_photo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
  clear_has_photo_id();
}
::google::protobuf::int64 ViewpointSummaryMetadata_ActivityRow_Photo::photo_id() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.Photo.photo_id)
  return photo_id_;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::set_photo_id(::google::protobuf::int64 value) {
  set_has_photo_id();
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.Photo.photo_id)
}

// optional int64 episode_id = 2;
bool ViewpointSummaryMetadata_ActivityRow_Photo::has_episode_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::set_has_episode_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::clear_episode_id() {
  episode_id_ = GOOGLE_LONGLONG(0);
  clear_has_episode_id();
}
::google::protobuf::int64 ViewpointSummaryMetadata_ActivityRow_Photo::episode_id() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.Photo.episode_id)
  return episode_id_;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::set_episode_id(::google::protobuf::int64 value) {
  set_has_episode_id();
  episode_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.Photo.episode_id)
}

// optional int64 parent_episode_id = 3;
bool ViewpointSummaryMetadata_ActivityRow_Photo::has_parent_episode_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::set_has_parent_episode_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::clear_has_parent_episode_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::clear_parent_episode_id() {
  parent_episode_id_ = GOOGLE_LONGLONG(0);
  clear_has_parent_episode_id();
}
::google::protobuf::int64 ViewpointSummaryMetadata_ActivityRow_Photo::parent_episode_id() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.Photo.parent_episode_id)
  return parent_episode_id_;
}
void ViewpointSummaryMetadata_ActivityRow_Photo::set_parent_episode_id(::google::protobuf::int64 value) {
  set_has_parent_episode_id();
  parent_episode_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.Photo.parent_episode_id)
}

inline const ViewpointSummaryMetadata_ActivityRow_Photo* ViewpointSummaryMetadata_ActivityRow_Photo::internal_default_instance() {
  return &ViewpointSummaryMetadata_ActivityRow_Photo_default_instance_.get();
}
// -------------------------------------------------------------------

// ViewpointSummaryMetadata_ActivityRow

// optional int64 activity_id = 1;
bool ViewpointSummaryMetadata_ActivityRow::has_activity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_activity_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_activity_id() {
  activity_id_ = GOOGLE_LONGLONG(0);
  clear_has_activity_id();
}
::google::protobuf::int64 ViewpointSummaryMetadata_ActivityRow::activity_id() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.activity_id)
  return activity_id_;
}
void ViewpointSummaryMetadata_ActivityRow::set_activity_id(::google::protobuf::int64 value) {
  set_has_activity_id();
  activity_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.activity_id)
}

// repeated int64 user_ids = 2;
int ViewpointSummaryMetadata_ActivityRow::user_ids_size() const {
  return user_ids_.size();
}
void ViewpointSummaryMetadata_ActivityRow::clear_user_ids() {
  user_ids_.Clear();
}
::google::protobuf::int64 ViewpointSummaryMetadata_ActivityRow::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.user_ids)
  return user_ids_.Get(index);
}
void ViewpointSummaryMetadata_ActivityRow::set_user_ids(int index, ::google::protobuf::int64 value) {
  user_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.user_ids)
}
void ViewpointSummaryMetadata_ActivityRow::add_user_ids(::google::protobuf::int64 value) {
  user_ids_.Add(value);
  // @@protoc_insertion_point(field_add:ViewpointSummaryMetadata.ActivityRow.user_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ViewpointSummaryMetadata_ActivityRow::user_ids() const {
  // @@protoc_insertion_point(field_list:ViewpointSummaryMetadata.ActivityRow.user_ids)
  return user_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ViewpointSummaryMetadata_ActivityRow::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:ViewpointSummaryMetadata.ActivityRow.user_ids)
  return &user_ids_;
}

// repeated string user_identities = 14;
int ViewpointSummaryMetadata_ActivityRow::user_identities_size() const {
  return user_identities_.size();
}
void ViewpointSummaryMetadata_ActivityRow::clear_user_identities() {
  user_identities_.Clear();
}
const ::std::string& ViewpointSummaryMetadata_ActivityRow::user_identities(int index) const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.user_identities)
  return user_identities_.Get(index);
}
::std::string* ViewpointSummaryMetadata_ActivityRow::mutable_user_identities(int index) {
  // @@protoc_insertion_point(field_mutable:ViewpointSummaryMetadata.ActivityRow.user_identities)
  return user_identities_.Mutable(index);
}
void ViewpointSummaryMetadata_ActivityRow::set_user_identities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.user_identities)
  user_identities_.Mutable(index)->assign(value);
}
void ViewpointSummaryMetadata_ActivityRow::set_user_identities(int index, const char* value) {
  user_identities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ViewpointSummaryMetadata.ActivityRow.user_identities)
}
void ViewpointSummaryMetadata_ActivityRow::set_user_identities(int index, const char* value, size_t size) {
  user_identities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ViewpointSummaryMetadata.ActivityRow.user_identities)
}
::std::string* ViewpointSummaryMetadata_ActivityRow::add_user_identities() {
  // @@protoc_insertion_point(field_add_mutable:ViewpointSummaryMetadata.ActivityRow.user_identities)
  return user_identities_.Add();
}
void ViewpointSummaryMetadata_ActivityRow::add_user_identities(const ::std::string& value) {
  user_identities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ViewpointSummaryMetadata.ActivityRow.user_identities)
}
void ViewpointSummaryMetadata_ActivityRow::add_user_identities(const char* value) {
  user_identities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ViewpointSummaryMetadata.ActivityRow.user_identities)
}
void ViewpointSummaryMetadata_ActivityRow::add_user_identities(const char* value, size_t size) {
  user_identities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ViewpointSummaryMetadata.ActivityRow.user_identities)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ViewpointSummaryMetadata_ActivityRow::user_identities() const {
  // @@protoc_insertion_point(field_list:ViewpointSummaryMetadata.ActivityRow.user_identities)
  return user_identities_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ViewpointSummaryMetadata_ActivityRow::mutable_user_identities() {
  // @@protoc_insertion_point(field_mutable_list:ViewpointSummaryMetadata.ActivityRow.user_identities)
  return &user_identities_;
}

// optional double timestamp = 3;
bool ViewpointSummaryMetadata_ActivityRow::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double ViewpointSummaryMetadata_ActivityRow::timestamp() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.timestamp)
  return timestamp_;
}
void ViewpointSummaryMetadata_ActivityRow::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.timestamp)
}

// optional .ViewpointSummaryMetadata.ActivityRowType type = 4;
bool ViewpointSummaryMetadata_ActivityRow::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ViewpointSummaryMetadata_ActivityRowType ViewpointSummaryMetadata_ActivityRow::type() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.type)
  return static_cast< ::ViewpointSummaryMetadata_ActivityRowType >(type_);
}
void ViewpointSummaryMetadata_ActivityRow::set_type(::ViewpointSummaryMetadata_ActivityRowType value) {
  assert(::ViewpointSummaryMetadata_ActivityRowType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.type)
}

// optional float height = 5;
bool ViewpointSummaryMetadata_ActivityRow::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_height() {
  height_ = 0;
  clear_has_height();
}
float ViewpointSummaryMetadata_ActivityRow::height() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.height)
  return height_;
}
void ViewpointSummaryMetadata_ActivityRow::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.height)
}

// optional float position = 6;
bool ViewpointSummaryMetadata_ActivityRow::has_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_position() {
  _has_bits_[0] |= 0x00000040u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_position() {
  _has_bits_[0] &= ~0x00000040u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_position() {
  position_ = 0;
  clear_has_position();
}
float ViewpointSummaryMetadata_ActivityRow::position() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.position)
  return position_;
}
void ViewpointSummaryMetadata_ActivityRow::set_position(float value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.position)
}

// optional int32 row_count = 7;
bool ViewpointSummaryMetadata_ActivityRow::has_row_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_row_count() {
  _has_bits_[0] |= 0x00000080u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_row_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_row_count() {
  row_count_ = 0;
  clear_has_row_count();
}
::google::protobuf::int32 ViewpointSummaryMetadata_ActivityRow::row_count() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.row_count)
  return row_count_;
}
void ViewpointSummaryMetadata_ActivityRow::set_row_count(::google::protobuf::int32 value) {
  set_has_row_count();
  row_count_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.row_count)
}

// optional int64 update_seq = 8;
bool ViewpointSummaryMetadata_ActivityRow::has_update_seq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_update_seq() {
  _has_bits_[0] |= 0x00000100u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_update_seq() {
  _has_bits_[0] &= ~0x00000100u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_update_seq() {
  update_seq_ = GOOGLE_LONGLONG(0);
  clear_has_update_seq();
}
::google::protobuf::int64 ViewpointSummaryMetadata_ActivityRow::update_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.update_seq)
  return update_seq_;
}
void ViewpointSummaryMetadata_ActivityRow::set_update_seq(::google::protobuf::int64 value) {
  set_has_update_seq();
  update_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.update_seq)
}

// optional bool pending = 9;
bool ViewpointSummaryMetadata_ActivityRow::has_pending() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_pending() {
  _has_bits_[0] |= 0x00000200u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_pending() {
  _has_bits_[0] &= ~0x00000200u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_pending() {
  pending_ = false;
  clear_has_pending();
}
bool ViewpointSummaryMetadata_ActivityRow::pending() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.pending)
  return pending_;
}
void ViewpointSummaryMetadata_ActivityRow::set_pending(bool value) {
  set_has_pending();
  pending_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.pending)
}

// optional int32 thread_type = 10;
bool ViewpointSummaryMetadata_ActivityRow::has_thread_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_thread_type() {
  _has_bits_[0] |= 0x00000400u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_thread_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_thread_type() {
  thread_type_ = 0;
  clear_has_thread_type();
}
::google::protobuf::int32 ViewpointSummaryMetadata_ActivityRow::thread_type() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.thread_type)
  return thread_type_;
}
void ViewpointSummaryMetadata_ActivityRow::set_thread_type(::google::protobuf::int32 value) {
  set_has_thread_type();
  thread_type_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.thread_type)
}

// repeated .ViewpointSummaryMetadata.ActivityRow.Photo photos = 11;
int ViewpointSummaryMetadata_ActivityRow::photos_size() const {
  return photos_.size();
}
void ViewpointSummaryMetadata_ActivityRow::clear_photos() {
  photos_.Clear();
}
const ::ViewpointSummaryMetadata_ActivityRow_Photo& ViewpointSummaryMetadata_ActivityRow::photos(int index) const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.photos)
  return photos_.Get(index);
}
::ViewpointSummaryMetadata_ActivityRow_Photo* ViewpointSummaryMetadata_ActivityRow::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:ViewpointSummaryMetadata.ActivityRow.photos)
  return photos_.Mutable(index);
}
::ViewpointSummaryMetadata_ActivityRow_Photo* ViewpointSummaryMetadata_ActivityRow::add_photos() {
  // @@protoc_insertion_point(field_add:ViewpointSummaryMetadata.ActivityRow.photos)
  return photos_.Add();
}
::google::protobuf::RepeatedPtrField< ::ViewpointSummaryMetadata_ActivityRow_Photo >*
ViewpointSummaryMetadata_ActivityRow::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:ViewpointSummaryMetadata.ActivityRow.photos)
  return &photos_;
}
const ::google::protobuf::RepeatedPtrField< ::ViewpointSummaryMetadata_ActivityRow_Photo >&
ViewpointSummaryMetadata_ActivityRow::photos() const {
  // @@protoc_insertion_point(field_list:ViewpointSummaryMetadata.ActivityRow.photos)
  return photos_;
}

// optional bool is_comment = 12;
bool ViewpointSummaryMetadata_ActivityRow::has_is_comment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_is_comment() {
  _has_bits_[0] |= 0x00001000u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_is_comment() {
  _has_bits_[0] &= ~0x00001000u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_is_comment() {
  is_comment_ = false;
  clear_has_is_comment();
}
bool ViewpointSummaryMetadata_ActivityRow::is_comment() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.is_comment)
  return is_comment_;
}
void ViewpointSummaryMetadata_ActivityRow::set_is_comment(bool value) {
  set_has_is_comment();
  is_comment_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.is_comment)
}

// optional bool is_provisional_hint = 13;
bool ViewpointSummaryMetadata_ActivityRow::has_is_provisional_hint() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ViewpointSummaryMetadata_ActivityRow::set_has_is_provisional_hint() {
  _has_bits_[0] |= 0x00002000u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_has_is_provisional_hint() {
  _has_bits_[0] &= ~0x00002000u;
}
void ViewpointSummaryMetadata_ActivityRow::clear_is_provisional_hint() {
  is_provisional_hint_ = false;
  clear_has_is_provisional_hint();
}
bool ViewpointSummaryMetadata_ActivityRow::is_provisional_hint() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.ActivityRow.is_provisional_hint)
  return is_provisional_hint_;
}
void ViewpointSummaryMetadata_ActivityRow::set_is_provisional_hint(bool value) {
  set_has_is_provisional_hint();
  is_provisional_hint_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.ActivityRow.is_provisional_hint)
}

inline const ViewpointSummaryMetadata_ActivityRow* ViewpointSummaryMetadata_ActivityRow::internal_default_instance() {
  return &ViewpointSummaryMetadata_ActivityRow_default_instance_.get();
}
// -------------------------------------------------------------------

// ViewpointSummaryMetadata

// optional int64 viewpoint_id = 1;
bool ViewpointSummaryMetadata::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ViewpointSummaryMetadata::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ViewpointSummaryMetadata::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ViewpointSummaryMetadata::clear_viewpoint_id() {
  viewpoint_id_ = GOOGLE_LONGLONG(0);
  clear_has_viewpoint_id();
}
::google::protobuf::int64 ViewpointSummaryMetadata::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.viewpoint_id)
  return viewpoint_id_;
}
void ViewpointSummaryMetadata::set_viewpoint_id(::google::protobuf::int64 value) {
  set_has_viewpoint_id();
  viewpoint_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.viewpoint_id)
}

// repeated .ViewpointSummaryMetadata.Contributor contributors = 2;
int ViewpointSummaryMetadata::contributors_size() const {
  return contributors_.size();
}
void ViewpointSummaryMetadata::clear_contributors() {
  contributors_.Clear();
}
const ::ViewpointSummaryMetadata_Contributor& ViewpointSummaryMetadata::contributors(int index) const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.contributors)
  return contributors_.Get(index);
}
::ViewpointSummaryMetadata_Contributor* ViewpointSummaryMetadata::mutable_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:ViewpointSummaryMetadata.contributors)
  return contributors_.Mutable(index);
}
::ViewpointSummaryMetadata_Contributor* ViewpointSummaryMetadata::add_contributors() {
  // @@protoc_insertion_point(field_add:ViewpointSummaryMetadata.contributors)
  return contributors_.Add();
}
::google::protobuf::RepeatedPtrField< ::ViewpointSummaryMetadata_Contributor >*
ViewpointSummaryMetadata::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:ViewpointSummaryMetadata.contributors)
  return &contributors_;
}
const ::google::protobuf::RepeatedPtrField< ::ViewpointSummaryMetadata_Contributor >&
ViewpointSummaryMetadata::contributors() const {
  // @@protoc_insertion_point(field_list:ViewpointSummaryMetadata.contributors)
  return contributors_;
}

// optional .DayPhoto cover_photo = 3;
bool ViewpointSummaryMetadata::has_cover_photo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ViewpointSummaryMetadata::set_has_cover_photo() {
  _has_bits_[0] |= 0x00000004u;
}
void ViewpointSummaryMetadata::clear_has_cover_photo() {
  _has_bits_[0] &= ~0x00000004u;
}
void ViewpointSummaryMetadata::clear_cover_photo() {
  if (cover_photo_ != NULL) cover_photo_->::DayPhoto::Clear();
  clear_has_cover_photo();
}
const ::DayPhoto& ViewpointSummaryMetadata::cover_photo() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.cover_photo)
  return cover_photo_ != NULL ? *cover_photo_
                         : *::DayPhoto::internal_default_instance();
}
::DayPhoto* ViewpointSummaryMetadata::mutable_cover_photo() {
  set_has_cover_photo();
  if (cover_photo_ == NULL) {
    cover_photo_ = new ::DayPhoto;
  }
  // @@protoc_insertion_point(field_mutable:ViewpointSummaryMetadata.cover_photo)
  return cover_photo_;
}
::DayPhoto* ViewpointSummaryMetadata::release_cover_photo() {
  // @@protoc_insertion_point(field_release:ViewpointSummaryMetadata.cover_photo)
  clear_has_cover_photo();
  ::DayPhoto* temp = cover_photo_;
  cover_photo_ = NULL;
  return temp;
}
void ViewpointSummaryMetadata::set_allocated_cover_photo(::DayPhoto* cover_photo) {
  delete cover_photo_;
  cover_photo_ = cover_photo;
  if (cover_photo) {
    set_has_cover_photo();
  } else {
    clear_has_cover_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:ViewpointSummaryMetadata.cover_photo)
}

// repeated .ViewpointSummaryMetadata.ActivityRow activities = 4;
int ViewpointSummaryMetadata::activities_size() const {
  return activities_.size();
}
void ViewpointSummaryMetadata::clear_activities() {
  activities_.Clear();
}
const ::ViewpointSummaryMetadata_ActivityRow& ViewpointSummaryMetadata::activities(int index) const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.activities)
  return activities_.Get(index);
}
::ViewpointSummaryMetadata_ActivityRow* ViewpointSummaryMetadata::mutable_activities(int index) {
  // @@protoc_insertion_point(field_mutable:ViewpointSummaryMetadata.activities)
  return activities_.Mutable(index);
}
::ViewpointSummaryMetadata_ActivityRow* ViewpointSummaryMetadata::add_activities() {
  // @@protoc_insertion_point(field_add:ViewpointSummaryMetadata.activities)
  return activities_.Add();
}
::google::protobuf::RepeatedPtrField< ::ViewpointSummaryMetadata_ActivityRow >*
ViewpointSummaryMetadata::mutable_activities() {
  // @@protoc_insertion_point(field_mutable_list:ViewpointSummaryMetadata.activities)
  return &activities_;
}
const ::google::protobuf::RepeatedPtrField< ::ViewpointSummaryMetadata_ActivityRow >&
ViewpointSummaryMetadata::activities() const {
  // @@protoc_insertion_point(field_list:ViewpointSummaryMetadata.activities)
  return activities_;
}

// optional double earliest_timestamp = 5;
bool ViewpointSummaryMetadata::has_earliest_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ViewpointSummaryMetadata::set_has_earliest_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void ViewpointSummaryMetadata::clear_has_earliest_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void ViewpointSummaryMetadata::clear_earliest_timestamp() {
  earliest_timestamp_ = 0;
  clear_has_earliest_timestamp();
}
double ViewpointSummaryMetadata::earliest_timestamp() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.earliest_timestamp)
  return earliest_timestamp_;
}
void ViewpointSummaryMetadata::set_earliest_timestamp(double value) {
  set_has_earliest_timestamp();
  earliest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.earliest_timestamp)
}

// optional double latest_timestamp = 6;
bool ViewpointSummaryMetadata::has_latest_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ViewpointSummaryMetadata::set_has_latest_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void ViewpointSummaryMetadata::clear_has_latest_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void ViewpointSummaryMetadata::clear_latest_timestamp() {
  latest_timestamp_ = 0;
  clear_has_latest_timestamp();
}
double ViewpointSummaryMetadata::latest_timestamp() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.latest_timestamp)
  return latest_timestamp_;
}
void ViewpointSummaryMetadata::set_latest_timestamp(double value) {
  set_has_latest_timestamp();
  latest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.latest_timestamp)
}

// optional int32 photo_count = 7;
bool ViewpointSummaryMetadata::has_photo_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ViewpointSummaryMetadata::set_has_photo_count() {
  _has_bits_[0] |= 0x00000040u;
}
void ViewpointSummaryMetadata::clear_has_photo_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void ViewpointSummaryMetadata::clear_photo_count() {
  photo_count_ = 0;
  clear_has_photo_count();
}
::google::protobuf::int32 ViewpointSummaryMetadata::photo_count() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.photo_count)
  return photo_count_;
}
void ViewpointSummaryMetadata::set_photo_count(::google::protobuf::int32 value) {
  set_has_photo_count();
  photo_count_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.photo_count)
}

// optional int32 comment_count = 8;
bool ViewpointSummaryMetadata::has_comment_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ViewpointSummaryMetadata::set_has_comment_count() {
  _has_bits_[0] |= 0x00000080u;
}
void ViewpointSummaryMetadata::clear_has_comment_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void ViewpointSummaryMetadata::clear_comment_count() {
  comment_count_ = 0;
  clear_has_comment_count();
}
::google::protobuf::int32 ViewpointSummaryMetadata::comment_count() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.comment_count)
  return comment_count_;
}
void ViewpointSummaryMetadata::set_comment_count(::google::protobuf::int32 value) {
  set_has_comment_count();
  comment_count_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.comment_count)
}

// optional int32 new_photo_count = 9;
bool ViewpointSummaryMetadata::has_new_photo_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ViewpointSummaryMetadata::set_has_new_photo_count() {
  _has_bits_[0] |= 0x00000100u;
}
void ViewpointSummaryMetadata::clear_has_new_photo_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void ViewpointSummaryMetadata::clear_new_photo_count() {
  new_photo_count_ = 0;
  clear_has_new_photo_count();
}
::google::protobuf::int32 ViewpointSummaryMetadata::new_photo_count() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.new_photo_count)
  return new_photo_count_;
}
void ViewpointSummaryMetadata::set_new_photo_count(::google::protobuf::int32 value) {
  set_has_new_photo_count();
  new_photo_count_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.new_photo_count)
}

// optional int32 new_comment_count = 10;
bool ViewpointSummaryMetadata::has_new_comment_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ViewpointSummaryMetadata::set_has_new_comment_count() {
  _has_bits_[0] |= 0x00000200u;
}
void ViewpointSummaryMetadata::clear_has_new_comment_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void ViewpointSummaryMetadata::clear_new_comment_count() {
  new_comment_count_ = 0;
  clear_has_new_comment_count();
}
::google::protobuf::int32 ViewpointSummaryMetadata::new_comment_count() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.new_comment_count)
  return new_comment_count_;
}
void ViewpointSummaryMetadata::set_new_comment_count(::google::protobuf::int32 value) {
  set_has_new_comment_count();
  new_comment_count_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.new_comment_count)
}

// optional bool provisional = 11;
bool ViewpointSummaryMetadata::has_provisional() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ViewpointSummaryMetadata::set_has_provisional() {
  _has_bits_[0] |= 0x00000400u;
}
void ViewpointSummaryMetadata::clear_has_provisional() {
  _has_bits_[0] &= ~0x00000400u;
}
void ViewpointSummaryMetadata::clear_provisional() {
  provisional_ = false;
  clear_has_provisional();
}
bool ViewpointSummaryMetadata::provisional() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.provisional)
  return provisional_;
}
void ViewpointSummaryMetadata::set_provisional(bool value) {
  set_has_provisional();
  provisional_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.provisional)
}

// optional float scroll_to_row = 12;
bool ViewpointSummaryMetadata::has_scroll_to_row() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ViewpointSummaryMetadata::set_has_scroll_to_row() {
  _has_bits_[0] |= 0x00000800u;
}
void ViewpointSummaryMetadata::clear_has_scroll_to_row() {
  _has_bits_[0] &= ~0x00000800u;
}
void ViewpointSummaryMetadata::clear_scroll_to_row() {
  scroll_to_row_ = 0;
  clear_has_scroll_to_row();
}
float ViewpointSummaryMetadata::scroll_to_row() const {
  // @@protoc_insertion_point(field_get:ViewpointSummaryMetadata.scroll_to_row)
  return scroll_to_row_;
}
void ViewpointSummaryMetadata::set_scroll_to_row(float value) {
  set_has_scroll_to_row();
  scroll_to_row_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSummaryMetadata.scroll_to_row)
}

inline const ViewpointSummaryMetadata* ViewpointSummaryMetadata::internal_default_instance() {
  return &ViewpointSummaryMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
