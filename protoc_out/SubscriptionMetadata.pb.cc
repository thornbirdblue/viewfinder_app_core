// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubscriptionMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SubscriptionMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LocalSubscriptionMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalSubscriptionMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerSubscriptionMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerSubscriptionMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SubscriptionMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SubscriptionMetadata_2eproto() {
  protobuf_AddDesc_SubscriptionMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SubscriptionMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  LocalSubscriptionMetadata_descriptor_ = file->message_type(0);
  static const int LocalSubscriptionMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSubscriptionMetadata, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSubscriptionMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSubscriptionMetadata, receipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSubscriptionMetadata, recorded_),
  };
  LocalSubscriptionMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalSubscriptionMetadata_descriptor_,
      LocalSubscriptionMetadata::internal_default_instance(),
      LocalSubscriptionMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSubscriptionMetadata, _has_bits_),
      -1,
      -1,
      sizeof(LocalSubscriptionMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalSubscriptionMetadata, _internal_metadata_));
  ServerSubscriptionMetadata_descriptor_ = file->message_type(1);
  static const int ServerSubscriptionMetadata_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSubscriptionMetadata, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSubscriptionMetadata, subscription_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSubscriptionMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSubscriptionMetadata, expiration_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSubscriptionMetadata, product_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSubscriptionMetadata, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSubscriptionMetadata, payment_type_),
  };
  ServerSubscriptionMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerSubscriptionMetadata_descriptor_,
      ServerSubscriptionMetadata::internal_default_instance(),
      ServerSubscriptionMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSubscriptionMetadata, _has_bits_),
      -1,
      -1,
      sizeof(ServerSubscriptionMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSubscriptionMetadata, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SubscriptionMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalSubscriptionMetadata_descriptor_, LocalSubscriptionMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerSubscriptionMetadata_descriptor_, ServerSubscriptionMetadata::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SubscriptionMetadata_2eproto() {
  LocalSubscriptionMetadata_default_instance_.Shutdown();
  delete LocalSubscriptionMetadata_reflection_;
  ServerSubscriptionMetadata_default_instance_.Shutdown();
  delete ServerSubscriptionMetadata_reflection_;
}

void protobuf_InitDefaults_SubscriptionMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  LocalSubscriptionMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ServerSubscriptionMetadata_default_instance_.DefaultConstruct();
  LocalSubscriptionMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServerSubscriptionMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_SubscriptionMetadata_2eproto_once_);
void protobuf_InitDefaults_SubscriptionMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_SubscriptionMetadata_2eproto_once_,
                 &protobuf_InitDefaults_SubscriptionMetadata_2eproto_impl);
}
void protobuf_AddDesc_SubscriptionMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_SubscriptionMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032SubscriptionMetadata.proto\"b\n\031LocalSub"
    "scriptionMetadata\022\017\n\007product\030\001 \001(\t\022\021\n\tti"
    "mestamp\030\002 \001(\001\022\017\n\007receipt\030\003 \001(\t\022\020\n\010record"
    "ed\030\004 \001(\010\"\265\001\n\032ServerSubscriptionMetadata\022"
    "\026\n\016transaction_id\030\001 \001(\t\022\027\n\017subscription_"
    "id\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\001\022\025\n\rexpiratio"
    "n_ts\030\004 \001(\001\022\024\n\014product_type\030\005 \001(\t\022\020\n\010quan"
    "tity\030\006 \001(\001\022\024\n\014payment_type\030\007 \001(\tB-\n\023co.v"
    "iewfinder.protoB\026SubscriptionMetadataPB", 359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SubscriptionMetadata.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SubscriptionMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SubscriptionMetadata_2eproto_once_);
void protobuf_AddDesc_SubscriptionMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SubscriptionMetadata_2eproto_once_,
                 &protobuf_AddDesc_SubscriptionMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SubscriptionMetadata_2eproto {
  StaticDescriptorInitializer_SubscriptionMetadata_2eproto() {
    protobuf_AddDesc_SubscriptionMetadata_2eproto();
  }
} static_descriptor_initializer_SubscriptionMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalSubscriptionMetadata::kProductFieldNumber;
const int LocalSubscriptionMetadata::kTimestampFieldNumber;
const int LocalSubscriptionMetadata::kReceiptFieldNumber;
const int LocalSubscriptionMetadata::kRecordedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalSubscriptionMetadata::LocalSubscriptionMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_SubscriptionMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:LocalSubscriptionMetadata)
}

void LocalSubscriptionMetadata::InitAsDefaultInstance() {
}

LocalSubscriptionMetadata::LocalSubscriptionMetadata(const LocalSubscriptionMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LocalSubscriptionMetadata)
}

void LocalSubscriptionMetadata::SharedCtor() {
  _cached_size_ = 0;
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receipt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&recorded_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(recorded_));
}

LocalSubscriptionMetadata::~LocalSubscriptionMetadata() {
  // @@protoc_insertion_point(destructor:LocalSubscriptionMetadata)
  SharedDtor();
}

void LocalSubscriptionMetadata::SharedDtor() {
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receipt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LocalSubscriptionMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalSubscriptionMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalSubscriptionMetadata_descriptor_;
}

const LocalSubscriptionMetadata& LocalSubscriptionMetadata::default_instance() {
  protobuf_InitDefaults_SubscriptionMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LocalSubscriptionMetadata> LocalSubscriptionMetadata_default_instance_;

LocalSubscriptionMetadata* LocalSubscriptionMetadata::New(::google::protobuf::Arena* arena) const {
  LocalSubscriptionMetadata* n = new LocalSubscriptionMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalSubscriptionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:LocalSubscriptionMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LocalSubscriptionMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LocalSubscriptionMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(timestamp_, recorded_);
    if (has_product()) {
      product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_receipt()) {
      receipt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LocalSubscriptionMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LocalSubscriptionMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LocalSubscriptionMetadata.product");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 2;
      case 2: {
        if (tag == 17) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_receipt;
        break;
      }

      // optional string receipt = 3;
      case 3: {
        if (tag == 26) {
         parse_receipt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receipt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receipt().data(), this->receipt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LocalSubscriptionMetadata.receipt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recorded;
        break;
      }

      // optional bool recorded = 4;
      case 4: {
        if (tag == 32) {
         parse_recorded:
          set_has_recorded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recorded_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LocalSubscriptionMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LocalSubscriptionMetadata)
  return false;
#undef DO_
}

void LocalSubscriptionMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LocalSubscriptionMetadata)
  // optional string product = 1;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LocalSubscriptionMetadata.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product(), output);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // optional string receipt = 3;
  if (has_receipt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receipt().data(), this->receipt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LocalSubscriptionMetadata.receipt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->receipt(), output);
  }

  // optional bool recorded = 4;
  if (has_recorded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->recorded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LocalSubscriptionMetadata)
}

::google::protobuf::uint8* LocalSubscriptionMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LocalSubscriptionMetadata)
  // optional string product = 1;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LocalSubscriptionMetadata.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product(), target);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // optional string receipt = 3;
  if (has_receipt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receipt().data(), this->receipt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LocalSubscriptionMetadata.receipt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->receipt(), target);
  }

  // optional bool recorded = 4;
  if (has_recorded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->recorded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LocalSubscriptionMetadata)
  return target;
}

size_t LocalSubscriptionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LocalSubscriptionMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string product = 1;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional double timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional string receipt = 3;
    if (has_receipt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receipt());
    }

    // optional bool recorded = 4;
    if (has_recorded()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalSubscriptionMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LocalSubscriptionMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LocalSubscriptionMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalSubscriptionMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LocalSubscriptionMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LocalSubscriptionMetadata)
    UnsafeMergeFrom(*source);
  }
}

void LocalSubscriptionMetadata::MergeFrom(const LocalSubscriptionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LocalSubscriptionMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LocalSubscriptionMetadata::UnsafeMergeFrom(const LocalSubscriptionMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product()) {
      set_has_product();
      product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_receipt()) {
      set_has_receipt();
      receipt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receipt_);
    }
    if (from.has_recorded()) {
      set_recorded(from.recorded());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void LocalSubscriptionMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LocalSubscriptionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalSubscriptionMetadata::CopyFrom(const LocalSubscriptionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LocalSubscriptionMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LocalSubscriptionMetadata::IsInitialized() const {

  return true;
}

void LocalSubscriptionMetadata::Swap(LocalSubscriptionMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalSubscriptionMetadata::InternalSwap(LocalSubscriptionMetadata* other) {
  product_.Swap(&other->product_);
  std::swap(timestamp_, other->timestamp_);
  receipt_.Swap(&other->receipt_);
  std::swap(recorded_, other->recorded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalSubscriptionMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalSubscriptionMetadata_descriptor_;
  metadata.reflection = LocalSubscriptionMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalSubscriptionMetadata

// optional string product = 1;
bool LocalSubscriptionMetadata::has_product() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalSubscriptionMetadata::set_has_product() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalSubscriptionMetadata::clear_has_product() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalSubscriptionMetadata::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product();
}
const ::std::string& LocalSubscriptionMetadata::product() const {
  // @@protoc_insertion_point(field_get:LocalSubscriptionMetadata.product)
  return product_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocalSubscriptionMetadata::set_product(const ::std::string& value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LocalSubscriptionMetadata.product)
}
void LocalSubscriptionMetadata::set_product(const char* value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LocalSubscriptionMetadata.product)
}
void LocalSubscriptionMetadata::set_product(const char* value, size_t size) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LocalSubscriptionMetadata.product)
}
::std::string* LocalSubscriptionMetadata::mutable_product() {
  set_has_product();
  // @@protoc_insertion_point(field_mutable:LocalSubscriptionMetadata.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocalSubscriptionMetadata::release_product() {
  // @@protoc_insertion_point(field_release:LocalSubscriptionMetadata.product)
  clear_has_product();
  return product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocalSubscriptionMetadata::set_allocated_product(::std::string* product) {
  if (product != NULL) {
    set_has_product();
  } else {
    clear_has_product();
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:LocalSubscriptionMetadata.product)
}

// optional double timestamp = 2;
bool LocalSubscriptionMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalSubscriptionMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalSubscriptionMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalSubscriptionMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double LocalSubscriptionMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:LocalSubscriptionMetadata.timestamp)
  return timestamp_;
}
void LocalSubscriptionMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LocalSubscriptionMetadata.timestamp)
}

// optional string receipt = 3;
bool LocalSubscriptionMetadata::has_receipt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalSubscriptionMetadata::set_has_receipt() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalSubscriptionMetadata::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalSubscriptionMetadata::clear_receipt() {
  receipt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_receipt();
}
const ::std::string& LocalSubscriptionMetadata::receipt() const {
  // @@protoc_insertion_point(field_get:LocalSubscriptionMetadata.receipt)
  return receipt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocalSubscriptionMetadata::set_receipt(const ::std::string& value) {
  set_has_receipt();
  receipt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LocalSubscriptionMetadata.receipt)
}
void LocalSubscriptionMetadata::set_receipt(const char* value) {
  set_has_receipt();
  receipt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LocalSubscriptionMetadata.receipt)
}
void LocalSubscriptionMetadata::set_receipt(const char* value, size_t size) {
  set_has_receipt();
  receipt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LocalSubscriptionMetadata.receipt)
}
::std::string* LocalSubscriptionMetadata::mutable_receipt() {
  set_has_receipt();
  // @@protoc_insertion_point(field_mutable:LocalSubscriptionMetadata.receipt)
  return receipt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocalSubscriptionMetadata::release_receipt() {
  // @@protoc_insertion_point(field_release:LocalSubscriptionMetadata.receipt)
  clear_has_receipt();
  return receipt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocalSubscriptionMetadata::set_allocated_receipt(::std::string* receipt) {
  if (receipt != NULL) {
    set_has_receipt();
  } else {
    clear_has_receipt();
  }
  receipt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receipt);
  // @@protoc_insertion_point(field_set_allocated:LocalSubscriptionMetadata.receipt)
}

// optional bool recorded = 4;
bool LocalSubscriptionMetadata::has_recorded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalSubscriptionMetadata::set_has_recorded() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalSubscriptionMetadata::clear_has_recorded() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalSubscriptionMetadata::clear_recorded() {
  recorded_ = false;
  clear_has_recorded();
}
bool LocalSubscriptionMetadata::recorded() const {
  // @@protoc_insertion_point(field_get:LocalSubscriptionMetadata.recorded)
  return recorded_;
}
void LocalSubscriptionMetadata::set_recorded(bool value) {
  set_has_recorded();
  recorded_ = value;
  // @@protoc_insertion_point(field_set:LocalSubscriptionMetadata.recorded)
}

inline const LocalSubscriptionMetadata* LocalSubscriptionMetadata::internal_default_instance() {
  return &LocalSubscriptionMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerSubscriptionMetadata::kTransactionIdFieldNumber;
const int ServerSubscriptionMetadata::kSubscriptionIdFieldNumber;
const int ServerSubscriptionMetadata::kTimestampFieldNumber;
const int ServerSubscriptionMetadata::kExpirationTsFieldNumber;
const int ServerSubscriptionMetadata::kProductTypeFieldNumber;
const int ServerSubscriptionMetadata::kQuantityFieldNumber;
const int ServerSubscriptionMetadata::kPaymentTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerSubscriptionMetadata::ServerSubscriptionMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_SubscriptionMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerSubscriptionMetadata)
}

void ServerSubscriptionMetadata::InitAsDefaultInstance() {
}

ServerSubscriptionMetadata::ServerSubscriptionMetadata(const ServerSubscriptionMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerSubscriptionMetadata)
}

void ServerSubscriptionMetadata::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(quantity_));
}

ServerSubscriptionMetadata::~ServerSubscriptionMetadata() {
  // @@protoc_insertion_point(destructor:ServerSubscriptionMetadata)
  SharedDtor();
}

void ServerSubscriptionMetadata::SharedDtor() {
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payment_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerSubscriptionMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerSubscriptionMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerSubscriptionMetadata_descriptor_;
}

const ServerSubscriptionMetadata& ServerSubscriptionMetadata::default_instance() {
  protobuf_InitDefaults_SubscriptionMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServerSubscriptionMetadata> ServerSubscriptionMetadata_default_instance_;

ServerSubscriptionMetadata* ServerSubscriptionMetadata::New(::google::protobuf::Arena* arena) const {
  ServerSubscriptionMetadata* n = new ServerSubscriptionMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerSubscriptionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerSubscriptionMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerSubscriptionMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerSubscriptionMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(timestamp_, quantity_);
    if (has_transaction_id()) {
      transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_subscription_id()) {
      subscription_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_product_type()) {
      product_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_payment_type()) {
      payment_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerSubscriptionMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerSubscriptionMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string transaction_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transaction_id().data(), this->transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ServerSubscriptionMetadata.transaction_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subscription_id;
        break;
      }

      // optional string subscription_id = 2;
      case 2: {
        if (tag == 18) {
         parse_subscription_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscription_id().data(), this->subscription_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ServerSubscriptionMetadata.subscription_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 3;
      case 3: {
        if (tag == 25) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_expiration_ts;
        break;
      }

      // optional double expiration_ts = 4;
      case 4: {
        if (tag == 33) {
         parse_expiration_ts:
          set_has_expiration_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &expiration_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_product_type;
        break;
      }

      // optional string product_type = 5;
      case 5: {
        if (tag == 42) {
         parse_product_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_type().data(), this->product_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ServerSubscriptionMetadata.product_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_quantity;
        break;
      }

      // optional double quantity = 6;
      case 6: {
        if (tag == 49) {
         parse_quantity:
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_payment_type;
        break;
      }

      // optional string payment_type = 7;
      case 7: {
        if (tag == 58) {
         parse_payment_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payment_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->payment_type().data(), this->payment_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ServerSubscriptionMetadata.payment_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerSubscriptionMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerSubscriptionMetadata)
  return false;
#undef DO_
}

void ServerSubscriptionMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerSubscriptionMetadata)
  // optional string transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerSubscriptionMetadata.transaction_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transaction_id(), output);
  }

  // optional string subscription_id = 2;
  if (has_subscription_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), this->subscription_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerSubscriptionMetadata.subscription_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subscription_id(), output);
  }

  // optional double timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  // optional double expiration_ts = 4;
  if (has_expiration_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->expiration_ts(), output);
  }

  // optional string product_type = 5;
  if (has_product_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_type().data(), this->product_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerSubscriptionMetadata.product_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->product_type(), output);
  }

  // optional double quantity = 6;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->quantity(), output);
  }

  // optional string payment_type = 7;
  if (has_payment_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payment_type().data(), this->payment_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerSubscriptionMetadata.payment_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->payment_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerSubscriptionMetadata)
}

::google::protobuf::uint8* ServerSubscriptionMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerSubscriptionMetadata)
  // optional string transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerSubscriptionMetadata.transaction_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transaction_id(), target);
  }

  // optional string subscription_id = 2;
  if (has_subscription_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscription_id().data(), this->subscription_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerSubscriptionMetadata.subscription_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subscription_id(), target);
  }

  // optional double timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  // optional double expiration_ts = 4;
  if (has_expiration_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->expiration_ts(), target);
  }

  // optional string product_type = 5;
  if (has_product_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_type().data(), this->product_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerSubscriptionMetadata.product_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->product_type(), target);
  }

  // optional double quantity = 6;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->quantity(), target);
  }

  // optional string payment_type = 7;
  if (has_payment_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payment_type().data(), this->payment_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerSubscriptionMetadata.payment_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->payment_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerSubscriptionMetadata)
  return target;
}

size_t ServerSubscriptionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerSubscriptionMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }

    // optional string subscription_id = 2;
    if (has_subscription_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subscription_id());
    }

    // optional double timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double expiration_ts = 4;
    if (has_expiration_ts()) {
      total_size += 1 + 8;
    }

    // optional string product_type = 5;
    if (has_product_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_type());
    }

    // optional double quantity = 6;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional string payment_type = 7;
    if (has_payment_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payment_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerSubscriptionMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerSubscriptionMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerSubscriptionMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerSubscriptionMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerSubscriptionMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerSubscriptionMetadata)
    UnsafeMergeFrom(*source);
  }
}

void ServerSubscriptionMetadata::MergeFrom(const ServerSubscriptionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerSubscriptionMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServerSubscriptionMetadata::UnsafeMergeFrom(const ServerSubscriptionMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_has_transaction_id();
      transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
    }
    if (from.has_subscription_id()) {
      set_has_subscription_id();
      subscription_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription_id_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_expiration_ts()) {
      set_expiration_ts(from.expiration_ts());
    }
    if (from.has_product_type()) {
      set_has_product_type();
      product_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_type_);
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_payment_type()) {
      set_has_payment_type();
      payment_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payment_type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ServerSubscriptionMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerSubscriptionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSubscriptionMetadata::CopyFrom(const ServerSubscriptionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerSubscriptionMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServerSubscriptionMetadata::IsInitialized() const {

  return true;
}

void ServerSubscriptionMetadata::Swap(ServerSubscriptionMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerSubscriptionMetadata::InternalSwap(ServerSubscriptionMetadata* other) {
  transaction_id_.Swap(&other->transaction_id_);
  subscription_id_.Swap(&other->subscription_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(expiration_ts_, other->expiration_ts_);
  product_type_.Swap(&other->product_type_);
  std::swap(quantity_, other->quantity_);
  payment_type_.Swap(&other->payment_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerSubscriptionMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerSubscriptionMetadata_descriptor_;
  metadata.reflection = ServerSubscriptionMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerSubscriptionMetadata

// optional string transaction_id = 1;
bool ServerSubscriptionMetadata::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerSubscriptionMetadata::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerSubscriptionMetadata::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerSubscriptionMetadata::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_id();
}
const ::std::string& ServerSubscriptionMetadata::transaction_id() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.transaction_id)
  return transaction_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerSubscriptionMetadata::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.transaction_id)
}
void ServerSubscriptionMetadata::set_transaction_id(const char* value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerSubscriptionMetadata.transaction_id)
}
void ServerSubscriptionMetadata::set_transaction_id(const char* value, size_t size) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerSubscriptionMetadata.transaction_id)
}
::std::string* ServerSubscriptionMetadata::mutable_transaction_id() {
  set_has_transaction_id();
  // @@protoc_insertion_point(field_mutable:ServerSubscriptionMetadata.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerSubscriptionMetadata::release_transaction_id() {
  // @@protoc_insertion_point(field_release:ServerSubscriptionMetadata.transaction_id)
  clear_has_transaction_id();
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerSubscriptionMetadata::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    set_has_transaction_id();
  } else {
    clear_has_transaction_id();
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:ServerSubscriptionMetadata.transaction_id)
}

// optional string subscription_id = 2;
bool ServerSubscriptionMetadata::has_subscription_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerSubscriptionMetadata::set_has_subscription_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerSubscriptionMetadata::clear_has_subscription_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerSubscriptionMetadata::clear_subscription_id() {
  subscription_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subscription_id();
}
const ::std::string& ServerSubscriptionMetadata::subscription_id() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.subscription_id)
  return subscription_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerSubscriptionMetadata::set_subscription_id(const ::std::string& value) {
  set_has_subscription_id();
  subscription_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.subscription_id)
}
void ServerSubscriptionMetadata::set_subscription_id(const char* value) {
  set_has_subscription_id();
  subscription_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerSubscriptionMetadata.subscription_id)
}
void ServerSubscriptionMetadata::set_subscription_id(const char* value, size_t size) {
  set_has_subscription_id();
  subscription_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerSubscriptionMetadata.subscription_id)
}
::std::string* ServerSubscriptionMetadata::mutable_subscription_id() {
  set_has_subscription_id();
  // @@protoc_insertion_point(field_mutable:ServerSubscriptionMetadata.subscription_id)
  return subscription_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerSubscriptionMetadata::release_subscription_id() {
  // @@protoc_insertion_point(field_release:ServerSubscriptionMetadata.subscription_id)
  clear_has_subscription_id();
  return subscription_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerSubscriptionMetadata::set_allocated_subscription_id(::std::string* subscription_id) {
  if (subscription_id != NULL) {
    set_has_subscription_id();
  } else {
    clear_has_subscription_id();
  }
  subscription_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription_id);
  // @@protoc_insertion_point(field_set_allocated:ServerSubscriptionMetadata.subscription_id)
}

// optional double timestamp = 3;
bool ServerSubscriptionMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerSubscriptionMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerSubscriptionMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerSubscriptionMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double ServerSubscriptionMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.timestamp)
  return timestamp_;
}
void ServerSubscriptionMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.timestamp)
}

// optional double expiration_ts = 4;
bool ServerSubscriptionMetadata::has_expiration_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerSubscriptionMetadata::set_has_expiration_ts() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerSubscriptionMetadata::clear_has_expiration_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerSubscriptionMetadata::clear_expiration_ts() {
  expiration_ts_ = 0;
  clear_has_expiration_ts();
}
double ServerSubscriptionMetadata::expiration_ts() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.expiration_ts)
  return expiration_ts_;
}
void ServerSubscriptionMetadata::set_expiration_ts(double value) {
  set_has_expiration_ts();
  expiration_ts_ = value;
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.expiration_ts)
}

// optional string product_type = 5;
bool ServerSubscriptionMetadata::has_product_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerSubscriptionMetadata::set_has_product_type() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerSubscriptionMetadata::clear_has_product_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerSubscriptionMetadata::clear_product_type() {
  product_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_type();
}
const ::std::string& ServerSubscriptionMetadata::product_type() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.product_type)
  return product_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerSubscriptionMetadata::set_product_type(const ::std::string& value) {
  set_has_product_type();
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.product_type)
}
void ServerSubscriptionMetadata::set_product_type(const char* value) {
  set_has_product_type();
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerSubscriptionMetadata.product_type)
}
void ServerSubscriptionMetadata::set_product_type(const char* value, size_t size) {
  set_has_product_type();
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerSubscriptionMetadata.product_type)
}
::std::string* ServerSubscriptionMetadata::mutable_product_type() {
  set_has_product_type();
  // @@protoc_insertion_point(field_mutable:ServerSubscriptionMetadata.product_type)
  return product_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerSubscriptionMetadata::release_product_type() {
  // @@protoc_insertion_point(field_release:ServerSubscriptionMetadata.product_type)
  clear_has_product_type();
  return product_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerSubscriptionMetadata::set_allocated_product_type(::std::string* product_type) {
  if (product_type != NULL) {
    set_has_product_type();
  } else {
    clear_has_product_type();
  }
  product_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_type);
  // @@protoc_insertion_point(field_set_allocated:ServerSubscriptionMetadata.product_type)
}

// optional double quantity = 6;
bool ServerSubscriptionMetadata::has_quantity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerSubscriptionMetadata::set_has_quantity() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerSubscriptionMetadata::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerSubscriptionMetadata::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
double ServerSubscriptionMetadata::quantity() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.quantity)
  return quantity_;
}
void ServerSubscriptionMetadata::set_quantity(double value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.quantity)
}

// optional string payment_type = 7;
bool ServerSubscriptionMetadata::has_payment_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServerSubscriptionMetadata::set_has_payment_type() {
  _has_bits_[0] |= 0x00000040u;
}
void ServerSubscriptionMetadata::clear_has_payment_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServerSubscriptionMetadata::clear_payment_type() {
  payment_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payment_type();
}
const ::std::string& ServerSubscriptionMetadata::payment_type() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.payment_type)
  return payment_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerSubscriptionMetadata::set_payment_type(const ::std::string& value) {
  set_has_payment_type();
  payment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.payment_type)
}
void ServerSubscriptionMetadata::set_payment_type(const char* value) {
  set_has_payment_type();
  payment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerSubscriptionMetadata.payment_type)
}
void ServerSubscriptionMetadata::set_payment_type(const char* value, size_t size) {
  set_has_payment_type();
  payment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerSubscriptionMetadata.payment_type)
}
::std::string* ServerSubscriptionMetadata::mutable_payment_type() {
  set_has_payment_type();
  // @@protoc_insertion_point(field_mutable:ServerSubscriptionMetadata.payment_type)
  return payment_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerSubscriptionMetadata::release_payment_type() {
  // @@protoc_insertion_point(field_release:ServerSubscriptionMetadata.payment_type)
  clear_has_payment_type();
  return payment_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerSubscriptionMetadata::set_allocated_payment_type(::std::string* payment_type) {
  if (payment_type != NULL) {
    set_has_payment_type();
  } else {
    clear_has_payment_type();
  }
  payment_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_type);
  // @@protoc_insertion_point(field_set_allocated:ServerSubscriptionMetadata.payment_type)
}

inline const ServerSubscriptionMetadata* ServerSubscriptionMetadata::internal_default_instance() {
  return &ServerSubscriptionMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
