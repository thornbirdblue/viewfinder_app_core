// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContentIds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ContentIds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ActivityId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommentId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommentId_reflection_ = NULL;
const ::google::protobuf::Descriptor* EpisodeId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EpisodeId_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewpointId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewpointId_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ContentIds_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ContentIds_2eproto() {
  protobuf_AddDesc_ContentIds_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ContentIds.proto");
  GOOGLE_CHECK(file != NULL);
  ActivityId_descriptor_ = file->message_type(0);
  static const int ActivityId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityId, local_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityId, server_id_),
  };
  ActivityId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityId_descriptor_,
      ActivityId::internal_default_instance(),
      ActivityId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityId, _has_bits_),
      -1,
      -1,
      sizeof(ActivityId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityId, _internal_metadata_));
  CommentId_descriptor_ = file->message_type(1);
  static const int CommentId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentId, local_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentId, server_id_),
  };
  CommentId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommentId_descriptor_,
      CommentId::internal_default_instance(),
      CommentId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentId, _has_bits_),
      -1,
      -1,
      sizeof(CommentId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentId, _internal_metadata_));
  EpisodeId_descriptor_ = file->message_type(2);
  static const int EpisodeId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeId, local_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeId, server_id_),
  };
  EpisodeId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EpisodeId_descriptor_,
      EpisodeId::internal_default_instance(),
      EpisodeId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeId, _has_bits_),
      -1,
      -1,
      sizeof(EpisodeId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeId, _internal_metadata_));
  PhotoId_descriptor_ = file->message_type(3);
  static const int PhotoId_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoId, local_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoId, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoId, deprecated_asset_key_),
  };
  PhotoId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhotoId_descriptor_,
      PhotoId::internal_default_instance(),
      PhotoId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoId, _has_bits_),
      -1,
      -1,
      sizeof(PhotoId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoId, _internal_metadata_));
  ViewpointId_descriptor_ = file->message_type(4);
  static const int ViewpointId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointId, local_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointId, server_id_),
  };
  ViewpointId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ViewpointId_descriptor_,
      ViewpointId::internal_default_instance(),
      ViewpointId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointId, _has_bits_),
      -1,
      -1,
      sizeof(ViewpointId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointId, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ContentIds_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityId_descriptor_, ActivityId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommentId_descriptor_, CommentId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EpisodeId_descriptor_, EpisodeId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhotoId_descriptor_, PhotoId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ViewpointId_descriptor_, ViewpointId::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ContentIds_2eproto() {
  ActivityId_default_instance_.Shutdown();
  delete ActivityId_reflection_;
  CommentId_default_instance_.Shutdown();
  delete CommentId_reflection_;
  EpisodeId_default_instance_.Shutdown();
  delete EpisodeId_reflection_;
  PhotoId_default_instance_.Shutdown();
  delete PhotoId_reflection_;
  ViewpointId_default_instance_.Shutdown();
  delete ViewpointId_reflection_;
}

void protobuf_InitDefaults_ContentIds_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ActivityId_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CommentId_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EpisodeId_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PhotoId_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ViewpointId_default_instance_.DefaultConstruct();
  ActivityId_default_instance_.get_mutable()->InitAsDefaultInstance();
  CommentId_default_instance_.get_mutable()->InitAsDefaultInstance();
  EpisodeId_default_instance_.get_mutable()->InitAsDefaultInstance();
  PhotoId_default_instance_.get_mutable()->InitAsDefaultInstance();
  ViewpointId_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ContentIds_2eproto_once_);
void protobuf_InitDefaults_ContentIds_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ContentIds_2eproto_once_,
                 &protobuf_InitDefaults_ContentIds_2eproto_impl);
}
void protobuf_AddDesc_ContentIds_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ContentIds_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ContentIds.proto\"1\n\nActivityId\022\020\n\010loca"
    "l_id\030\001 \001(\003\022\021\n\tserver_id\030\002 \001(\t\"0\n\tComment"
    "Id\022\020\n\010local_id\030\001 \001(\003\022\021\n\tserver_id\030\002 \001(\t\""
    "0\n\tEpisodeId\022\020\n\010local_id\030\001 \001(\003\022\021\n\tserver"
    "_id\030\002 \001(\t\"L\n\007PhotoId\022\020\n\010local_id\030\001 \001(\003\022\021"
    "\n\tserver_id\030\002 \001(\t\022\034\n\024DEPRECATED_asset_ke"
    "y\030\003 \001(\t\"2\n\013ViewpointId\022\020\n\010local_id\030\001 \001(\003"
    "\022\021\n\tserver_id\030\002 \001(\tB#\n\023co.viewfinder.pro"
    "toB\014ContentIdsPB", 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ContentIds.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ContentIds_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ContentIds_2eproto_once_);
void protobuf_AddDesc_ContentIds_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ContentIds_2eproto_once_,
                 &protobuf_AddDesc_ContentIds_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ContentIds_2eproto {
  StaticDescriptorInitializer_ContentIds_2eproto() {
    protobuf_AddDesc_ContentIds_2eproto();
  }
} static_descriptor_initializer_ContentIds_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityId::kLocalIdFieldNumber;
const int ActivityId::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityId::ActivityId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ContentIds_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityId)
}

void ActivityId::InitAsDefaultInstance() {
}

ActivityId::ActivityId(const ActivityId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityId)
}

void ActivityId::SharedCtor() {
  _cached_size_ = 0;
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_id_ = GOOGLE_LONGLONG(0);
}

ActivityId::~ActivityId() {
  // @@protoc_insertion_point(destructor:ActivityId)
  SharedDtor();
}

void ActivityId::SharedDtor() {
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActivityId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityId_descriptor_;
}

const ActivityId& ActivityId::default_instance() {
  protobuf_InitDefaults_ContentIds_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityId> ActivityId_default_instance_;

ActivityId* ActivityId::New(::google::protobuf::Arena* arena) const {
  ActivityId* n = new ActivityId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityId::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityId)
  if (_has_bits_[0 / 32] & 3u) {
    local_id_ = GOOGLE_LONGLONG(0);
    if (has_server_id()) {
      server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 local_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_local_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (tag == 18) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ActivityId.server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityId)
  return false;
#undef DO_
}

void ActivityId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->local_id(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ActivityId.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityId)
}

::google::protobuf::uint8* ActivityId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->local_id(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ActivityId.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityId)
  return target;
}

size_t ActivityId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityId)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 local_id = 1;
    if (has_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->local_id());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityId)
    UnsafeMergeFrom(*source);
  }
}

void ActivityId::MergeFrom(const ActivityId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityId::UnsafeMergeFrom(const ActivityId& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_id()) {
      set_local_id(from.local_id());
    }
    if (from.has_server_id()) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityId::CopyFrom(const ActivityId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityId::IsInitialized() const {

  return true;
}

void ActivityId::Swap(ActivityId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityId::InternalSwap(ActivityId* other) {
  std::swap(local_id_, other->local_id_);
  server_id_.Swap(&other->server_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityId_descriptor_;
  metadata.reflection = ActivityId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityId

// optional int64 local_id = 1;
bool ActivityId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivityId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivityId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivityId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
::google::protobuf::int64 ActivityId::local_id() const {
  // @@protoc_insertion_point(field_get:ActivityId.local_id)
  return local_id_;
}
void ActivityId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:ActivityId.local_id)
}

// optional string server_id = 2;
bool ActivityId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActivityId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ActivityId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActivityId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
const ::std::string& ActivityId::server_id() const {
  // @@protoc_insertion_point(field_get:ActivityId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActivityId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ActivityId.server_id)
}
void ActivityId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActivityId.server_id)
}
void ActivityId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActivityId.server_id)
}
::std::string* ActivityId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:ActivityId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActivityId::release_server_id() {
  // @@protoc_insertion_point(field_release:ActivityId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActivityId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:ActivityId.server_id)
}

inline const ActivityId* ActivityId::internal_default_instance() {
  return &ActivityId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommentId::kLocalIdFieldNumber;
const int CommentId::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommentId::CommentId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ContentIds_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommentId)
}

void CommentId::InitAsDefaultInstance() {
}

CommentId::CommentId(const CommentId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CommentId)
}

void CommentId::SharedCtor() {
  _cached_size_ = 0;
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_id_ = GOOGLE_LONGLONG(0);
}

CommentId::~CommentId() {
  // @@protoc_insertion_point(destructor:CommentId)
  SharedDtor();
}

void CommentId::SharedDtor() {
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommentId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommentId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentId_descriptor_;
}

const CommentId& CommentId::default_instance() {
  protobuf_InitDefaults_ContentIds_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CommentId> CommentId_default_instance_;

CommentId* CommentId::New(::google::protobuf::Arena* arena) const {
  CommentId* n = new CommentId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommentId::Clear() {
// @@protoc_insertion_point(message_clear_start:CommentId)
  if (_has_bits_[0 / 32] & 3u) {
    local_id_ = GOOGLE_LONGLONG(0);
    if (has_server_id()) {
      server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommentId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommentId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 local_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_local_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (tag == 18) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CommentId.server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommentId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommentId)
  return false;
#undef DO_
}

void CommentId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommentId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->local_id(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommentId.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommentId)
}

::google::protobuf::uint8* CommentId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CommentId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->local_id(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommentId.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommentId)
  return target;
}

size_t CommentId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommentId)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 local_id = 1;
    if (has_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->local_id());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommentId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommentId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommentId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommentId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommentId)
    UnsafeMergeFrom(*source);
  }
}

void CommentId::MergeFrom(const CommentId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommentId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CommentId::UnsafeMergeFrom(const CommentId& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_id()) {
      set_local_id(from.local_id());
    }
    if (from.has_server_id()) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CommentId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommentId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentId::CopyFrom(const CommentId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommentId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CommentId::IsInitialized() const {

  return true;
}

void CommentId::Swap(CommentId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommentId::InternalSwap(CommentId* other) {
  std::swap(local_id_, other->local_id_);
  server_id_.Swap(&other->server_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommentId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommentId_descriptor_;
  metadata.reflection = CommentId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommentId

// optional int64 local_id = 1;
bool CommentId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommentId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CommentId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommentId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
::google::protobuf::int64 CommentId::local_id() const {
  // @@protoc_insertion_point(field_get:CommentId.local_id)
  return local_id_;
}
void CommentId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:CommentId.local_id)
}

// optional string server_id = 2;
bool CommentId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommentId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CommentId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommentId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
const ::std::string& CommentId::server_id() const {
  // @@protoc_insertion_point(field_get:CommentId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommentId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommentId.server_id)
}
void CommentId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommentId.server_id)
}
void CommentId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommentId.server_id)
}
::std::string* CommentId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:CommentId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommentId::release_server_id() {
  // @@protoc_insertion_point(field_release:CommentId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommentId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:CommentId.server_id)
}

inline const CommentId* CommentId::internal_default_instance() {
  return &CommentId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpisodeId::kLocalIdFieldNumber;
const int EpisodeId::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpisodeId::EpisodeId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ContentIds_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:EpisodeId)
}

void EpisodeId::InitAsDefaultInstance() {
}

EpisodeId::EpisodeId(const EpisodeId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EpisodeId)
}

void EpisodeId::SharedCtor() {
  _cached_size_ = 0;
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_id_ = GOOGLE_LONGLONG(0);
}

EpisodeId::~EpisodeId() {
  // @@protoc_insertion_point(destructor:EpisodeId)
  SharedDtor();
}

void EpisodeId::SharedDtor() {
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EpisodeId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpisodeId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EpisodeId_descriptor_;
}

const EpisodeId& EpisodeId::default_instance() {
  protobuf_InitDefaults_ContentIds_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EpisodeId> EpisodeId_default_instance_;

EpisodeId* EpisodeId::New(::google::protobuf::Arena* arena) const {
  EpisodeId* n = new EpisodeId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EpisodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:EpisodeId)
  if (_has_bits_[0 / 32] & 3u) {
    local_id_ = GOOGLE_LONGLONG(0);
    if (has_server_id()) {
      server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EpisodeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EpisodeId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 local_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_local_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (tag == 18) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EpisodeId.server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EpisodeId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EpisodeId)
  return false;
#undef DO_
}

void EpisodeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EpisodeId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->local_id(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeId.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EpisodeId)
}

::google::protobuf::uint8* EpisodeId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EpisodeId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->local_id(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeId.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EpisodeId)
  return target;
}

size_t EpisodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EpisodeId)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 local_id = 1;
    if (has_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->local_id());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpisodeId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EpisodeId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EpisodeId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpisodeId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EpisodeId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EpisodeId)
    UnsafeMergeFrom(*source);
  }
}

void EpisodeId::MergeFrom(const EpisodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EpisodeId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EpisodeId::UnsafeMergeFrom(const EpisodeId& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_id()) {
      set_local_id(from.local_id());
    }
    if (from.has_server_id()) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EpisodeId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EpisodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpisodeId::CopyFrom(const EpisodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EpisodeId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EpisodeId::IsInitialized() const {

  return true;
}

void EpisodeId::Swap(EpisodeId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpisodeId::InternalSwap(EpisodeId* other) {
  std::swap(local_id_, other->local_id_);
  server_id_.Swap(&other->server_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EpisodeId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EpisodeId_descriptor_;
  metadata.reflection = EpisodeId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EpisodeId

// optional int64 local_id = 1;
bool EpisodeId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EpisodeId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EpisodeId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EpisodeId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
::google::protobuf::int64 EpisodeId::local_id() const {
  // @@protoc_insertion_point(field_get:EpisodeId.local_id)
  return local_id_;
}
void EpisodeId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:EpisodeId.local_id)
}

// optional string server_id = 2;
bool EpisodeId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EpisodeId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
void EpisodeId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void EpisodeId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
const ::std::string& EpisodeId::server_id() const {
  // @@protoc_insertion_point(field_get:EpisodeId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeId.server_id)
}
void EpisodeId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeId.server_id)
}
void EpisodeId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeId.server_id)
}
::std::string* EpisodeId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:EpisodeId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EpisodeId::release_server_id() {
  // @@protoc_insertion_point(field_release:EpisodeId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:EpisodeId.server_id)
}

inline const EpisodeId* EpisodeId::internal_default_instance() {
  return &EpisodeId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoId::kLocalIdFieldNumber;
const int PhotoId::kServerIdFieldNumber;
const int PhotoId::kDEPRECATEDAssetKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoId::PhotoId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ContentIds_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhotoId)
}

void PhotoId::InitAsDefaultInstance() {
}

PhotoId::PhotoId(const PhotoId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PhotoId)
}

void PhotoId::SharedCtor() {
  _cached_size_ = 0;
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_asset_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_id_ = GOOGLE_LONGLONG(0);
}

PhotoId::~PhotoId() {
  // @@protoc_insertion_point(destructor:PhotoId)
  SharedDtor();
}

void PhotoId::SharedDtor() {
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_asset_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhotoId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoId_descriptor_;
}

const PhotoId& PhotoId::default_instance() {
  protobuf_InitDefaults_ContentIds_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PhotoId> PhotoId_default_instance_;

PhotoId* PhotoId::New(::google::protobuf::Arena* arena) const {
  PhotoId* n = new PhotoId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoId::Clear() {
// @@protoc_insertion_point(message_clear_start:PhotoId)
  if (_has_bits_[0 / 32] & 7u) {
    local_id_ = GOOGLE_LONGLONG(0);
    if (has_server_id()) {
      server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_asset_key()) {
      deprecated_asset_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PhotoId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PhotoId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 local_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_local_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (tag == 18) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoId.server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DEPRECATED_asset_key;
        break;
      }

      // optional string DEPRECATED_asset_key = 3;
      case 3: {
        if (tag == 26) {
         parse_DEPRECATED_asset_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_asset_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_asset_key().data(), this->deprecated_asset_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PhotoId.DEPRECATED_asset_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PhotoId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PhotoId)
  return false;
#undef DO_
}

void PhotoId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PhotoId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->local_id(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoId.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  // optional string DEPRECATED_asset_key = 3;
  if (has_deprecated_asset_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_asset_key().data(), this->deprecated_asset_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoId.DEPRECATED_asset_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deprecated_asset_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PhotoId)
}

::google::protobuf::uint8* PhotoId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PhotoId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->local_id(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoId.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // optional string DEPRECATED_asset_key = 3;
  if (has_deprecated_asset_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_asset_key().data(), this->deprecated_asset_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PhotoId.DEPRECATED_asset_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deprecated_asset_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PhotoId)
  return target;
}

size_t PhotoId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhotoId)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 local_id = 1;
    if (has_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->local_id());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // optional string DEPRECATED_asset_key = 3;
    if (has_deprecated_asset_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_asset_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhotoId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhotoId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhotoId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhotoId)
    UnsafeMergeFrom(*source);
  }
}

void PhotoId::MergeFrom(const PhotoId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhotoId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PhotoId::UnsafeMergeFrom(const PhotoId& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_id()) {
      set_local_id(from.local_id());
    }
    if (from.has_server_id()) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
    if (from.has_deprecated_asset_key()) {
      set_has_deprecated_asset_key();
      deprecated_asset_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_asset_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PhotoId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhotoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoId::CopyFrom(const PhotoId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhotoId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PhotoId::IsInitialized() const {

  return true;
}

void PhotoId::Swap(PhotoId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoId::InternalSwap(PhotoId* other) {
  std::swap(local_id_, other->local_id_);
  server_id_.Swap(&other->server_id_);
  deprecated_asset_key_.Swap(&other->deprecated_asset_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoId_descriptor_;
  metadata.reflection = PhotoId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoId

// optional int64 local_id = 1;
bool PhotoId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PhotoId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PhotoId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PhotoId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
::google::protobuf::int64 PhotoId::local_id() const {
  // @@protoc_insertion_point(field_get:PhotoId.local_id)
  return local_id_;
}
void PhotoId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:PhotoId.local_id)
}

// optional string server_id = 2;
bool PhotoId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PhotoId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PhotoId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PhotoId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
const ::std::string& PhotoId::server_id() const {
  // @@protoc_insertion_point(field_get:PhotoId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoId.server_id)
}
void PhotoId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoId.server_id)
}
void PhotoId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoId.server_id)
}
::std::string* PhotoId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:PhotoId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoId::release_server_id() {
  // @@protoc_insertion_point(field_release:PhotoId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:PhotoId.server_id)
}

// optional string DEPRECATED_asset_key = 3;
bool PhotoId::has_deprecated_asset_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PhotoId::set_has_deprecated_asset_key() {
  _has_bits_[0] |= 0x00000004u;
}
void PhotoId::clear_has_deprecated_asset_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void PhotoId::clear_deprecated_asset_key() {
  deprecated_asset_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_asset_key();
}
const ::std::string& PhotoId::deprecated_asset_key() const {
  // @@protoc_insertion_point(field_get:PhotoId.DEPRECATED_asset_key)
  return deprecated_asset_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoId::set_deprecated_asset_key(const ::std::string& value) {
  set_has_deprecated_asset_key();
  deprecated_asset_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoId.DEPRECATED_asset_key)
}
void PhotoId::set_deprecated_asset_key(const char* value) {
  set_has_deprecated_asset_key();
  deprecated_asset_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoId.DEPRECATED_asset_key)
}
void PhotoId::set_deprecated_asset_key(const char* value, size_t size) {
  set_has_deprecated_asset_key();
  deprecated_asset_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoId.DEPRECATED_asset_key)
}
::std::string* PhotoId::mutable_deprecated_asset_key() {
  set_has_deprecated_asset_key();
  // @@protoc_insertion_point(field_mutable:PhotoId.DEPRECATED_asset_key)
  return deprecated_asset_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoId::release_deprecated_asset_key() {
  // @@protoc_insertion_point(field_release:PhotoId.DEPRECATED_asset_key)
  clear_has_deprecated_asset_key();
  return deprecated_asset_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoId::set_allocated_deprecated_asset_key(::std::string* deprecated_asset_key) {
  if (deprecated_asset_key != NULL) {
    set_has_deprecated_asset_key();
  } else {
    clear_has_deprecated_asset_key();
  }
  deprecated_asset_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_asset_key);
  // @@protoc_insertion_point(field_set_allocated:PhotoId.DEPRECATED_asset_key)
}

inline const PhotoId* PhotoId::internal_default_instance() {
  return &PhotoId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewpointId::kLocalIdFieldNumber;
const int ViewpointId::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewpointId::ViewpointId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ContentIds_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ViewpointId)
}

void ViewpointId::InitAsDefaultInstance() {
}

ViewpointId::ViewpointId(const ViewpointId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ViewpointId)
}

void ViewpointId::SharedCtor() {
  _cached_size_ = 0;
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_id_ = GOOGLE_LONGLONG(0);
}

ViewpointId::~ViewpointId() {
  // @@protoc_insertion_point(destructor:ViewpointId)
  SharedDtor();
}

void ViewpointId::SharedDtor() {
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ViewpointId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewpointId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewpointId_descriptor_;
}

const ViewpointId& ViewpointId::default_instance() {
  protobuf_InitDefaults_ContentIds_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ViewpointId> ViewpointId_default_instance_;

ViewpointId* ViewpointId::New(::google::protobuf::Arena* arena) const {
  ViewpointId* n = new ViewpointId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewpointId::Clear() {
// @@protoc_insertion_point(message_clear_start:ViewpointId)
  if (_has_bits_[0 / 32] & 3u) {
    local_id_ = GOOGLE_LONGLONG(0);
    if (has_server_id()) {
      server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ViewpointId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ViewpointId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 local_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_local_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (tag == 18) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointId.server_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ViewpointId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ViewpointId)
  return false;
#undef DO_
}

void ViewpointId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ViewpointId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->local_id(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointId.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ViewpointId)
}

::google::protobuf::uint8* ViewpointId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ViewpointId)
  // optional int64 local_id = 1;
  if (has_local_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->local_id(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointId.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ViewpointId)
  return target;
}

size_t ViewpointId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ViewpointId)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 local_id = 1;
    if (has_local_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->local_id());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewpointId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ViewpointId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ViewpointId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewpointId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ViewpointId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ViewpointId)
    UnsafeMergeFrom(*source);
  }
}

void ViewpointId::MergeFrom(const ViewpointId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ViewpointId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ViewpointId::UnsafeMergeFrom(const ViewpointId& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_id()) {
      set_local_id(from.local_id());
    }
    if (from.has_server_id()) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ViewpointId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ViewpointId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewpointId::CopyFrom(const ViewpointId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ViewpointId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ViewpointId::IsInitialized() const {

  return true;
}

void ViewpointId::Swap(ViewpointId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewpointId::InternalSwap(ViewpointId* other) {
  std::swap(local_id_, other->local_id_);
  server_id_.Swap(&other->server_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewpointId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewpointId_descriptor_;
  metadata.reflection = ViewpointId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ViewpointId

// optional int64 local_id = 1;
bool ViewpointId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ViewpointId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ViewpointId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ViewpointId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
::google::protobuf::int64 ViewpointId::local_id() const {
  // @@protoc_insertion_point(field_get:ViewpointId.local_id)
  return local_id_;
}
void ViewpointId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointId.local_id)
}

// optional string server_id = 2;
bool ViewpointId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ViewpointId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ViewpointId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ViewpointId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
const ::std::string& ViewpointId::server_id() const {
  // @@protoc_insertion_point(field_get:ViewpointId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointId.server_id)
}
void ViewpointId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointId.server_id)
}
void ViewpointId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointId.server_id)
}
::std::string* ViewpointId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:ViewpointId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointId::release_server_id() {
  // @@protoc_insertion_point(field_release:ViewpointId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:ViewpointId.server_id)
}

inline const ViewpointId* ViewpointId::internal_default_instance() {
  return &ViewpointId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
