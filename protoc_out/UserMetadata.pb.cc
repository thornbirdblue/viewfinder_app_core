// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UsageCategoryMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsageCategoryMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsageMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsageMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_UserMetadata_2eproto() {
  protobuf_AddDesc_UserMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  UsageCategoryMetadata_descriptor_ = file->message_type(0);
  static const int UsageCategoryMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageCategoryMetadata, num_photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageCategoryMetadata, tn_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageCategoryMetadata, med_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageCategoryMetadata, full_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageCategoryMetadata, orig_size_),
  };
  UsageCategoryMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UsageCategoryMetadata_descriptor_,
      UsageCategoryMetadata::internal_default_instance(),
      UsageCategoryMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageCategoryMetadata, _has_bits_),
      -1,
      -1,
      sizeof(UsageCategoryMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageCategoryMetadata, _internal_metadata_));
  UsageMetadata_descriptor_ = file->message_type(1);
  static const int UsageMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageMetadata, owned_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageMetadata, shared_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageMetadata, visible_to_),
  };
  UsageMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UsageMetadata_descriptor_,
      UsageMetadata::internal_default_instance(),
      UsageMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageMetadata, _has_bits_),
      -1,
      -1,
      sizeof(UsageMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsageMetadata, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UsageCategoryMetadata_descriptor_, UsageCategoryMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UsageMetadata_descriptor_, UsageMetadata::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserMetadata_2eproto() {
  UsageCategoryMetadata_default_instance_.Shutdown();
  delete UsageCategoryMetadata_reflection_;
  UsageMetadata_default_instance_.Shutdown();
  delete UsageMetadata_reflection_;
}

void protobuf_InitDefaults_UserMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  UsageCategoryMetadata_default_instance_.DefaultConstruct();
  UsageMetadata_default_instance_.DefaultConstruct();
  UsageCategoryMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  UsageMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_UserMetadata_2eproto_once_);
void protobuf_InitDefaults_UserMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_UserMetadata_2eproto_once_,
                 &protobuf_InitDefaults_UserMetadata_2eproto_impl);
}
void protobuf_AddDesc_UserMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_UserMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022UserMetadata.proto\"t\n\025UsageCategoryMet"
    "adata\022\022\n\nnum_photos\030\001 \001(\005\022\017\n\007tn_size\030\002 \001"
    "(\003\022\020\n\010med_size\030\003 \001(\003\022\021\n\tfull_size\030\004 \001(\003\022"
    "\021\n\torig_size\030\005 \001(\003\"\220\001\n\rUsageMetadata\022(\n\010"
    "owned_by\030\001 \001(\0132\026.UsageCategoryMetadata\022)"
    "\n\tshared_by\030\002 \001(\0132\026.UsageCategoryMetadat"
    "a\022*\n\nvisible_to\030\003 \001(\0132\026.UsageCategoryMet"
    "adataB&\n\023co.viewfinder.protoB\017UsageMetad"
    "ataPB", 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserMetadata.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_UserMetadata_2eproto_once_);
void protobuf_AddDesc_UserMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_UserMetadata_2eproto_once_,
                 &protobuf_AddDesc_UserMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserMetadata_2eproto {
  StaticDescriptorInitializer_UserMetadata_2eproto() {
    protobuf_AddDesc_UserMetadata_2eproto();
  }
} static_descriptor_initializer_UserMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UsageCategoryMetadata::kNumPhotosFieldNumber;
const int UsageCategoryMetadata::kTnSizeFieldNumber;
const int UsageCategoryMetadata::kMedSizeFieldNumber;
const int UsageCategoryMetadata::kFullSizeFieldNumber;
const int UsageCategoryMetadata::kOrigSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UsageCategoryMetadata::UsageCategoryMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_UserMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UsageCategoryMetadata)
}

void UsageCategoryMetadata::InitAsDefaultInstance() {
}

UsageCategoryMetadata::UsageCategoryMetadata(const UsageCategoryMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UsageCategoryMetadata)
}

void UsageCategoryMetadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tn_size_, 0, reinterpret_cast<char*>(&num_photos_) -
    reinterpret_cast<char*>(&tn_size_) + sizeof(num_photos_));
}

UsageCategoryMetadata::~UsageCategoryMetadata() {
  // @@protoc_insertion_point(destructor:UsageCategoryMetadata)
  SharedDtor();
}

void UsageCategoryMetadata::SharedDtor() {
}

void UsageCategoryMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsageCategoryMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsageCategoryMetadata_descriptor_;
}

const UsageCategoryMetadata& UsageCategoryMetadata::default_instance() {
  protobuf_InitDefaults_UserMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UsageCategoryMetadata> UsageCategoryMetadata_default_instance_;

UsageCategoryMetadata* UsageCategoryMetadata::New(::google::protobuf::Arena* arena) const {
  UsageCategoryMetadata* n = new UsageCategoryMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UsageCategoryMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:UsageCategoryMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UsageCategoryMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UsageCategoryMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tn_size_, num_photos_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UsageCategoryMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UsageCategoryMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_photos = 1;
      case 1: {
        if (tag == 8) {
          set_has_num_photos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_photos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tn_size;
        break;
      }

      // optional int64 tn_size = 2;
      case 2: {
        if (tag == 16) {
         parse_tn_size:
          set_has_tn_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tn_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_med_size;
        break;
      }

      // optional int64 med_size = 3;
      case 3: {
        if (tag == 24) {
         parse_med_size:
          set_has_med_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &med_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_full_size;
        break;
      }

      // optional int64 full_size = 4;
      case 4: {
        if (tag == 32) {
         parse_full_size:
          set_has_full_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &full_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_orig_size;
        break;
      }

      // optional int64 orig_size = 5;
      case 5: {
        if (tag == 40) {
         parse_orig_size:
          set_has_orig_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orig_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UsageCategoryMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UsageCategoryMetadata)
  return false;
#undef DO_
}

void UsageCategoryMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UsageCategoryMetadata)
  // optional int32 num_photos = 1;
  if (has_num_photos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_photos(), output);
  }

  // optional int64 tn_size = 2;
  if (has_tn_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tn_size(), output);
  }

  // optional int64 med_size = 3;
  if (has_med_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->med_size(), output);
  }

  // optional int64 full_size = 4;
  if (has_full_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->full_size(), output);
  }

  // optional int64 orig_size = 5;
  if (has_orig_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->orig_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UsageCategoryMetadata)
}

::google::protobuf::uint8* UsageCategoryMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UsageCategoryMetadata)
  // optional int32 num_photos = 1;
  if (has_num_photos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_photos(), target);
  }

  // optional int64 tn_size = 2;
  if (has_tn_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tn_size(), target);
  }

  // optional int64 med_size = 3;
  if (has_med_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->med_size(), target);
  }

  // optional int64 full_size = 4;
  if (has_full_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->full_size(), target);
  }

  // optional int64 orig_size = 5;
  if (has_orig_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->orig_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UsageCategoryMetadata)
  return target;
}

size_t UsageCategoryMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UsageCategoryMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 num_photos = 1;
    if (has_num_photos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_photos());
    }

    // optional int64 tn_size = 2;
    if (has_tn_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tn_size());
    }

    // optional int64 med_size = 3;
    if (has_med_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->med_size());
    }

    // optional int64 full_size = 4;
    if (has_full_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->full_size());
    }

    // optional int64 orig_size = 5;
    if (has_orig_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orig_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsageCategoryMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UsageCategoryMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UsageCategoryMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UsageCategoryMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UsageCategoryMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UsageCategoryMetadata)
    UnsafeMergeFrom(*source);
  }
}

void UsageCategoryMetadata::MergeFrom(const UsageCategoryMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UsageCategoryMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UsageCategoryMetadata::UnsafeMergeFrom(const UsageCategoryMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_photos()) {
      set_num_photos(from.num_photos());
    }
    if (from.has_tn_size()) {
      set_tn_size(from.tn_size());
    }
    if (from.has_med_size()) {
      set_med_size(from.med_size());
    }
    if (from.has_full_size()) {
      set_full_size(from.full_size());
    }
    if (from.has_orig_size()) {
      set_orig_size(from.orig_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UsageCategoryMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UsageCategoryMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsageCategoryMetadata::CopyFrom(const UsageCategoryMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UsageCategoryMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UsageCategoryMetadata::IsInitialized() const {

  return true;
}

void UsageCategoryMetadata::Swap(UsageCategoryMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UsageCategoryMetadata::InternalSwap(UsageCategoryMetadata* other) {
  std::swap(num_photos_, other->num_photos_);
  std::swap(tn_size_, other->tn_size_);
  std::swap(med_size_, other->med_size_);
  std::swap(full_size_, other->full_size_);
  std::swap(orig_size_, other->orig_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UsageCategoryMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsageCategoryMetadata_descriptor_;
  metadata.reflection = UsageCategoryMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UsageCategoryMetadata

// optional int32 num_photos = 1;
bool UsageCategoryMetadata::has_num_photos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UsageCategoryMetadata::set_has_num_photos() {
  _has_bits_[0] |= 0x00000001u;
}
void UsageCategoryMetadata::clear_has_num_photos() {
  _has_bits_[0] &= ~0x00000001u;
}
void UsageCategoryMetadata::clear_num_photos() {
  num_photos_ = 0;
  clear_has_num_photos();
}
::google::protobuf::int32 UsageCategoryMetadata::num_photos() const {
  // @@protoc_insertion_point(field_get:UsageCategoryMetadata.num_photos)
  return num_photos_;
}
void UsageCategoryMetadata::set_num_photos(::google::protobuf::int32 value) {
  set_has_num_photos();
  num_photos_ = value;
  // @@protoc_insertion_point(field_set:UsageCategoryMetadata.num_photos)
}

// optional int64 tn_size = 2;
bool UsageCategoryMetadata::has_tn_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UsageCategoryMetadata::set_has_tn_size() {
  _has_bits_[0] |= 0x00000002u;
}
void UsageCategoryMetadata::clear_has_tn_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void UsageCategoryMetadata::clear_tn_size() {
  tn_size_ = GOOGLE_LONGLONG(0);
  clear_has_tn_size();
}
::google::protobuf::int64 UsageCategoryMetadata::tn_size() const {
  // @@protoc_insertion_point(field_get:UsageCategoryMetadata.tn_size)
  return tn_size_;
}
void UsageCategoryMetadata::set_tn_size(::google::protobuf::int64 value) {
  set_has_tn_size();
  tn_size_ = value;
  // @@protoc_insertion_point(field_set:UsageCategoryMetadata.tn_size)
}

// optional int64 med_size = 3;
bool UsageCategoryMetadata::has_med_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UsageCategoryMetadata::set_has_med_size() {
  _has_bits_[0] |= 0x00000004u;
}
void UsageCategoryMetadata::clear_has_med_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void UsageCategoryMetadata::clear_med_size() {
  med_size_ = GOOGLE_LONGLONG(0);
  clear_has_med_size();
}
::google::protobuf::int64 UsageCategoryMetadata::med_size() const {
  // @@protoc_insertion_point(field_get:UsageCategoryMetadata.med_size)
  return med_size_;
}
void UsageCategoryMetadata::set_med_size(::google::protobuf::int64 value) {
  set_has_med_size();
  med_size_ = value;
  // @@protoc_insertion_point(field_set:UsageCategoryMetadata.med_size)
}

// optional int64 full_size = 4;
bool UsageCategoryMetadata::has_full_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UsageCategoryMetadata::set_has_full_size() {
  _has_bits_[0] |= 0x00000008u;
}
void UsageCategoryMetadata::clear_has_full_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void UsageCategoryMetadata::clear_full_size() {
  full_size_ = GOOGLE_LONGLONG(0);
  clear_has_full_size();
}
::google::protobuf::int64 UsageCategoryMetadata::full_size() const {
  // @@protoc_insertion_point(field_get:UsageCategoryMetadata.full_size)
  return full_size_;
}
void UsageCategoryMetadata::set_full_size(::google::protobuf::int64 value) {
  set_has_full_size();
  full_size_ = value;
  // @@protoc_insertion_point(field_set:UsageCategoryMetadata.full_size)
}

// optional int64 orig_size = 5;
bool UsageCategoryMetadata::has_orig_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UsageCategoryMetadata::set_has_orig_size() {
  _has_bits_[0] |= 0x00000010u;
}
void UsageCategoryMetadata::clear_has_orig_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void UsageCategoryMetadata::clear_orig_size() {
  orig_size_ = GOOGLE_LONGLONG(0);
  clear_has_orig_size();
}
::google::protobuf::int64 UsageCategoryMetadata::orig_size() const {
  // @@protoc_insertion_point(field_get:UsageCategoryMetadata.orig_size)
  return orig_size_;
}
void UsageCategoryMetadata::set_orig_size(::google::protobuf::int64 value) {
  set_has_orig_size();
  orig_size_ = value;
  // @@protoc_insertion_point(field_set:UsageCategoryMetadata.orig_size)
}

inline const UsageCategoryMetadata* UsageCategoryMetadata::internal_default_instance() {
  return &UsageCategoryMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UsageMetadata::kOwnedByFieldNumber;
const int UsageMetadata::kSharedByFieldNumber;
const int UsageMetadata::kVisibleToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UsageMetadata::UsageMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_UserMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UsageMetadata)
}

void UsageMetadata::InitAsDefaultInstance() {
  owned_by_ = const_cast< ::UsageCategoryMetadata*>(
      ::UsageCategoryMetadata::internal_default_instance());
  shared_by_ = const_cast< ::UsageCategoryMetadata*>(
      ::UsageCategoryMetadata::internal_default_instance());
  visible_to_ = const_cast< ::UsageCategoryMetadata*>(
      ::UsageCategoryMetadata::internal_default_instance());
}

UsageMetadata::UsageMetadata(const UsageMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UsageMetadata)
}

void UsageMetadata::SharedCtor() {
  _cached_size_ = 0;
  owned_by_ = NULL;
  shared_by_ = NULL;
  visible_to_ = NULL;
}

UsageMetadata::~UsageMetadata() {
  // @@protoc_insertion_point(destructor:UsageMetadata)
  SharedDtor();
}

void UsageMetadata::SharedDtor() {
  if (this != &UsageMetadata_default_instance_.get()) {
    delete owned_by_;
    delete shared_by_;
    delete visible_to_;
  }
}

void UsageMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsageMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsageMetadata_descriptor_;
}

const UsageMetadata& UsageMetadata::default_instance() {
  protobuf_InitDefaults_UserMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UsageMetadata> UsageMetadata_default_instance_;

UsageMetadata* UsageMetadata::New(::google::protobuf::Arena* arena) const {
  UsageMetadata* n = new UsageMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UsageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:UsageMetadata)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_owned_by()) {
      if (owned_by_ != NULL) owned_by_->::UsageCategoryMetadata::Clear();
    }
    if (has_shared_by()) {
      if (shared_by_ != NULL) shared_by_->::UsageCategoryMetadata::Clear();
    }
    if (has_visible_to()) {
      if (visible_to_ != NULL) visible_to_->::UsageCategoryMetadata::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UsageMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UsageMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UsageCategoryMetadata owned_by = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owned_by()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shared_by;
        break;
      }

      // optional .UsageCategoryMetadata shared_by = 2;
      case 2: {
        if (tag == 18) {
         parse_shared_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shared_by()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_visible_to;
        break;
      }

      // optional .UsageCategoryMetadata visible_to = 3;
      case 3: {
        if (tag == 26) {
         parse_visible_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visible_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UsageMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UsageMetadata)
  return false;
#undef DO_
}

void UsageMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UsageMetadata)
  // optional .UsageCategoryMetadata owned_by = 1;
  if (has_owned_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->owned_by_, output);
  }

  // optional .UsageCategoryMetadata shared_by = 2;
  if (has_shared_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shared_by_, output);
  }

  // optional .UsageCategoryMetadata visible_to = 3;
  if (has_visible_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->visible_to_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UsageMetadata)
}

::google::protobuf::uint8* UsageMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UsageMetadata)
  // optional .UsageCategoryMetadata owned_by = 1;
  if (has_owned_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->owned_by_, false, target);
  }

  // optional .UsageCategoryMetadata shared_by = 2;
  if (has_shared_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shared_by_, false, target);
  }

  // optional .UsageCategoryMetadata visible_to = 3;
  if (has_visible_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->visible_to_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UsageMetadata)
  return target;
}

size_t UsageMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UsageMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .UsageCategoryMetadata owned_by = 1;
    if (has_owned_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->owned_by_);
    }

    // optional .UsageCategoryMetadata shared_by = 2;
    if (has_shared_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shared_by_);
    }

    // optional .UsageCategoryMetadata visible_to = 3;
    if (has_visible_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->visible_to_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsageMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UsageMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UsageMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UsageMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UsageMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UsageMetadata)
    UnsafeMergeFrom(*source);
  }
}

void UsageMetadata::MergeFrom(const UsageMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UsageMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UsageMetadata::UnsafeMergeFrom(const UsageMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owned_by()) {
      mutable_owned_by()->::UsageCategoryMetadata::MergeFrom(from.owned_by());
    }
    if (from.has_shared_by()) {
      mutable_shared_by()->::UsageCategoryMetadata::MergeFrom(from.shared_by());
    }
    if (from.has_visible_to()) {
      mutable_visible_to()->::UsageCategoryMetadata::MergeFrom(from.visible_to());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UsageMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UsageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsageMetadata::CopyFrom(const UsageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UsageMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UsageMetadata::IsInitialized() const {

  return true;
}

void UsageMetadata::Swap(UsageMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UsageMetadata::InternalSwap(UsageMetadata* other) {
  std::swap(owned_by_, other->owned_by_);
  std::swap(shared_by_, other->shared_by_);
  std::swap(visible_to_, other->visible_to_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UsageMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsageMetadata_descriptor_;
  metadata.reflection = UsageMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UsageMetadata

// optional .UsageCategoryMetadata owned_by = 1;
bool UsageMetadata::has_owned_by() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UsageMetadata::set_has_owned_by() {
  _has_bits_[0] |= 0x00000001u;
}
void UsageMetadata::clear_has_owned_by() {
  _has_bits_[0] &= ~0x00000001u;
}
void UsageMetadata::clear_owned_by() {
  if (owned_by_ != NULL) owned_by_->::UsageCategoryMetadata::Clear();
  clear_has_owned_by();
}
const ::UsageCategoryMetadata& UsageMetadata::owned_by() const {
  // @@protoc_insertion_point(field_get:UsageMetadata.owned_by)
  return owned_by_ != NULL ? *owned_by_
                         : *::UsageCategoryMetadata::internal_default_instance();
}
::UsageCategoryMetadata* UsageMetadata::mutable_owned_by() {
  set_has_owned_by();
  if (owned_by_ == NULL) {
    owned_by_ = new ::UsageCategoryMetadata;
  }
  // @@protoc_insertion_point(field_mutable:UsageMetadata.owned_by)
  return owned_by_;
}
::UsageCategoryMetadata* UsageMetadata::release_owned_by() {
  // @@protoc_insertion_point(field_release:UsageMetadata.owned_by)
  clear_has_owned_by();
  ::UsageCategoryMetadata* temp = owned_by_;
  owned_by_ = NULL;
  return temp;
}
void UsageMetadata::set_allocated_owned_by(::UsageCategoryMetadata* owned_by) {
  delete owned_by_;
  owned_by_ = owned_by;
  if (owned_by) {
    set_has_owned_by();
  } else {
    clear_has_owned_by();
  }
  // @@protoc_insertion_point(field_set_allocated:UsageMetadata.owned_by)
}

// optional .UsageCategoryMetadata shared_by = 2;
bool UsageMetadata::has_shared_by() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UsageMetadata::set_has_shared_by() {
  _has_bits_[0] |= 0x00000002u;
}
void UsageMetadata::clear_has_shared_by() {
  _has_bits_[0] &= ~0x00000002u;
}
void UsageMetadata::clear_shared_by() {
  if (shared_by_ != NULL) shared_by_->::UsageCategoryMetadata::Clear();
  clear_has_shared_by();
}
const ::UsageCategoryMetadata& UsageMetadata::shared_by() const {
  // @@protoc_insertion_point(field_get:UsageMetadata.shared_by)
  return shared_by_ != NULL ? *shared_by_
                         : *::UsageCategoryMetadata::internal_default_instance();
}
::UsageCategoryMetadata* UsageMetadata::mutable_shared_by() {
  set_has_shared_by();
  if (shared_by_ == NULL) {
    shared_by_ = new ::UsageCategoryMetadata;
  }
  // @@protoc_insertion_point(field_mutable:UsageMetadata.shared_by)
  return shared_by_;
}
::UsageCategoryMetadata* UsageMetadata::release_shared_by() {
  // @@protoc_insertion_point(field_release:UsageMetadata.shared_by)
  clear_has_shared_by();
  ::UsageCategoryMetadata* temp = shared_by_;
  shared_by_ = NULL;
  return temp;
}
void UsageMetadata::set_allocated_shared_by(::UsageCategoryMetadata* shared_by) {
  delete shared_by_;
  shared_by_ = shared_by;
  if (shared_by) {
    set_has_shared_by();
  } else {
    clear_has_shared_by();
  }
  // @@protoc_insertion_point(field_set_allocated:UsageMetadata.shared_by)
}

// optional .UsageCategoryMetadata visible_to = 3;
bool UsageMetadata::has_visible_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UsageMetadata::set_has_visible_to() {
  _has_bits_[0] |= 0x00000004u;
}
void UsageMetadata::clear_has_visible_to() {
  _has_bits_[0] &= ~0x00000004u;
}
void UsageMetadata::clear_visible_to() {
  if (visible_to_ != NULL) visible_to_->::UsageCategoryMetadata::Clear();
  clear_has_visible_to();
}
const ::UsageCategoryMetadata& UsageMetadata::visible_to() const {
  // @@protoc_insertion_point(field_get:UsageMetadata.visible_to)
  return visible_to_ != NULL ? *visible_to_
                         : *::UsageCategoryMetadata::internal_default_instance();
}
::UsageCategoryMetadata* UsageMetadata::mutable_visible_to() {
  set_has_visible_to();
  if (visible_to_ == NULL) {
    visible_to_ = new ::UsageCategoryMetadata;
  }
  // @@protoc_insertion_point(field_mutable:UsageMetadata.visible_to)
  return visible_to_;
}
::UsageCategoryMetadata* UsageMetadata::release_visible_to() {
  // @@protoc_insertion_point(field_release:UsageMetadata.visible_to)
  clear_has_visible_to();
  ::UsageCategoryMetadata* temp = visible_to_;
  visible_to_ = NULL;
  return temp;
}
void UsageMetadata::set_allocated_visible_to(::UsageCategoryMetadata* visible_to) {
  delete visible_to_;
  visible_to_ = visible_to;
  if (visible_to) {
    set_has_visible_to();
  } else {
    clear_has_visible_to();
  }
  // @@protoc_insertion_point(field_set_allocated:UsageMetadata.visible_to)
}

inline const UsageMetadata* UsageMetadata::internal_default_instance() {
  return &UsageMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
