// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContactMetadata.proto

#ifndef PROTOBUF_ContactMetadata_2eproto__INCLUDED
#define PROTOBUF_ContactMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ContactMetadata_2eproto();
void protobuf_InitDefaults_ContactMetadata_2eproto();
void protobuf_AssignDesc_ContactMetadata_2eproto();
void protobuf_ShutdownFile_ContactMetadata_2eproto();

class ContactIdentityMetadata;
class ContactMetadata;
class ContactSourceMetadata;

// ===================================================================

class ContactIdentityMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContactIdentityMetadata) */ {
 public:
  ContactIdentityMetadata();
  virtual ~ContactIdentityMetadata();

  ContactIdentityMetadata(const ContactIdentityMetadata& from);

  inline ContactIdentityMetadata& operator=(const ContactIdentityMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactIdentityMetadata& default_instance();

  static const ContactIdentityMetadata* internal_default_instance();

  void Swap(ContactIdentityMetadata* other);

  // implements Message ----------------------------------------------

  inline ContactIdentityMetadata* New() const { return New(NULL); }

  ContactIdentityMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactIdentityMetadata& from);
  void MergeFrom(const ContactIdentityMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactIdentityMetadata* other);
  void UnsafeMergeFrom(const ContactIdentityMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string identity = 1;
  bool has_identity() const;
  void clear_identity();
  static const int kIdentityFieldNumber = 1;
  const ::std::string& identity() const;
  void set_identity(const ::std::string& value);
  void set_identity(const char* value);
  void set_identity(const char* value, size_t size);
  ::std::string* mutable_identity();
  ::std::string* release_identity();
  void set_allocated_identity(::std::string* identity);

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional int64 user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ContactIdentityMetadata)
 private:
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr identity_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int64 user_id_;
  friend void  protobuf_InitDefaults_ContactMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_ContactMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_ContactMetadata_2eproto();
  friend void protobuf_ShutdownFile_ContactMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ContactIdentityMetadata> ContactIdentityMetadata_default_instance_;

// -------------------------------------------------------------------

class ContactMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContactMetadata) */ {
 public:
  ContactMetadata();
  virtual ~ContactMetadata();

  ContactMetadata(const ContactMetadata& from);

  inline ContactMetadata& operator=(const ContactMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactMetadata& default_instance();

  static const ContactMetadata* internal_default_instance();

  void Swap(ContactMetadata* other);

  // implements Message ----------------------------------------------

  inline ContactMetadata* New() const { return New(NULL); }

  ContactMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactMetadata& from);
  void MergeFrom(const ContactMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactMetadata* other);
  void UnsafeMergeFrom(const ContactMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string primary_identity = 1;
  bool has_primary_identity() const;
  void clear_primary_identity();
  static const int kPrimaryIdentityFieldNumber = 1;
  const ::std::string& primary_identity() const;
  void set_primary_identity(const ::std::string& value);
  void set_primary_identity(const char* value);
  void set_primary_identity(const char* value, size_t size);
  ::std::string* mutable_primary_identity();
  ::std::string* release_primary_identity();
  void set_allocated_primary_identity(::std::string* primary_identity);

  // repeated .ContactIdentityMetadata identities = 16;
  int identities_size() const;
  void clear_identities();
  static const int kIdentitiesFieldNumber = 16;
  const ::ContactIdentityMetadata& identities(int index) const;
  ::ContactIdentityMetadata* mutable_identities(int index);
  ::ContactIdentityMetadata* add_identities();
  ::google::protobuf::RepeatedPtrField< ::ContactIdentityMetadata >*
      mutable_identities();
  const ::google::protobuf::RepeatedPtrField< ::ContactIdentityMetadata >&
      identities() const;

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string first_name = 6;
  bool has_first_name() const;
  void clear_first_name();
  static const int kFirstNameFieldNumber = 6;
  const ::std::string& first_name() const;
  void set_first_name(const ::std::string& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  ::std::string* mutable_first_name();
  ::std::string* release_first_name();
  void set_allocated_first_name(::std::string* first_name);

  // optional string last_name = 8;
  bool has_last_name() const;
  void clear_last_name();
  static const int kLastNameFieldNumber = 8;
  const ::std::string& last_name() const;
  void set_last_name(const ::std::string& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  ::std::string* mutable_last_name();
  ::std::string* release_last_name();
  void set_allocated_last_name(::std::string* last_name);

  // optional string nickname = 10;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 10;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // repeated string indexed_names = 4;
  int indexed_names_size() const;
  void clear_indexed_names();
  static const int kIndexedNamesFieldNumber = 4;
  const ::std::string& indexed_names(int index) const;
  ::std::string* mutable_indexed_names(int index);
  void set_indexed_names(int index, const ::std::string& value);
  void set_indexed_names(int index, const char* value);
  void set_indexed_names(int index, const char* value, size_t size);
  ::std::string* add_indexed_names();
  void add_indexed_names(const ::std::string& value);
  void add_indexed_names(const char* value);
  void add_indexed_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& indexed_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_indexed_names();

  // optional double creation_timestamp = 24;
  bool has_creation_timestamp() const;
  void clear_creation_timestamp();
  static const int kCreationTimestampFieldNumber = 24;
  double creation_timestamp() const;
  void set_creation_timestamp(double value);

  // optional string contact_id = 15;
  bool has_contact_id() const;
  void clear_contact_id();
  static const int kContactIdFieldNumber = 15;
  const ::std::string& contact_id() const;
  void set_contact_id(const ::std::string& value);
  void set_contact_id(const char* value);
  void set_contact_id(const char* value, size_t size);
  ::std::string* mutable_contact_id();
  ::std::string* release_contact_id();
  void set_allocated_contact_id(::std::string* contact_id);

  // optional string server_contact_id = 19;
  bool has_server_contact_id() const;
  void clear_server_contact_id();
  static const int kServerContactIdFieldNumber = 19;
  const ::std::string& server_contact_id() const;
  void set_server_contact_id(const ::std::string& value);
  void set_server_contact_id(const char* value);
  void set_server_contact_id(const char* value, size_t size);
  ::std::string* mutable_server_contact_id();
  ::std::string* release_server_contact_id();
  void set_allocated_server_contact_id(::std::string* server_contact_id);

  // optional int64 rank = 5;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 5;
  ::google::protobuf::int64 rank() const;
  void set_rank(::google::protobuf::int64 value);

  // optional string contact_source = 17;
  bool has_contact_source() const;
  void clear_contact_source();
  static const int kContactSourceFieldNumber = 17;
  const ::std::string& contact_source() const;
  void set_contact_source(const ::std::string& value);
  void set_contact_source(const char* value);
  void set_contact_source(const char* value, size_t size);
  ::std::string* mutable_contact_source();
  ::std::string* release_contact_source();
  void set_allocated_contact_source(::std::string* contact_source);

  // optional bool label_contact_removed = 22;
  bool has_label_contact_removed() const;
  void clear_label_contact_removed();
  static const int kLabelContactRemovedFieldNumber = 22;
  bool label_contact_removed() const;
  void set_label_contact_removed(bool value);

  // optional int64 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // optional int64 merged_with = 9;
  bool has_merged_with() const;
  void clear_merged_with();
  static const int kMergedWithFieldNumber = 9;
  ::google::protobuf::int64 merged_with() const;
  void set_merged_with(::google::protobuf::int64 value);

  // optional string email = 7;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 7;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string phone = 26;
  bool has_phone() const;
  void clear_phone();
  static const int kPhoneFieldNumber = 26;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // optional bool label_registered = 20;
  bool has_label_registered() const;
  void clear_label_registered();
  static const int kLabelRegisteredFieldNumber = 20;
  bool label_registered() const;
  void set_label_registered(bool value);

  // optional bool label_terminated = 21;
  bool has_label_terminated() const;
  void clear_label_terminated();
  static const int kLabelTerminatedFieldNumber = 21;
  bool label_terminated() const;
  void set_label_terminated(bool value);

  // optional bool label_friend = 23;
  bool has_label_friend() const;
  void clear_label_friend();
  static const int kLabelFriendFieldNumber = 23;
  bool label_friend() const;
  void set_label_friend(bool value);

  // optional bool label_system = 25;
  bool has_label_system() const;
  void clear_label_system();
  static const int kLabelSystemFieldNumber = 25;
  bool label_system() const;
  void set_label_system(bool value);

  // optional bool need_query_user = 18;
  bool has_need_query_user() const;
  void clear_need_query_user();
  static const int kNeedQueryUserFieldNumber = 18;
  bool need_query_user() const;
  void set_need_query_user(bool value);

  // optional bool deprecated_user_name = 11;
  bool has_deprecated_user_name() const;
  void clear_deprecated_user_name();
  static const int kDeprecatedUserNameFieldNumber = 11;
  bool deprecated_user_name() const;
  void set_deprecated_user_name(bool value);

  // optional bool deprecated_user_first_name = 12;
  bool has_deprecated_user_first_name() const;
  void clear_deprecated_user_first_name();
  static const int kDeprecatedUserFirstNameFieldNumber = 12;
  bool deprecated_user_first_name() const;
  void set_deprecated_user_first_name(bool value);

  // optional bool deprecated_user_last_name = 13;
  bool has_deprecated_user_last_name() const;
  void clear_deprecated_user_last_name();
  static const int kDeprecatedUserLastNameFieldNumber = 13;
  bool deprecated_user_last_name() const;
  void set_deprecated_user_last_name(bool value);

  // repeated string deprecated_identities = 14;
  int deprecated_identities_size() const;
  void clear_deprecated_identities();
  static const int kDeprecatedIdentitiesFieldNumber = 14;
  const ::std::string& deprecated_identities(int index) const;
  ::std::string* mutable_deprecated_identities(int index);
  void set_deprecated_identities(int index, const ::std::string& value);
  void set_deprecated_identities(int index, const char* value);
  void set_deprecated_identities(int index, const char* value, size_t size);
  ::std::string* add_deprecated_identities();
  void add_deprecated_identities(const ::std::string& value);
  void add_deprecated_identities(const char* value);
  void add_deprecated_identities(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& deprecated_identities() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deprecated_identities();

  // @@protoc_insertion_point(class_scope:ContactMetadata)
 private:
  inline void set_has_primary_identity();
  inline void clear_has_primary_identity();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_first_name();
  inline void clear_has_first_name();
  inline void set_has_last_name();
  inline void clear_has_last_name();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_creation_timestamp();
  inline void clear_has_creation_timestamp();
  inline void set_has_contact_id();
  inline void clear_has_contact_id();
  inline void set_has_server_contact_id();
  inline void clear_has_server_contact_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_contact_source();
  inline void clear_has_contact_source();
  inline void set_has_label_contact_removed();
  inline void clear_has_label_contact_removed();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_merged_with();
  inline void clear_has_merged_with();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_label_registered();
  inline void clear_has_label_registered();
  inline void set_has_label_terminated();
  inline void clear_has_label_terminated();
  inline void set_has_label_friend();
  inline void clear_has_label_friend();
  inline void set_has_label_system();
  inline void clear_has_label_system();
  inline void set_has_need_query_user();
  inline void clear_has_need_query_user();
  inline void set_has_deprecated_user_name();
  inline void clear_has_deprecated_user_name();
  inline void set_has_deprecated_user_first_name();
  inline void clear_has_deprecated_user_first_name();
  inline void set_has_deprecated_user_last_name();
  inline void clear_has_deprecated_user_last_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ContactIdentityMetadata > identities_;
  ::google::protobuf::RepeatedPtrField< ::std::string> indexed_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deprecated_identities_;
  ::google::protobuf::internal::ArenaStringPtr primary_identity_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr first_name_;
  ::google::protobuf::internal::ArenaStringPtr last_name_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr contact_id_;
  ::google::protobuf::internal::ArenaStringPtr server_contact_id_;
  ::google::protobuf::internal::ArenaStringPtr contact_source_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  double creation_timestamp_;
  ::google::protobuf::int64 rank_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 merged_with_;
  bool label_contact_removed_;
  bool label_registered_;
  bool label_terminated_;
  bool label_friend_;
  bool label_system_;
  bool need_query_user_;
  bool deprecated_user_name_;
  bool deprecated_user_first_name_;
  bool deprecated_user_last_name_;
  friend void  protobuf_InitDefaults_ContactMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_ContactMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_ContactMetadata_2eproto();
  friend void protobuf_ShutdownFile_ContactMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ContactMetadata> ContactMetadata_default_instance_;

// -------------------------------------------------------------------

class ContactSourceMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContactSourceMetadata) */ {
 public:
  ContactSourceMetadata();
  virtual ~ContactSourceMetadata();

  ContactSourceMetadata(const ContactSourceMetadata& from);

  inline ContactSourceMetadata& operator=(const ContactSourceMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactSourceMetadata& default_instance();

  static const ContactSourceMetadata* internal_default_instance();

  void Swap(ContactSourceMetadata* other);

  // implements Message ----------------------------------------------

  inline ContactSourceMetadata* New() const { return New(NULL); }

  ContactSourceMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContactSourceMetadata& from);
  void MergeFrom(const ContactSourceMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactSourceMetadata* other);
  void UnsafeMergeFrom(const ContactSourceMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double last_import_timestamp = 1;
  bool has_last_import_timestamp() const;
  void clear_last_import_timestamp();
  static const int kLastImportTimestampFieldNumber = 1;
  double last_import_timestamp() const;
  void set_last_import_timestamp(double value);

  // @@protoc_insertion_point(class_scope:ContactSourceMetadata)
 private:
  inline void set_has_last_import_timestamp();
  inline void clear_has_last_import_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double last_import_timestamp_;
  friend void  protobuf_InitDefaults_ContactMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_ContactMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_ContactMetadata_2eproto();
  friend void protobuf_ShutdownFile_ContactMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ContactSourceMetadata> ContactSourceMetadata_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactIdentityMetadata

// optional string identity = 1;
inline bool ContactIdentityMetadata::has_identity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactIdentityMetadata::set_has_identity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactIdentityMetadata::clear_has_identity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactIdentityMetadata::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identity();
}
inline const ::std::string& ContactIdentityMetadata::identity() const {
  // @@protoc_insertion_point(field_get:ContactIdentityMetadata.identity)
  return identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactIdentityMetadata::set_identity(const ::std::string& value) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactIdentityMetadata.identity)
}
inline void ContactIdentityMetadata::set_identity(const char* value) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactIdentityMetadata.identity)
}
inline void ContactIdentityMetadata::set_identity(const char* value, size_t size) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactIdentityMetadata.identity)
}
inline ::std::string* ContactIdentityMetadata::mutable_identity() {
  set_has_identity();
  // @@protoc_insertion_point(field_mutable:ContactIdentityMetadata.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactIdentityMetadata::release_identity() {
  // @@protoc_insertion_point(field_release:ContactIdentityMetadata.identity)
  clear_has_identity();
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactIdentityMetadata::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    set_has_identity();
  } else {
    clear_has_identity();
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:ContactIdentityMetadata.identity)
}

// optional string description = 2;
inline bool ContactIdentityMetadata::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactIdentityMetadata::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactIdentityMetadata::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactIdentityMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& ContactIdentityMetadata::description() const {
  // @@protoc_insertion_point(field_get:ContactIdentityMetadata.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactIdentityMetadata::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactIdentityMetadata.description)
}
inline void ContactIdentityMetadata::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactIdentityMetadata.description)
}
inline void ContactIdentityMetadata::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactIdentityMetadata.description)
}
inline ::std::string* ContactIdentityMetadata::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ContactIdentityMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactIdentityMetadata::release_description() {
  // @@protoc_insertion_point(field_release:ContactIdentityMetadata.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactIdentityMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ContactIdentityMetadata.description)
}

// optional int64 user_id = 3;
inline bool ContactIdentityMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactIdentityMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactIdentityMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactIdentityMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 ContactIdentityMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:ContactIdentityMetadata.user_id)
  return user_id_;
}
inline void ContactIdentityMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ContactIdentityMetadata.user_id)
}

inline const ContactIdentityMetadata* ContactIdentityMetadata::internal_default_instance() {
  return &ContactIdentityMetadata_default_instance_.get();
}
// -------------------------------------------------------------------

// ContactMetadata

// optional string primary_identity = 1;
inline bool ContactMetadata::has_primary_identity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactMetadata::set_has_primary_identity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactMetadata::clear_has_primary_identity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactMetadata::clear_primary_identity() {
  primary_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_identity();
}
inline const ::std::string& ContactMetadata::primary_identity() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.primary_identity)
  return primary_identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_primary_identity(const ::std::string& value) {
  set_has_primary_identity();
  primary_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.primary_identity)
}
inline void ContactMetadata::set_primary_identity(const char* value) {
  set_has_primary_identity();
  primary_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.primary_identity)
}
inline void ContactMetadata::set_primary_identity(const char* value, size_t size) {
  set_has_primary_identity();
  primary_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.primary_identity)
}
inline ::std::string* ContactMetadata::mutable_primary_identity() {
  set_has_primary_identity();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.primary_identity)
  return primary_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_primary_identity() {
  // @@protoc_insertion_point(field_release:ContactMetadata.primary_identity)
  clear_has_primary_identity();
  return primary_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_primary_identity(::std::string* primary_identity) {
  if (primary_identity != NULL) {
    set_has_primary_identity();
  } else {
    clear_has_primary_identity();
  }
  primary_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_identity);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.primary_identity)
}

// repeated .ContactIdentityMetadata identities = 16;
inline int ContactMetadata::identities_size() const {
  return identities_.size();
}
inline void ContactMetadata::clear_identities() {
  identities_.Clear();
}
inline const ::ContactIdentityMetadata& ContactMetadata::identities(int index) const {
  // @@protoc_insertion_point(field_get:ContactMetadata.identities)
  return identities_.Get(index);
}
inline ::ContactIdentityMetadata* ContactMetadata::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:ContactMetadata.identities)
  return identities_.Mutable(index);
}
inline ::ContactIdentityMetadata* ContactMetadata::add_identities() {
  // @@protoc_insertion_point(field_add:ContactMetadata.identities)
  return identities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ContactIdentityMetadata >*
ContactMetadata::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:ContactMetadata.identities)
  return &identities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ContactIdentityMetadata >&
ContactMetadata::identities() const {
  // @@protoc_insertion_point(field_list:ContactMetadata.identities)
  return identities_;
}

// optional string name = 3;
inline bool ContactMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ContactMetadata::name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.name)
}
inline void ContactMetadata::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.name)
}
inline void ContactMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.name)
}
inline ::std::string* ContactMetadata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_name() {
  // @@protoc_insertion_point(field_release:ContactMetadata.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.name)
}

// optional string first_name = 6;
inline bool ContactMetadata::has_first_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactMetadata::set_has_first_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactMetadata::clear_has_first_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactMetadata::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_name();
}
inline const ::std::string& ContactMetadata::first_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.first_name)
  return first_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_first_name(const ::std::string& value) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.first_name)
}
inline void ContactMetadata::set_first_name(const char* value) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.first_name)
}
inline void ContactMetadata::set_first_name(const char* value, size_t size) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.first_name)
}
inline ::std::string* ContactMetadata::mutable_first_name() {
  set_has_first_name();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.first_name)
  return first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_first_name() {
  // @@protoc_insertion_point(field_release:ContactMetadata.first_name)
  clear_has_first_name();
  return first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_first_name(::std::string* first_name) {
  if (first_name != NULL) {
    set_has_first_name();
  } else {
    clear_has_first_name();
  }
  first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.first_name)
}

// optional string last_name = 8;
inline bool ContactMetadata::has_last_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactMetadata::set_has_last_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactMetadata::clear_has_last_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactMetadata::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_name();
}
inline const ::std::string& ContactMetadata::last_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.last_name)
  return last_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_last_name(const ::std::string& value) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.last_name)
}
inline void ContactMetadata::set_last_name(const char* value) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.last_name)
}
inline void ContactMetadata::set_last_name(const char* value, size_t size) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.last_name)
}
inline ::std::string* ContactMetadata::mutable_last_name() {
  set_has_last_name();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.last_name)
  return last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_last_name() {
  // @@protoc_insertion_point(field_release:ContactMetadata.last_name)
  clear_has_last_name();
  return last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_last_name(::std::string* last_name) {
  if (last_name != NULL) {
    set_has_last_name();
  } else {
    clear_has_last_name();
  }
  last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.last_name)
}

// optional string nickname = 10;
inline bool ContactMetadata::has_nickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContactMetadata::set_has_nickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContactMetadata::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContactMetadata::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& ContactMetadata::nickname() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.nickname)
}
inline void ContactMetadata::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.nickname)
}
inline void ContactMetadata::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.nickname)
}
inline ::std::string* ContactMetadata::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_nickname() {
  // @@protoc_insertion_point(field_release:ContactMetadata.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.nickname)
}

// repeated string indexed_names = 4;
inline int ContactMetadata::indexed_names_size() const {
  return indexed_names_.size();
}
inline void ContactMetadata::clear_indexed_names() {
  indexed_names_.Clear();
}
inline const ::std::string& ContactMetadata::indexed_names(int index) const {
  // @@protoc_insertion_point(field_get:ContactMetadata.indexed_names)
  return indexed_names_.Get(index);
}
inline ::std::string* ContactMetadata::mutable_indexed_names(int index) {
  // @@protoc_insertion_point(field_mutable:ContactMetadata.indexed_names)
  return indexed_names_.Mutable(index);
}
inline void ContactMetadata::set_indexed_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ContactMetadata.indexed_names)
  indexed_names_.Mutable(index)->assign(value);
}
inline void ContactMetadata::set_indexed_names(int index, const char* value) {
  indexed_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContactMetadata.indexed_names)
}
inline void ContactMetadata::set_indexed_names(int index, const char* value, size_t size) {
  indexed_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.indexed_names)
}
inline ::std::string* ContactMetadata::add_indexed_names() {
  // @@protoc_insertion_point(field_add_mutable:ContactMetadata.indexed_names)
  return indexed_names_.Add();
}
inline void ContactMetadata::add_indexed_names(const ::std::string& value) {
  indexed_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContactMetadata.indexed_names)
}
inline void ContactMetadata::add_indexed_names(const char* value) {
  indexed_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContactMetadata.indexed_names)
}
inline void ContactMetadata::add_indexed_names(const char* value, size_t size) {
  indexed_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContactMetadata.indexed_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContactMetadata::indexed_names() const {
  // @@protoc_insertion_point(field_list:ContactMetadata.indexed_names)
  return indexed_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ContactMetadata::mutable_indexed_names() {
  // @@protoc_insertion_point(field_mutable_list:ContactMetadata.indexed_names)
  return &indexed_names_;
}

// optional double creation_timestamp = 24;
inline bool ContactMetadata::has_creation_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContactMetadata::set_has_creation_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContactMetadata::clear_has_creation_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContactMetadata::clear_creation_timestamp() {
  creation_timestamp_ = 0;
  clear_has_creation_timestamp();
}
inline double ContactMetadata::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.creation_timestamp)
  return creation_timestamp_;
}
inline void ContactMetadata::set_creation_timestamp(double value) {
  set_has_creation_timestamp();
  creation_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.creation_timestamp)
}

// optional string contact_id = 15;
inline bool ContactMetadata::has_contact_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContactMetadata::set_has_contact_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContactMetadata::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContactMetadata::clear_contact_id() {
  contact_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contact_id();
}
inline const ::std::string& ContactMetadata::contact_id() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.contact_id)
  return contact_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_contact_id(const ::std::string& value) {
  set_has_contact_id();
  contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.contact_id)
}
inline void ContactMetadata::set_contact_id(const char* value) {
  set_has_contact_id();
  contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.contact_id)
}
inline void ContactMetadata::set_contact_id(const char* value, size_t size) {
  set_has_contact_id();
  contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.contact_id)
}
inline ::std::string* ContactMetadata::mutable_contact_id() {
  set_has_contact_id();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.contact_id)
  return contact_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_contact_id() {
  // @@protoc_insertion_point(field_release:ContactMetadata.contact_id)
  clear_has_contact_id();
  return contact_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_contact_id(::std::string* contact_id) {
  if (contact_id != NULL) {
    set_has_contact_id();
  } else {
    clear_has_contact_id();
  }
  contact_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact_id);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.contact_id)
}

// optional string server_contact_id = 19;
inline bool ContactMetadata::has_server_contact_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ContactMetadata::set_has_server_contact_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ContactMetadata::clear_has_server_contact_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ContactMetadata::clear_server_contact_id() {
  server_contact_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_contact_id();
}
inline const ::std::string& ContactMetadata::server_contact_id() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.server_contact_id)
  return server_contact_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_server_contact_id(const ::std::string& value) {
  set_has_server_contact_id();
  server_contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.server_contact_id)
}
inline void ContactMetadata::set_server_contact_id(const char* value) {
  set_has_server_contact_id();
  server_contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.server_contact_id)
}
inline void ContactMetadata::set_server_contact_id(const char* value, size_t size) {
  set_has_server_contact_id();
  server_contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.server_contact_id)
}
inline ::std::string* ContactMetadata::mutable_server_contact_id() {
  set_has_server_contact_id();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.server_contact_id)
  return server_contact_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_server_contact_id() {
  // @@protoc_insertion_point(field_release:ContactMetadata.server_contact_id)
  clear_has_server_contact_id();
  return server_contact_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_server_contact_id(::std::string* server_contact_id) {
  if (server_contact_id != NULL) {
    set_has_server_contact_id();
  } else {
    clear_has_server_contact_id();
  }
  server_contact_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_contact_id);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.server_contact_id)
}

// optional int64 rank = 5;
inline bool ContactMetadata::has_rank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContactMetadata::set_has_rank() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContactMetadata::clear_has_rank() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContactMetadata::clear_rank() {
  rank_ = GOOGLE_LONGLONG(0);
  clear_has_rank();
}
inline ::google::protobuf::int64 ContactMetadata::rank() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.rank)
  return rank_;
}
inline void ContactMetadata::set_rank(::google::protobuf::int64 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.rank)
}

// optional string contact_source = 17;
inline bool ContactMetadata::has_contact_source() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ContactMetadata::set_has_contact_source() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ContactMetadata::clear_has_contact_source() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ContactMetadata::clear_contact_source() {
  contact_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contact_source();
}
inline const ::std::string& ContactMetadata::contact_source() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.contact_source)
  return contact_source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_contact_source(const ::std::string& value) {
  set_has_contact_source();
  contact_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.contact_source)
}
inline void ContactMetadata::set_contact_source(const char* value) {
  set_has_contact_source();
  contact_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.contact_source)
}
inline void ContactMetadata::set_contact_source(const char* value, size_t size) {
  set_has_contact_source();
  contact_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.contact_source)
}
inline ::std::string* ContactMetadata::mutable_contact_source() {
  set_has_contact_source();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.contact_source)
  return contact_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_contact_source() {
  // @@protoc_insertion_point(field_release:ContactMetadata.contact_source)
  clear_has_contact_source();
  return contact_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_contact_source(::std::string* contact_source) {
  if (contact_source != NULL) {
    set_has_contact_source();
  } else {
    clear_has_contact_source();
  }
  contact_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact_source);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.contact_source)
}

// optional bool label_contact_removed = 22;
inline bool ContactMetadata::has_label_contact_removed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ContactMetadata::set_has_label_contact_removed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ContactMetadata::clear_has_label_contact_removed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ContactMetadata::clear_label_contact_removed() {
  label_contact_removed_ = false;
  clear_has_label_contact_removed();
}
inline bool ContactMetadata::label_contact_removed() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_contact_removed)
  return label_contact_removed_;
}
inline void ContactMetadata::set_label_contact_removed(bool value) {
  set_has_label_contact_removed();
  label_contact_removed_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_contact_removed)
}

// optional int64 user_id = 2;
inline bool ContactMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ContactMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ContactMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ContactMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 ContactMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.user_id)
  return user_id_;
}
inline void ContactMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.user_id)
}

// optional int64 merged_with = 9;
inline bool ContactMetadata::has_merged_with() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ContactMetadata::set_has_merged_with() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ContactMetadata::clear_has_merged_with() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ContactMetadata::clear_merged_with() {
  merged_with_ = GOOGLE_LONGLONG(0);
  clear_has_merged_with();
}
inline ::google::protobuf::int64 ContactMetadata::merged_with() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.merged_with)
  return merged_with_;
}
inline void ContactMetadata::set_merged_with(::google::protobuf::int64 value) {
  set_has_merged_with();
  merged_with_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.merged_with)
}

// optional string email = 7;
inline bool ContactMetadata::has_email() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ContactMetadata::set_has_email() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ContactMetadata::clear_has_email() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ContactMetadata::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& ContactMetadata::email() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.email)
}
inline void ContactMetadata::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.email)
}
inline void ContactMetadata::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.email)
}
inline ::std::string* ContactMetadata::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_email() {
  // @@protoc_insertion_point(field_release:ContactMetadata.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.email)
}

// optional string phone = 26;
inline bool ContactMetadata::has_phone() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ContactMetadata::set_has_phone() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ContactMetadata::clear_has_phone() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ContactMetadata::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
inline const ::std::string& ContactMetadata::phone() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.phone)
  return phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.phone)
}
inline void ContactMetadata::set_phone(const char* value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.phone)
}
inline void ContactMetadata::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.phone)
}
inline ::std::string* ContactMetadata::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactMetadata::release_phone() {
  // @@protoc_insertion_point(field_release:ContactMetadata.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactMetadata::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.phone)
}

// optional bool label_registered = 20;
inline bool ContactMetadata::has_label_registered() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ContactMetadata::set_has_label_registered() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ContactMetadata::clear_has_label_registered() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ContactMetadata::clear_label_registered() {
  label_registered_ = false;
  clear_has_label_registered();
}
inline bool ContactMetadata::label_registered() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_registered)
  return label_registered_;
}
inline void ContactMetadata::set_label_registered(bool value) {
  set_has_label_registered();
  label_registered_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_registered)
}

// optional bool label_terminated = 21;
inline bool ContactMetadata::has_label_terminated() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ContactMetadata::set_has_label_terminated() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ContactMetadata::clear_has_label_terminated() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ContactMetadata::clear_label_terminated() {
  label_terminated_ = false;
  clear_has_label_terminated();
}
inline bool ContactMetadata::label_terminated() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_terminated)
  return label_terminated_;
}
inline void ContactMetadata::set_label_terminated(bool value) {
  set_has_label_terminated();
  label_terminated_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_terminated)
}

// optional bool label_friend = 23;
inline bool ContactMetadata::has_label_friend() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ContactMetadata::set_has_label_friend() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ContactMetadata::clear_has_label_friend() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ContactMetadata::clear_label_friend() {
  label_friend_ = false;
  clear_has_label_friend();
}
inline bool ContactMetadata::label_friend() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_friend)
  return label_friend_;
}
inline void ContactMetadata::set_label_friend(bool value) {
  set_has_label_friend();
  label_friend_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_friend)
}

// optional bool label_system = 25;
inline bool ContactMetadata::has_label_system() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ContactMetadata::set_has_label_system() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ContactMetadata::clear_has_label_system() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ContactMetadata::clear_label_system() {
  label_system_ = false;
  clear_has_label_system();
}
inline bool ContactMetadata::label_system() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_system)
  return label_system_;
}
inline void ContactMetadata::set_label_system(bool value) {
  set_has_label_system();
  label_system_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_system)
}

// optional bool need_query_user = 18;
inline bool ContactMetadata::has_need_query_user() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ContactMetadata::set_has_need_query_user() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ContactMetadata::clear_has_need_query_user() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ContactMetadata::clear_need_query_user() {
  need_query_user_ = false;
  clear_has_need_query_user();
}
inline bool ContactMetadata::need_query_user() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.need_query_user)
  return need_query_user_;
}
inline void ContactMetadata::set_need_query_user(bool value) {
  set_has_need_query_user();
  need_query_user_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.need_query_user)
}

// optional bool deprecated_user_name = 11;
inline bool ContactMetadata::has_deprecated_user_name() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ContactMetadata::set_has_deprecated_user_name() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ContactMetadata::clear_has_deprecated_user_name() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ContactMetadata::clear_deprecated_user_name() {
  deprecated_user_name_ = false;
  clear_has_deprecated_user_name();
}
inline bool ContactMetadata::deprecated_user_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.deprecated_user_name)
  return deprecated_user_name_;
}
inline void ContactMetadata::set_deprecated_user_name(bool value) {
  set_has_deprecated_user_name();
  deprecated_user_name_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.deprecated_user_name)
}

// optional bool deprecated_user_first_name = 12;
inline bool ContactMetadata::has_deprecated_user_first_name() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ContactMetadata::set_has_deprecated_user_first_name() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ContactMetadata::clear_has_deprecated_user_first_name() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ContactMetadata::clear_deprecated_user_first_name() {
  deprecated_user_first_name_ = false;
  clear_has_deprecated_user_first_name();
}
inline bool ContactMetadata::deprecated_user_first_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.deprecated_user_first_name)
  return deprecated_user_first_name_;
}
inline void ContactMetadata::set_deprecated_user_first_name(bool value) {
  set_has_deprecated_user_first_name();
  deprecated_user_first_name_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.deprecated_user_first_name)
}

// optional bool deprecated_user_last_name = 13;
inline bool ContactMetadata::has_deprecated_user_last_name() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ContactMetadata::set_has_deprecated_user_last_name() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ContactMetadata::clear_has_deprecated_user_last_name() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ContactMetadata::clear_deprecated_user_last_name() {
  deprecated_user_last_name_ = false;
  clear_has_deprecated_user_last_name();
}
inline bool ContactMetadata::deprecated_user_last_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.deprecated_user_last_name)
  return deprecated_user_last_name_;
}
inline void ContactMetadata::set_deprecated_user_last_name(bool value) {
  set_has_deprecated_user_last_name();
  deprecated_user_last_name_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.deprecated_user_last_name)
}

// repeated string deprecated_identities = 14;
inline int ContactMetadata::deprecated_identities_size() const {
  return deprecated_identities_.size();
}
inline void ContactMetadata::clear_deprecated_identities() {
  deprecated_identities_.Clear();
}
inline const ::std::string& ContactMetadata::deprecated_identities(int index) const {
  // @@protoc_insertion_point(field_get:ContactMetadata.deprecated_identities)
  return deprecated_identities_.Get(index);
}
inline ::std::string* ContactMetadata::mutable_deprecated_identities(int index) {
  // @@protoc_insertion_point(field_mutable:ContactMetadata.deprecated_identities)
  return deprecated_identities_.Mutable(index);
}
inline void ContactMetadata::set_deprecated_identities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ContactMetadata.deprecated_identities)
  deprecated_identities_.Mutable(index)->assign(value);
}
inline void ContactMetadata::set_deprecated_identities(int index, const char* value) {
  deprecated_identities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContactMetadata.deprecated_identities)
}
inline void ContactMetadata::set_deprecated_identities(int index, const char* value, size_t size) {
  deprecated_identities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.deprecated_identities)
}
inline ::std::string* ContactMetadata::add_deprecated_identities() {
  // @@protoc_insertion_point(field_add_mutable:ContactMetadata.deprecated_identities)
  return deprecated_identities_.Add();
}
inline void ContactMetadata::add_deprecated_identities(const ::std::string& value) {
  deprecated_identities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContactMetadata.deprecated_identities)
}
inline void ContactMetadata::add_deprecated_identities(const char* value) {
  deprecated_identities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContactMetadata.deprecated_identities)
}
inline void ContactMetadata::add_deprecated_identities(const char* value, size_t size) {
  deprecated_identities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContactMetadata.deprecated_identities)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContactMetadata::deprecated_identities() const {
  // @@protoc_insertion_point(field_list:ContactMetadata.deprecated_identities)
  return deprecated_identities_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ContactMetadata::mutable_deprecated_identities() {
  // @@protoc_insertion_point(field_mutable_list:ContactMetadata.deprecated_identities)
  return &deprecated_identities_;
}

inline const ContactMetadata* ContactMetadata::internal_default_instance() {
  return &ContactMetadata_default_instance_.get();
}
// -------------------------------------------------------------------

// ContactSourceMetadata

// optional double last_import_timestamp = 1;
inline bool ContactSourceMetadata::has_last_import_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactSourceMetadata::set_has_last_import_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactSourceMetadata::clear_has_last_import_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactSourceMetadata::clear_last_import_timestamp() {
  last_import_timestamp_ = 0;
  clear_has_last_import_timestamp();
}
inline double ContactSourceMetadata::last_import_timestamp() const {
  // @@protoc_insertion_point(field_get:ContactSourceMetadata.last_import_timestamp)
  return last_import_timestamp_;
}
inline void ContactSourceMetadata::set_last_import_timestamp(double value) {
  set_has_last_import_timestamp();
  last_import_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ContactSourceMetadata.last_import_timestamp)
}

inline const ContactSourceMetadata* ContactSourceMetadata::internal_default_instance() {
  return &ContactSourceMetadata_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ContactMetadata_2eproto__INCLUDED
