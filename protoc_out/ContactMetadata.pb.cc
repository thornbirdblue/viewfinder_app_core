// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContactMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ContactMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ContactIdentityMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactIdentityMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactSourceMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactSourceMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ContactMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ContactMetadata_2eproto() {
  protobuf_AddDesc_ContactMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ContactMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  ContactIdentityMetadata_descriptor_ = file->message_type(0);
  static const int ContactIdentityMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactIdentityMetadata, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactIdentityMetadata, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactIdentityMetadata, user_id_),
  };
  ContactIdentityMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContactIdentityMetadata_descriptor_,
      ContactIdentityMetadata::internal_default_instance(),
      ContactIdentityMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactIdentityMetadata, _has_bits_),
      -1,
      -1,
      sizeof(ContactIdentityMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactIdentityMetadata, _internal_metadata_));
  ContactMetadata_descriptor_ = file->message_type(1);
  static const int ContactMetadata_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, primary_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, identities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, last_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, indexed_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, creation_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, contact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, server_contact_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, contact_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, label_contact_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, merged_with_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, label_registered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, label_terminated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, label_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, label_system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, need_query_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, deprecated_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, deprecated_user_first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, deprecated_user_last_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, deprecated_identities_),
  };
  ContactMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContactMetadata_descriptor_,
      ContactMetadata::internal_default_instance(),
      ContactMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, _has_bits_),
      -1,
      -1,
      sizeof(ContactMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactMetadata, _internal_metadata_));
  ContactSourceMetadata_descriptor_ = file->message_type(2);
  static const int ContactSourceMetadata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSourceMetadata, last_import_timestamp_),
  };
  ContactSourceMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContactSourceMetadata_descriptor_,
      ContactSourceMetadata::internal_default_instance(),
      ContactSourceMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSourceMetadata, _has_bits_),
      -1,
      -1,
      sizeof(ContactSourceMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSourceMetadata, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ContactMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContactIdentityMetadata_descriptor_, ContactIdentityMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContactMetadata_descriptor_, ContactMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContactSourceMetadata_descriptor_, ContactSourceMetadata::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ContactMetadata_2eproto() {
  ContactIdentityMetadata_default_instance_.Shutdown();
  delete ContactIdentityMetadata_reflection_;
  ContactMetadata_default_instance_.Shutdown();
  delete ContactMetadata_reflection_;
  ContactSourceMetadata_default_instance_.Shutdown();
  delete ContactSourceMetadata_reflection_;
}

void protobuf_InitDefaults_ContactMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ContactIdentityMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ContactMetadata_default_instance_.DefaultConstruct();
  ContactSourceMetadata_default_instance_.DefaultConstruct();
  ContactIdentityMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  ContactMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  ContactSourceMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ContactMetadata_2eproto_once_);
void protobuf_InitDefaults_ContactMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ContactMetadata_2eproto_once_,
                 &protobuf_InitDefaults_ContactMetadata_2eproto_impl);
}
void protobuf_AddDesc_ContactMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ContactMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ContactMetadata.proto\"Q\n\027ContactIdenti"
    "tyMetadata\022\020\n\010identity\030\001 \001(\t\022\023\n\013descript"
    "ion\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\003\"\210\005\n\017ContactMe"
    "tadata\022\030\n\020primary_identity\030\001 \001(\t\022,\n\niden"
    "tities\030\020 \003(\0132\030.ContactIdentityMetadata\022\014"
    "\n\004name\030\003 \001(\t\022\022\n\nfirst_name\030\006 \001(\t\022\021\n\tlast"
    "_name\030\010 \001(\t\022\020\n\010nickname\030\n \001(\t\022\025\n\rindexed"
    "_names\030\004 \003(\t\022\032\n\022creation_timestamp\030\030 \001(\001"
    "\022\022\n\ncontact_id\030\017 \001(\t\022\031\n\021server_contact_i"
    "d\030\023 \001(\t\022\014\n\004rank\030\005 \001(\003\022\026\n\016contact_source\030"
    "\021 \001(\t\022\035\n\025label_contact_removed\030\026 \001(\010\022\017\n\007"
    "user_id\030\002 \001(\003\022\023\n\013merged_with\030\t \001(\003\022\r\n\005em"
    "ail\030\007 \001(\t\022\r\n\005phone\030\032 \001(\t\022\030\n\020label_regist"
    "ered\030\024 \001(\010\022\030\n\020label_terminated\030\025 \001(\010\022\024\n\014"
    "label_friend\030\027 \001(\010\022\024\n\014label_system\030\031 \001(\010"
    "\022\027\n\017need_query_user\030\022 \001(\010\022\034\n\024deprecated_"
    "user_name\030\013 \001(\010\022\"\n\032deprecated_user_first"
    "_name\030\014 \001(\010\022!\n\031deprecated_user_last_name"
    "\030\r \001(\010\022\035\n\025deprecated_identities\030\016 \003(\t\"6\n"
    "\025ContactSourceMetadata\022\035\n\025last_import_ti"
    "mestamp\030\001 \001(\001B(\n\023co.viewfinder.protoB\021Co"
    "ntactMetadataPB", 855);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ContactMetadata.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ContactMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ContactMetadata_2eproto_once_);
void protobuf_AddDesc_ContactMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ContactMetadata_2eproto_once_,
                 &protobuf_AddDesc_ContactMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ContactMetadata_2eproto {
  StaticDescriptorInitializer_ContactMetadata_2eproto() {
    protobuf_AddDesc_ContactMetadata_2eproto();
  }
} static_descriptor_initializer_ContactMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactIdentityMetadata::kIdentityFieldNumber;
const int ContactIdentityMetadata::kDescriptionFieldNumber;
const int ContactIdentityMetadata::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactIdentityMetadata::ContactIdentityMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ContactMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactIdentityMetadata)
}

void ContactIdentityMetadata::InitAsDefaultInstance() {
}

ContactIdentityMetadata::ContactIdentityMetadata(const ContactIdentityMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContactIdentityMetadata)
}

void ContactIdentityMetadata::SharedCtor() {
  _cached_size_ = 0;
  identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_LONGLONG(0);
}

ContactIdentityMetadata::~ContactIdentityMetadata() {
  // @@protoc_insertion_point(destructor:ContactIdentityMetadata)
  SharedDtor();
}

void ContactIdentityMetadata::SharedDtor() {
  identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContactIdentityMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactIdentityMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactIdentityMetadata_descriptor_;
}

const ContactIdentityMetadata& ContactIdentityMetadata::default_instance() {
  protobuf_InitDefaults_ContactMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ContactIdentityMetadata> ContactIdentityMetadata_default_instance_;

ContactIdentityMetadata* ContactIdentityMetadata::New(::google::protobuf::Arena* arena) const {
  ContactIdentityMetadata* n = new ContactIdentityMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactIdentityMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactIdentityMetadata)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_identity()) {
      identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    user_id_ = GOOGLE_LONGLONG(0);
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContactIdentityMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContactIdentityMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string identity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identity().data(), this->identity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactIdentityMetadata.identity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactIdentityMetadata.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContactIdentityMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContactIdentityMetadata)
  return false;
#undef DO_
}

void ContactIdentityMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContactIdentityMetadata)
  // optional string identity = 1;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactIdentityMetadata.identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identity(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactIdentityMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContactIdentityMetadata)
}

::google::protobuf::uint8* ContactIdentityMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContactIdentityMetadata)
  // optional string identity = 1;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactIdentityMetadata.identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identity(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactIdentityMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactIdentityMetadata)
  return target;
}

size_t ContactIdentityMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactIdentityMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identity());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactIdentityMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactIdentityMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContactIdentityMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContactIdentityMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactIdentityMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactIdentityMetadata)
    UnsafeMergeFrom(*source);
  }
}

void ContactIdentityMetadata::MergeFrom(const ContactIdentityMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactIdentityMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ContactIdentityMetadata::UnsafeMergeFrom(const ContactIdentityMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity()) {
      set_has_identity();
      identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ContactIdentityMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactIdentityMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactIdentityMetadata::CopyFrom(const ContactIdentityMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactIdentityMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ContactIdentityMetadata::IsInitialized() const {

  return true;
}

void ContactIdentityMetadata::Swap(ContactIdentityMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactIdentityMetadata::InternalSwap(ContactIdentityMetadata* other) {
  identity_.Swap(&other->identity_);
  description_.Swap(&other->description_);
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContactIdentityMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactIdentityMetadata_descriptor_;
  metadata.reflection = ContactIdentityMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactIdentityMetadata

// optional string identity = 1;
bool ContactIdentityMetadata::has_identity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContactIdentityMetadata::set_has_identity() {
  _has_bits_[0] |= 0x00000001u;
}
void ContactIdentityMetadata::clear_has_identity() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContactIdentityMetadata::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identity();
}
const ::std::string& ContactIdentityMetadata::identity() const {
  // @@protoc_insertion_point(field_get:ContactIdentityMetadata.identity)
  return identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactIdentityMetadata::set_identity(const ::std::string& value) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactIdentityMetadata.identity)
}
void ContactIdentityMetadata::set_identity(const char* value) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactIdentityMetadata.identity)
}
void ContactIdentityMetadata::set_identity(const char* value, size_t size) {
  set_has_identity();
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactIdentityMetadata.identity)
}
::std::string* ContactIdentityMetadata::mutable_identity() {
  set_has_identity();
  // @@protoc_insertion_point(field_mutable:ContactIdentityMetadata.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactIdentityMetadata::release_identity() {
  // @@protoc_insertion_point(field_release:ContactIdentityMetadata.identity)
  clear_has_identity();
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactIdentityMetadata::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    set_has_identity();
  } else {
    clear_has_identity();
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:ContactIdentityMetadata.identity)
}

// optional string description = 2;
bool ContactIdentityMetadata::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContactIdentityMetadata::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void ContactIdentityMetadata::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContactIdentityMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& ContactIdentityMetadata::description() const {
  // @@protoc_insertion_point(field_get:ContactIdentityMetadata.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactIdentityMetadata::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactIdentityMetadata.description)
}
void ContactIdentityMetadata::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactIdentityMetadata.description)
}
void ContactIdentityMetadata::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactIdentityMetadata.description)
}
::std::string* ContactIdentityMetadata::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ContactIdentityMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactIdentityMetadata::release_description() {
  // @@protoc_insertion_point(field_release:ContactIdentityMetadata.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactIdentityMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ContactIdentityMetadata.description)
}

// optional int64 user_id = 3;
bool ContactIdentityMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContactIdentityMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ContactIdentityMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContactIdentityMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 ContactIdentityMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:ContactIdentityMetadata.user_id)
  return user_id_;
}
void ContactIdentityMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ContactIdentityMetadata.user_id)
}

inline const ContactIdentityMetadata* ContactIdentityMetadata::internal_default_instance() {
  return &ContactIdentityMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactMetadata::kPrimaryIdentityFieldNumber;
const int ContactMetadata::kIdentitiesFieldNumber;
const int ContactMetadata::kNameFieldNumber;
const int ContactMetadata::kFirstNameFieldNumber;
const int ContactMetadata::kLastNameFieldNumber;
const int ContactMetadata::kNicknameFieldNumber;
const int ContactMetadata::kIndexedNamesFieldNumber;
const int ContactMetadata::kCreationTimestampFieldNumber;
const int ContactMetadata::kContactIdFieldNumber;
const int ContactMetadata::kServerContactIdFieldNumber;
const int ContactMetadata::kRankFieldNumber;
const int ContactMetadata::kContactSourceFieldNumber;
const int ContactMetadata::kLabelContactRemovedFieldNumber;
const int ContactMetadata::kUserIdFieldNumber;
const int ContactMetadata::kMergedWithFieldNumber;
const int ContactMetadata::kEmailFieldNumber;
const int ContactMetadata::kPhoneFieldNumber;
const int ContactMetadata::kLabelRegisteredFieldNumber;
const int ContactMetadata::kLabelTerminatedFieldNumber;
const int ContactMetadata::kLabelFriendFieldNumber;
const int ContactMetadata::kLabelSystemFieldNumber;
const int ContactMetadata::kNeedQueryUserFieldNumber;
const int ContactMetadata::kDeprecatedUserNameFieldNumber;
const int ContactMetadata::kDeprecatedUserFirstNameFieldNumber;
const int ContactMetadata::kDeprecatedUserLastNameFieldNumber;
const int ContactMetadata::kDeprecatedIdentitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactMetadata::ContactMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ContactMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactMetadata)
}

void ContactMetadata::InitAsDefaultInstance() {
}

ContactMetadata::ContactMetadata(const ContactMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContactMetadata)
}

void ContactMetadata::SharedCtor() {
  _cached_size_ = 0;
  primary_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_contact_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creation_timestamp_, 0, reinterpret_cast<char*>(&deprecated_user_last_name_) -
    reinterpret_cast<char*>(&creation_timestamp_) + sizeof(deprecated_user_last_name_));
}

ContactMetadata::~ContactMetadata() {
  // @@protoc_insertion_point(destructor:ContactMetadata)
  SharedDtor();
}

void ContactMetadata::SharedDtor() {
  primary_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_contact_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContactMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactMetadata_descriptor_;
}

const ContactMetadata& ContactMetadata::default_instance() {
  protobuf_InitDefaults_ContactMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ContactMetadata> ContactMetadata_default_instance_;

ContactMetadata* ContactMetadata::New(::google::protobuf::Arena* arena) const {
  ContactMetadata* n = new ContactMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ContactMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ContactMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 189u) {
    if (has_primary_identity()) {
      primary_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_first_name()) {
      first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_last_name()) {
      last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    creation_timestamp_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(rank_, label_contact_removed_);
    if (has_contact_id()) {
      contact_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_server_contact_id()) {
      server_contact_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contact_source()) {
      contact_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(label_registered_, deprecated_user_first_name_);
    if (has_phone()) {
      phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  deprecated_user_last_name_ = false;

#undef ZR_HELPER_
#undef ZR_

  identities_.Clear();
  indexed_names_.Clear();
  deprecated_identities_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContactMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContactMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string primary_identity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->primary_identity().data(), this->primary_identity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.primary_identity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_indexed_names;
        break;
      }

      // repeated string indexed_names = 4;
      case 4: {
        if (tag == 34) {
         parse_indexed_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_indexed_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->indexed_names(this->indexed_names_size() - 1).data(),
            this->indexed_names(this->indexed_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.indexed_names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_indexed_names;
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional int64 rank = 5;
      case 5: {
        if (tag == 40) {
         parse_rank:
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_first_name;
        break;
      }

      // optional string first_name = 6;
      case 6: {
        if (tag == 50) {
         parse_first_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_name().data(), this->first_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.first_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_email;
        break;
      }

      // optional string email = 7;
      case 7: {
        if (tag == 58) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_last_name;
        break;
      }

      // optional string last_name = 8;
      case 8: {
        if (tag == 66) {
         parse_last_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_name().data(), this->last_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.last_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_merged_with;
        break;
      }

      // optional int64 merged_with = 9;
      case 9: {
        if (tag == 72) {
         parse_merged_with:
          set_has_merged_with();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &merged_with_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_nickname;
        break;
      }

      // optional string nickname = 10;
      case 10: {
        if (tag == 82) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_deprecated_user_name;
        break;
      }

      // optional bool deprecated_user_name = 11;
      case 11: {
        if (tag == 88) {
         parse_deprecated_user_name:
          set_has_deprecated_user_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_user_name_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_deprecated_user_first_name;
        break;
      }

      // optional bool deprecated_user_first_name = 12;
      case 12: {
        if (tag == 96) {
         parse_deprecated_user_first_name:
          set_has_deprecated_user_first_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_user_first_name_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_deprecated_user_last_name;
        break;
      }

      // optional bool deprecated_user_last_name = 13;
      case 13: {
        if (tag == 104) {
         parse_deprecated_user_last_name:
          set_has_deprecated_user_last_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_user_last_name_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_deprecated_identities;
        break;
      }

      // repeated string deprecated_identities = 14;
      case 14: {
        if (tag == 114) {
         parse_deprecated_identities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deprecated_identities()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_identities(this->deprecated_identities_size() - 1).data(),
            this->deprecated_identities(this->deprecated_identities_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.deprecated_identities");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_deprecated_identities;
        if (input->ExpectTag(122)) goto parse_contact_id;
        break;
      }

      // optional string contact_id = 15;
      case 15: {
        if (tag == 122) {
         parse_contact_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contact_id().data(), this->contact_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.contact_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_identities;
        break;
      }

      // repeated .ContactIdentityMetadata identities = 16;
      case 16: {
        if (tag == 130) {
         parse_identities:
          DO_(input->IncrementRecursionDepth());
         parse_loop_identities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_identities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_identities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(138)) goto parse_contact_source;
        break;
      }

      // optional string contact_source = 17;
      case 17: {
        if (tag == 138) {
         parse_contact_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contact_source().data(), this->contact_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.contact_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_need_query_user;
        break;
      }

      // optional bool need_query_user = 18;
      case 18: {
        if (tag == 144) {
         parse_need_query_user:
          set_has_need_query_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_query_user_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_server_contact_id;
        break;
      }

      // optional string server_contact_id = 19;
      case 19: {
        if (tag == 154) {
         parse_server_contact_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_contact_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_contact_id().data(), this->server_contact_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.server_contact_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_label_registered;
        break;
      }

      // optional bool label_registered = 20;
      case 20: {
        if (tag == 160) {
         parse_label_registered:
          set_has_label_registered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_registered_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_label_terminated;
        break;
      }

      // optional bool label_terminated = 21;
      case 21: {
        if (tag == 168) {
         parse_label_terminated:
          set_has_label_terminated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_terminated_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_label_contact_removed;
        break;
      }

      // optional bool label_contact_removed = 22;
      case 22: {
        if (tag == 176) {
         parse_label_contact_removed:
          set_has_label_contact_removed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_contact_removed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_label_friend;
        break;
      }

      // optional bool label_friend = 23;
      case 23: {
        if (tag == 184) {
         parse_label_friend:
          set_has_label_friend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_friend_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_creation_timestamp;
        break;
      }

      // optional double creation_timestamp = 24;
      case 24: {
        if (tag == 193) {
         parse_creation_timestamp:
          set_has_creation_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &creation_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_label_system;
        break;
      }

      // optional bool label_system = 25;
      case 25: {
        if (tag == 200) {
         parse_label_system:
          set_has_label_system();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_system_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_phone;
        break;
      }

      // optional string phone = 26;
      case 26: {
        if (tag == 210) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactMetadata.phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContactMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContactMetadata)
  return false;
#undef DO_
}

void ContactMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContactMetadata)
  // optional string primary_identity = 1;
  if (has_primary_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_identity().data(), this->primary_identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.primary_identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->primary_identity(), output);
  }

  // optional int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated string indexed_names = 4;
  for (int i = 0; i < this->indexed_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexed_names(i).data(), this->indexed_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.indexed_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->indexed_names(i), output);
  }

  // optional int64 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->rank(), output);
  }

  // optional string first_name = 6;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.first_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->first_name(), output);
  }

  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->email(), output);
  }

  // optional string last_name = 8;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.last_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->last_name(), output);
  }

  // optional int64 merged_with = 9;
  if (has_merged_with()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->merged_with(), output);
  }

  // optional string nickname = 10;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->nickname(), output);
  }

  // optional bool deprecated_user_name = 11;
  if (has_deprecated_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->deprecated_user_name(), output);
  }

  // optional bool deprecated_user_first_name = 12;
  if (has_deprecated_user_first_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->deprecated_user_first_name(), output);
  }

  // optional bool deprecated_user_last_name = 13;
  if (has_deprecated_user_last_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->deprecated_user_last_name(), output);
  }

  // repeated string deprecated_identities = 14;
  for (int i = 0; i < this->deprecated_identities_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_identities(i).data(), this->deprecated_identities(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.deprecated_identities");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->deprecated_identities(i), output);
  }

  // optional string contact_id = 15;
  if (has_contact_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact_id().data(), this->contact_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.contact_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->contact_id(), output);
  }

  // repeated .ContactIdentityMetadata identities = 16;
  for (unsigned int i = 0, n = this->identities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->identities(i), output);
  }

  // optional string contact_source = 17;
  if (has_contact_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact_source().data(), this->contact_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.contact_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->contact_source(), output);
  }

  // optional bool need_query_user = 18;
  if (has_need_query_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->need_query_user(), output);
  }

  // optional string server_contact_id = 19;
  if (has_server_contact_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_contact_id().data(), this->server_contact_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.server_contact_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->server_contact_id(), output);
  }

  // optional bool label_registered = 20;
  if (has_label_registered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->label_registered(), output);
  }

  // optional bool label_terminated = 21;
  if (has_label_terminated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->label_terminated(), output);
  }

  // optional bool label_contact_removed = 22;
  if (has_label_contact_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->label_contact_removed(), output);
  }

  // optional bool label_friend = 23;
  if (has_label_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->label_friend(), output);
  }

  // optional double creation_timestamp = 24;
  if (has_creation_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->creation_timestamp(), output);
  }

  // optional bool label_system = 25;
  if (has_label_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->label_system(), output);
  }

  // optional string phone = 26;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->phone(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContactMetadata)
}

::google::protobuf::uint8* ContactMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContactMetadata)
  // optional string primary_identity = 1;
  if (has_primary_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_identity().data(), this->primary_identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.primary_identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->primary_identity(), target);
  }

  // optional int64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->user_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated string indexed_names = 4;
  for (int i = 0; i < this->indexed_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexed_names(i).data(), this->indexed_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.indexed_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->indexed_names(i), target);
  }

  // optional int64 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->rank(), target);
  }

  // optional string first_name = 6;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.first_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->first_name(), target);
  }

  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->email(), target);
  }

  // optional string last_name = 8;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.last_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->last_name(), target);
  }

  // optional int64 merged_with = 9;
  if (has_merged_with()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->merged_with(), target);
  }

  // optional string nickname = 10;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->nickname(), target);
  }

  // optional bool deprecated_user_name = 11;
  if (has_deprecated_user_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->deprecated_user_name(), target);
  }

  // optional bool deprecated_user_first_name = 12;
  if (has_deprecated_user_first_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->deprecated_user_first_name(), target);
  }

  // optional bool deprecated_user_last_name = 13;
  if (has_deprecated_user_last_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->deprecated_user_last_name(), target);
  }

  // repeated string deprecated_identities = 14;
  for (int i = 0; i < this->deprecated_identities_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_identities(i).data(), this->deprecated_identities(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.deprecated_identities");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->deprecated_identities(i), target);
  }

  // optional string contact_id = 15;
  if (has_contact_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact_id().data(), this->contact_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.contact_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->contact_id(), target);
  }

  // repeated .ContactIdentityMetadata identities = 16;
  for (unsigned int i = 0, n = this->identities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->identities(i), false, target);
  }

  // optional string contact_source = 17;
  if (has_contact_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contact_source().data(), this->contact_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.contact_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->contact_source(), target);
  }

  // optional bool need_query_user = 18;
  if (has_need_query_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->need_query_user(), target);
  }

  // optional string server_contact_id = 19;
  if (has_server_contact_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_contact_id().data(), this->server_contact_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.server_contact_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->server_contact_id(), target);
  }

  // optional bool label_registered = 20;
  if (has_label_registered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->label_registered(), target);
  }

  // optional bool label_terminated = 21;
  if (has_label_terminated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->label_terminated(), target);
  }

  // optional bool label_contact_removed = 22;
  if (has_label_contact_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->label_contact_removed(), target);
  }

  // optional bool label_friend = 23;
  if (has_label_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->label_friend(), target);
  }

  // optional double creation_timestamp = 24;
  if (has_creation_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->creation_timestamp(), target);
  }

  // optional bool label_system = 25;
  if (has_label_system()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->label_system(), target);
  }

  // optional string phone = 26;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactMetadata.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->phone(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactMetadata)
  return target;
}

size_t ContactMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 189u) {
    // optional string primary_identity = 1;
    if (has_primary_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_identity());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string first_name = 6;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }

    // optional string last_name = 8;
    if (has_last_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_name());
    }

    // optional string nickname = 10;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional double creation_timestamp = 24;
    if (has_creation_timestamp()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string contact_id = 15;
    if (has_contact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact_id());
    }

    // optional string server_contact_id = 19;
    if (has_server_contact_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_contact_id());
    }

    // optional int64 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rank());
    }

    // optional string contact_source = 17;
    if (has_contact_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact_source());
    }

    // optional bool label_contact_removed = 22;
    if (has_label_contact_removed()) {
      total_size += 2 + 1;
    }

    // optional int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int64 merged_with = 9;
    if (has_merged_with()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->merged_with());
    }

    // optional string email = 7;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string phone = 26;
    if (has_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional bool label_registered = 20;
    if (has_label_registered()) {
      total_size += 2 + 1;
    }

    // optional bool label_terminated = 21;
    if (has_label_terminated()) {
      total_size += 2 + 1;
    }

    // optional bool label_friend = 23;
    if (has_label_friend()) {
      total_size += 2 + 1;
    }

    // optional bool label_system = 25;
    if (has_label_system()) {
      total_size += 2 + 1;
    }

    // optional bool need_query_user = 18;
    if (has_need_query_user()) {
      total_size += 2 + 1;
    }

    // optional bool deprecated_user_name = 11;
    if (has_deprecated_user_name()) {
      total_size += 1 + 1;
    }

    // optional bool deprecated_user_first_name = 12;
    if (has_deprecated_user_first_name()) {
      total_size += 1 + 1;
    }

  }
  // optional bool deprecated_user_last_name = 13;
  if (has_deprecated_user_last_name()) {
    total_size += 1 + 1;
  }

  // repeated .ContactIdentityMetadata identities = 16;
  {
    unsigned int count = this->identities_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identities(i));
    }
  }

  // repeated string indexed_names = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->indexed_names_size());
  for (int i = 0; i < this->indexed_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->indexed_names(i));
  }

  // repeated string deprecated_identities = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->deprecated_identities_size());
  for (int i = 0; i < this->deprecated_identities_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deprecated_identities(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContactMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContactMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactMetadata)
    UnsafeMergeFrom(*source);
  }
}

void ContactMetadata::MergeFrom(const ContactMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ContactMetadata::UnsafeMergeFrom(const ContactMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  identities_.MergeFrom(from.identities_);
  indexed_names_.UnsafeMergeFrom(from.indexed_names_);
  deprecated_identities_.UnsafeMergeFrom(from.deprecated_identities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primary_identity()) {
      set_has_primary_identity();
      primary_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_identity_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_first_name()) {
      set_has_first_name();
      first_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_name_);
    }
    if (from.has_last_name()) {
      set_has_last_name();
      last_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_name_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_creation_timestamp()) {
      set_creation_timestamp(from.creation_timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contact_id()) {
      set_has_contact_id();
      contact_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_id_);
    }
    if (from.has_server_contact_id()) {
      set_has_server_contact_id();
      server_contact_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_contact_id_);
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_contact_source()) {
      set_has_contact_source();
      contact_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_source_);
    }
    if (from.has_label_contact_removed()) {
      set_label_contact_removed(from.label_contact_removed());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_merged_with()) {
      set_merged_with(from.merged_with());
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_phone()) {
      set_has_phone();
      phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
    }
    if (from.has_label_registered()) {
      set_label_registered(from.label_registered());
    }
    if (from.has_label_terminated()) {
      set_label_terminated(from.label_terminated());
    }
    if (from.has_label_friend()) {
      set_label_friend(from.label_friend());
    }
    if (from.has_label_system()) {
      set_label_system(from.label_system());
    }
    if (from.has_need_query_user()) {
      set_need_query_user(from.need_query_user());
    }
    if (from.has_deprecated_user_name()) {
      set_deprecated_user_name(from.deprecated_user_name());
    }
    if (from.has_deprecated_user_first_name()) {
      set_deprecated_user_first_name(from.deprecated_user_first_name());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_deprecated_user_last_name()) {
      set_deprecated_user_last_name(from.deprecated_user_last_name());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ContactMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactMetadata::CopyFrom(const ContactMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ContactMetadata::IsInitialized() const {

  return true;
}

void ContactMetadata::Swap(ContactMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactMetadata::InternalSwap(ContactMetadata* other) {
  primary_identity_.Swap(&other->primary_identity_);
  identities_.UnsafeArenaSwap(&other->identities_);
  name_.Swap(&other->name_);
  first_name_.Swap(&other->first_name_);
  last_name_.Swap(&other->last_name_);
  nickname_.Swap(&other->nickname_);
  indexed_names_.UnsafeArenaSwap(&other->indexed_names_);
  std::swap(creation_timestamp_, other->creation_timestamp_);
  contact_id_.Swap(&other->contact_id_);
  server_contact_id_.Swap(&other->server_contact_id_);
  std::swap(rank_, other->rank_);
  contact_source_.Swap(&other->contact_source_);
  std::swap(label_contact_removed_, other->label_contact_removed_);
  std::swap(user_id_, other->user_id_);
  std::swap(merged_with_, other->merged_with_);
  email_.Swap(&other->email_);
  phone_.Swap(&other->phone_);
  std::swap(label_registered_, other->label_registered_);
  std::swap(label_terminated_, other->label_terminated_);
  std::swap(label_friend_, other->label_friend_);
  std::swap(label_system_, other->label_system_);
  std::swap(need_query_user_, other->need_query_user_);
  std::swap(deprecated_user_name_, other->deprecated_user_name_);
  std::swap(deprecated_user_first_name_, other->deprecated_user_first_name_);
  std::swap(deprecated_user_last_name_, other->deprecated_user_last_name_);
  deprecated_identities_.UnsafeArenaSwap(&other->deprecated_identities_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContactMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactMetadata_descriptor_;
  metadata.reflection = ContactMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactMetadata

// optional string primary_identity = 1;
bool ContactMetadata::has_primary_identity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContactMetadata::set_has_primary_identity() {
  _has_bits_[0] |= 0x00000001u;
}
void ContactMetadata::clear_has_primary_identity() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContactMetadata::clear_primary_identity() {
  primary_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_identity();
}
const ::std::string& ContactMetadata::primary_identity() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.primary_identity)
  return primary_identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_primary_identity(const ::std::string& value) {
  set_has_primary_identity();
  primary_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.primary_identity)
}
void ContactMetadata::set_primary_identity(const char* value) {
  set_has_primary_identity();
  primary_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.primary_identity)
}
void ContactMetadata::set_primary_identity(const char* value, size_t size) {
  set_has_primary_identity();
  primary_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.primary_identity)
}
::std::string* ContactMetadata::mutable_primary_identity() {
  set_has_primary_identity();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.primary_identity)
  return primary_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_primary_identity() {
  // @@protoc_insertion_point(field_release:ContactMetadata.primary_identity)
  clear_has_primary_identity();
  return primary_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_primary_identity(::std::string* primary_identity) {
  if (primary_identity != NULL) {
    set_has_primary_identity();
  } else {
    clear_has_primary_identity();
  }
  primary_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_identity);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.primary_identity)
}

// repeated .ContactIdentityMetadata identities = 16;
int ContactMetadata::identities_size() const {
  return identities_.size();
}
void ContactMetadata::clear_identities() {
  identities_.Clear();
}
const ::ContactIdentityMetadata& ContactMetadata::identities(int index) const {
  // @@protoc_insertion_point(field_get:ContactMetadata.identities)
  return identities_.Get(index);
}
::ContactIdentityMetadata* ContactMetadata::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:ContactMetadata.identities)
  return identities_.Mutable(index);
}
::ContactIdentityMetadata* ContactMetadata::add_identities() {
  // @@protoc_insertion_point(field_add:ContactMetadata.identities)
  return identities_.Add();
}
::google::protobuf::RepeatedPtrField< ::ContactIdentityMetadata >*
ContactMetadata::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:ContactMetadata.identities)
  return &identities_;
}
const ::google::protobuf::RepeatedPtrField< ::ContactIdentityMetadata >&
ContactMetadata::identities() const {
  // @@protoc_insertion_point(field_list:ContactMetadata.identities)
  return identities_;
}

// optional string name = 3;
bool ContactMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContactMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ContactMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContactMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ContactMetadata::name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.name)
}
void ContactMetadata::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.name)
}
void ContactMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.name)
}
::std::string* ContactMetadata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_name() {
  // @@protoc_insertion_point(field_release:ContactMetadata.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.name)
}

// optional string first_name = 6;
bool ContactMetadata::has_first_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContactMetadata::set_has_first_name() {
  _has_bits_[0] |= 0x00000008u;
}
void ContactMetadata::clear_has_first_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContactMetadata::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_name();
}
const ::std::string& ContactMetadata::first_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.first_name)
  return first_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_first_name(const ::std::string& value) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.first_name)
}
void ContactMetadata::set_first_name(const char* value) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.first_name)
}
void ContactMetadata::set_first_name(const char* value, size_t size) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.first_name)
}
::std::string* ContactMetadata::mutable_first_name() {
  set_has_first_name();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.first_name)
  return first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_first_name() {
  // @@protoc_insertion_point(field_release:ContactMetadata.first_name)
  clear_has_first_name();
  return first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_first_name(::std::string* first_name) {
  if (first_name != NULL) {
    set_has_first_name();
  } else {
    clear_has_first_name();
  }
  first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.first_name)
}

// optional string last_name = 8;
bool ContactMetadata::has_last_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContactMetadata::set_has_last_name() {
  _has_bits_[0] |= 0x00000010u;
}
void ContactMetadata::clear_has_last_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContactMetadata::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_name();
}
const ::std::string& ContactMetadata::last_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.last_name)
  return last_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_last_name(const ::std::string& value) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.last_name)
}
void ContactMetadata::set_last_name(const char* value) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.last_name)
}
void ContactMetadata::set_last_name(const char* value, size_t size) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.last_name)
}
::std::string* ContactMetadata::mutable_last_name() {
  set_has_last_name();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.last_name)
  return last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_last_name() {
  // @@protoc_insertion_point(field_release:ContactMetadata.last_name)
  clear_has_last_name();
  return last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_last_name(::std::string* last_name) {
  if (last_name != NULL) {
    set_has_last_name();
  } else {
    clear_has_last_name();
  }
  last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.last_name)
}

// optional string nickname = 10;
bool ContactMetadata::has_nickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ContactMetadata::set_has_nickname() {
  _has_bits_[0] |= 0x00000020u;
}
void ContactMetadata::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000020u;
}
void ContactMetadata::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& ContactMetadata::nickname() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.nickname)
}
void ContactMetadata::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.nickname)
}
void ContactMetadata::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.nickname)
}
::std::string* ContactMetadata::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_nickname() {
  // @@protoc_insertion_point(field_release:ContactMetadata.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.nickname)
}

// repeated string indexed_names = 4;
int ContactMetadata::indexed_names_size() const {
  return indexed_names_.size();
}
void ContactMetadata::clear_indexed_names() {
  indexed_names_.Clear();
}
const ::std::string& ContactMetadata::indexed_names(int index) const {
  // @@protoc_insertion_point(field_get:ContactMetadata.indexed_names)
  return indexed_names_.Get(index);
}
::std::string* ContactMetadata::mutable_indexed_names(int index) {
  // @@protoc_insertion_point(field_mutable:ContactMetadata.indexed_names)
  return indexed_names_.Mutable(index);
}
void ContactMetadata::set_indexed_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ContactMetadata.indexed_names)
  indexed_names_.Mutable(index)->assign(value);
}
void ContactMetadata::set_indexed_names(int index, const char* value) {
  indexed_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContactMetadata.indexed_names)
}
void ContactMetadata::set_indexed_names(int index, const char* value, size_t size) {
  indexed_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.indexed_names)
}
::std::string* ContactMetadata::add_indexed_names() {
  // @@protoc_insertion_point(field_add_mutable:ContactMetadata.indexed_names)
  return indexed_names_.Add();
}
void ContactMetadata::add_indexed_names(const ::std::string& value) {
  indexed_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContactMetadata.indexed_names)
}
void ContactMetadata::add_indexed_names(const char* value) {
  indexed_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContactMetadata.indexed_names)
}
void ContactMetadata::add_indexed_names(const char* value, size_t size) {
  indexed_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContactMetadata.indexed_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContactMetadata::indexed_names() const {
  // @@protoc_insertion_point(field_list:ContactMetadata.indexed_names)
  return indexed_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ContactMetadata::mutable_indexed_names() {
  // @@protoc_insertion_point(field_mutable_list:ContactMetadata.indexed_names)
  return &indexed_names_;
}

// optional double creation_timestamp = 24;
bool ContactMetadata::has_creation_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ContactMetadata::set_has_creation_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
void ContactMetadata::clear_has_creation_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void ContactMetadata::clear_creation_timestamp() {
  creation_timestamp_ = 0;
  clear_has_creation_timestamp();
}
double ContactMetadata::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.creation_timestamp)
  return creation_timestamp_;
}
void ContactMetadata::set_creation_timestamp(double value) {
  set_has_creation_timestamp();
  creation_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.creation_timestamp)
}

// optional string contact_id = 15;
bool ContactMetadata::has_contact_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ContactMetadata::set_has_contact_id() {
  _has_bits_[0] |= 0x00000100u;
}
void ContactMetadata::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void ContactMetadata::clear_contact_id() {
  contact_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contact_id();
}
const ::std::string& ContactMetadata::contact_id() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.contact_id)
  return contact_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_contact_id(const ::std::string& value) {
  set_has_contact_id();
  contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.contact_id)
}
void ContactMetadata::set_contact_id(const char* value) {
  set_has_contact_id();
  contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.contact_id)
}
void ContactMetadata::set_contact_id(const char* value, size_t size) {
  set_has_contact_id();
  contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.contact_id)
}
::std::string* ContactMetadata::mutable_contact_id() {
  set_has_contact_id();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.contact_id)
  return contact_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_contact_id() {
  // @@protoc_insertion_point(field_release:ContactMetadata.contact_id)
  clear_has_contact_id();
  return contact_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_contact_id(::std::string* contact_id) {
  if (contact_id != NULL) {
    set_has_contact_id();
  } else {
    clear_has_contact_id();
  }
  contact_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact_id);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.contact_id)
}

// optional string server_contact_id = 19;
bool ContactMetadata::has_server_contact_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ContactMetadata::set_has_server_contact_id() {
  _has_bits_[0] |= 0x00000200u;
}
void ContactMetadata::clear_has_server_contact_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void ContactMetadata::clear_server_contact_id() {
  server_contact_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_contact_id();
}
const ::std::string& ContactMetadata::server_contact_id() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.server_contact_id)
  return server_contact_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_server_contact_id(const ::std::string& value) {
  set_has_server_contact_id();
  server_contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.server_contact_id)
}
void ContactMetadata::set_server_contact_id(const char* value) {
  set_has_server_contact_id();
  server_contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.server_contact_id)
}
void ContactMetadata::set_server_contact_id(const char* value, size_t size) {
  set_has_server_contact_id();
  server_contact_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.server_contact_id)
}
::std::string* ContactMetadata::mutable_server_contact_id() {
  set_has_server_contact_id();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.server_contact_id)
  return server_contact_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_server_contact_id() {
  // @@protoc_insertion_point(field_release:ContactMetadata.server_contact_id)
  clear_has_server_contact_id();
  return server_contact_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_server_contact_id(::std::string* server_contact_id) {
  if (server_contact_id != NULL) {
    set_has_server_contact_id();
  } else {
    clear_has_server_contact_id();
  }
  server_contact_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_contact_id);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.server_contact_id)
}

// optional int64 rank = 5;
bool ContactMetadata::has_rank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ContactMetadata::set_has_rank() {
  _has_bits_[0] |= 0x00000400u;
}
void ContactMetadata::clear_has_rank() {
  _has_bits_[0] &= ~0x00000400u;
}
void ContactMetadata::clear_rank() {
  rank_ = GOOGLE_LONGLONG(0);
  clear_has_rank();
}
::google::protobuf::int64 ContactMetadata::rank() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.rank)
  return rank_;
}
void ContactMetadata::set_rank(::google::protobuf::int64 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.rank)
}

// optional string contact_source = 17;
bool ContactMetadata::has_contact_source() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ContactMetadata::set_has_contact_source() {
  _has_bits_[0] |= 0x00000800u;
}
void ContactMetadata::clear_has_contact_source() {
  _has_bits_[0] &= ~0x00000800u;
}
void ContactMetadata::clear_contact_source() {
  contact_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contact_source();
}
const ::std::string& ContactMetadata::contact_source() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.contact_source)
  return contact_source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_contact_source(const ::std::string& value) {
  set_has_contact_source();
  contact_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.contact_source)
}
void ContactMetadata::set_contact_source(const char* value) {
  set_has_contact_source();
  contact_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.contact_source)
}
void ContactMetadata::set_contact_source(const char* value, size_t size) {
  set_has_contact_source();
  contact_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.contact_source)
}
::std::string* ContactMetadata::mutable_contact_source() {
  set_has_contact_source();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.contact_source)
  return contact_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_contact_source() {
  // @@protoc_insertion_point(field_release:ContactMetadata.contact_source)
  clear_has_contact_source();
  return contact_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_contact_source(::std::string* contact_source) {
  if (contact_source != NULL) {
    set_has_contact_source();
  } else {
    clear_has_contact_source();
  }
  contact_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact_source);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.contact_source)
}

// optional bool label_contact_removed = 22;
bool ContactMetadata::has_label_contact_removed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ContactMetadata::set_has_label_contact_removed() {
  _has_bits_[0] |= 0x00001000u;
}
void ContactMetadata::clear_has_label_contact_removed() {
  _has_bits_[0] &= ~0x00001000u;
}
void ContactMetadata::clear_label_contact_removed() {
  label_contact_removed_ = false;
  clear_has_label_contact_removed();
}
bool ContactMetadata::label_contact_removed() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_contact_removed)
  return label_contact_removed_;
}
void ContactMetadata::set_label_contact_removed(bool value) {
  set_has_label_contact_removed();
  label_contact_removed_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_contact_removed)
}

// optional int64 user_id = 2;
bool ContactMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ContactMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00002000u;
}
void ContactMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void ContactMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 ContactMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.user_id)
  return user_id_;
}
void ContactMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.user_id)
}

// optional int64 merged_with = 9;
bool ContactMetadata::has_merged_with() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ContactMetadata::set_has_merged_with() {
  _has_bits_[0] |= 0x00004000u;
}
void ContactMetadata::clear_has_merged_with() {
  _has_bits_[0] &= ~0x00004000u;
}
void ContactMetadata::clear_merged_with() {
  merged_with_ = GOOGLE_LONGLONG(0);
  clear_has_merged_with();
}
::google::protobuf::int64 ContactMetadata::merged_with() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.merged_with)
  return merged_with_;
}
void ContactMetadata::set_merged_with(::google::protobuf::int64 value) {
  set_has_merged_with();
  merged_with_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.merged_with)
}

// optional string email = 7;
bool ContactMetadata::has_email() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ContactMetadata::set_has_email() {
  _has_bits_[0] |= 0x00008000u;
}
void ContactMetadata::clear_has_email() {
  _has_bits_[0] &= ~0x00008000u;
}
void ContactMetadata::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& ContactMetadata::email() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.email)
}
void ContactMetadata::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.email)
}
void ContactMetadata::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.email)
}
::std::string* ContactMetadata::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_email() {
  // @@protoc_insertion_point(field_release:ContactMetadata.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.email)
}

// optional string phone = 26;
bool ContactMetadata::has_phone() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ContactMetadata::set_has_phone() {
  _has_bits_[0] |= 0x00010000u;
}
void ContactMetadata::clear_has_phone() {
  _has_bits_[0] &= ~0x00010000u;
}
void ContactMetadata::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
const ::std::string& ContactMetadata::phone() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.phone)
  return phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactMetadata.phone)
}
void ContactMetadata::set_phone(const char* value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactMetadata.phone)
}
void ContactMetadata::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.phone)
}
::std::string* ContactMetadata::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ContactMetadata.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactMetadata::release_phone() {
  // @@protoc_insertion_point(field_release:ContactMetadata.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactMetadata::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ContactMetadata.phone)
}

// optional bool label_registered = 20;
bool ContactMetadata::has_label_registered() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ContactMetadata::set_has_label_registered() {
  _has_bits_[0] |= 0x00020000u;
}
void ContactMetadata::clear_has_label_registered() {
  _has_bits_[0] &= ~0x00020000u;
}
void ContactMetadata::clear_label_registered() {
  label_registered_ = false;
  clear_has_label_registered();
}
bool ContactMetadata::label_registered() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_registered)
  return label_registered_;
}
void ContactMetadata::set_label_registered(bool value) {
  set_has_label_registered();
  label_registered_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_registered)
}

// optional bool label_terminated = 21;
bool ContactMetadata::has_label_terminated() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ContactMetadata::set_has_label_terminated() {
  _has_bits_[0] |= 0x00040000u;
}
void ContactMetadata::clear_has_label_terminated() {
  _has_bits_[0] &= ~0x00040000u;
}
void ContactMetadata::clear_label_terminated() {
  label_terminated_ = false;
  clear_has_label_terminated();
}
bool ContactMetadata::label_terminated() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_terminated)
  return label_terminated_;
}
void ContactMetadata::set_label_terminated(bool value) {
  set_has_label_terminated();
  label_terminated_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_terminated)
}

// optional bool label_friend = 23;
bool ContactMetadata::has_label_friend() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ContactMetadata::set_has_label_friend() {
  _has_bits_[0] |= 0x00080000u;
}
void ContactMetadata::clear_has_label_friend() {
  _has_bits_[0] &= ~0x00080000u;
}
void ContactMetadata::clear_label_friend() {
  label_friend_ = false;
  clear_has_label_friend();
}
bool ContactMetadata::label_friend() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_friend)
  return label_friend_;
}
void ContactMetadata::set_label_friend(bool value) {
  set_has_label_friend();
  label_friend_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_friend)
}

// optional bool label_system = 25;
bool ContactMetadata::has_label_system() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ContactMetadata::set_has_label_system() {
  _has_bits_[0] |= 0x00100000u;
}
void ContactMetadata::clear_has_label_system() {
  _has_bits_[0] &= ~0x00100000u;
}
void ContactMetadata::clear_label_system() {
  label_system_ = false;
  clear_has_label_system();
}
bool ContactMetadata::label_system() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.label_system)
  return label_system_;
}
void ContactMetadata::set_label_system(bool value) {
  set_has_label_system();
  label_system_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.label_system)
}

// optional bool need_query_user = 18;
bool ContactMetadata::has_need_query_user() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ContactMetadata::set_has_need_query_user() {
  _has_bits_[0] |= 0x00200000u;
}
void ContactMetadata::clear_has_need_query_user() {
  _has_bits_[0] &= ~0x00200000u;
}
void ContactMetadata::clear_need_query_user() {
  need_query_user_ = false;
  clear_has_need_query_user();
}
bool ContactMetadata::need_query_user() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.need_query_user)
  return need_query_user_;
}
void ContactMetadata::set_need_query_user(bool value) {
  set_has_need_query_user();
  need_query_user_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.need_query_user)
}

// optional bool deprecated_user_name = 11;
bool ContactMetadata::has_deprecated_user_name() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ContactMetadata::set_has_deprecated_user_name() {
  _has_bits_[0] |= 0x00400000u;
}
void ContactMetadata::clear_has_deprecated_user_name() {
  _has_bits_[0] &= ~0x00400000u;
}
void ContactMetadata::clear_deprecated_user_name() {
  deprecated_user_name_ = false;
  clear_has_deprecated_user_name();
}
bool ContactMetadata::deprecated_user_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.deprecated_user_name)
  return deprecated_user_name_;
}
void ContactMetadata::set_deprecated_user_name(bool value) {
  set_has_deprecated_user_name();
  deprecated_user_name_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.deprecated_user_name)
}

// optional bool deprecated_user_first_name = 12;
bool ContactMetadata::has_deprecated_user_first_name() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ContactMetadata::set_has_deprecated_user_first_name() {
  _has_bits_[0] |= 0x00800000u;
}
void ContactMetadata::clear_has_deprecated_user_first_name() {
  _has_bits_[0] &= ~0x00800000u;
}
void ContactMetadata::clear_deprecated_user_first_name() {
  deprecated_user_first_name_ = false;
  clear_has_deprecated_user_first_name();
}
bool ContactMetadata::deprecated_user_first_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.deprecated_user_first_name)
  return deprecated_user_first_name_;
}
void ContactMetadata::set_deprecated_user_first_name(bool value) {
  set_has_deprecated_user_first_name();
  deprecated_user_first_name_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.deprecated_user_first_name)
}

// optional bool deprecated_user_last_name = 13;
bool ContactMetadata::has_deprecated_user_last_name() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ContactMetadata::set_has_deprecated_user_last_name() {
  _has_bits_[0] |= 0x01000000u;
}
void ContactMetadata::clear_has_deprecated_user_last_name() {
  _has_bits_[0] &= ~0x01000000u;
}
void ContactMetadata::clear_deprecated_user_last_name() {
  deprecated_user_last_name_ = false;
  clear_has_deprecated_user_last_name();
}
bool ContactMetadata::deprecated_user_last_name() const {
  // @@protoc_insertion_point(field_get:ContactMetadata.deprecated_user_last_name)
  return deprecated_user_last_name_;
}
void ContactMetadata::set_deprecated_user_last_name(bool value) {
  set_has_deprecated_user_last_name();
  deprecated_user_last_name_ = value;
  // @@protoc_insertion_point(field_set:ContactMetadata.deprecated_user_last_name)
}

// repeated string deprecated_identities = 14;
int ContactMetadata::deprecated_identities_size() const {
  return deprecated_identities_.size();
}
void ContactMetadata::clear_deprecated_identities() {
  deprecated_identities_.Clear();
}
const ::std::string& ContactMetadata::deprecated_identities(int index) const {
  // @@protoc_insertion_point(field_get:ContactMetadata.deprecated_identities)
  return deprecated_identities_.Get(index);
}
::std::string* ContactMetadata::mutable_deprecated_identities(int index) {
  // @@protoc_insertion_point(field_mutable:ContactMetadata.deprecated_identities)
  return deprecated_identities_.Mutable(index);
}
void ContactMetadata::set_deprecated_identities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ContactMetadata.deprecated_identities)
  deprecated_identities_.Mutable(index)->assign(value);
}
void ContactMetadata::set_deprecated_identities(int index, const char* value) {
  deprecated_identities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContactMetadata.deprecated_identities)
}
void ContactMetadata::set_deprecated_identities(int index, const char* value, size_t size) {
  deprecated_identities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContactMetadata.deprecated_identities)
}
::std::string* ContactMetadata::add_deprecated_identities() {
  // @@protoc_insertion_point(field_add_mutable:ContactMetadata.deprecated_identities)
  return deprecated_identities_.Add();
}
void ContactMetadata::add_deprecated_identities(const ::std::string& value) {
  deprecated_identities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContactMetadata.deprecated_identities)
}
void ContactMetadata::add_deprecated_identities(const char* value) {
  deprecated_identities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContactMetadata.deprecated_identities)
}
void ContactMetadata::add_deprecated_identities(const char* value, size_t size) {
  deprecated_identities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContactMetadata.deprecated_identities)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContactMetadata::deprecated_identities() const {
  // @@protoc_insertion_point(field_list:ContactMetadata.deprecated_identities)
  return deprecated_identities_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ContactMetadata::mutable_deprecated_identities() {
  // @@protoc_insertion_point(field_mutable_list:ContactMetadata.deprecated_identities)
  return &deprecated_identities_;
}

inline const ContactMetadata* ContactMetadata::internal_default_instance() {
  return &ContactMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactSourceMetadata::kLastImportTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactSourceMetadata::ContactSourceMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ContactMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactSourceMetadata)
}

void ContactSourceMetadata::InitAsDefaultInstance() {
}

ContactSourceMetadata::ContactSourceMetadata(const ContactSourceMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContactSourceMetadata)
}

void ContactSourceMetadata::SharedCtor() {
  _cached_size_ = 0;
  last_import_timestamp_ = 0;
}

ContactSourceMetadata::~ContactSourceMetadata() {
  // @@protoc_insertion_point(destructor:ContactSourceMetadata)
  SharedDtor();
}

void ContactSourceMetadata::SharedDtor() {
}

void ContactSourceMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactSourceMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactSourceMetadata_descriptor_;
}

const ContactSourceMetadata& ContactSourceMetadata::default_instance() {
  protobuf_InitDefaults_ContactMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ContactSourceMetadata> ContactSourceMetadata_default_instance_;

ContactSourceMetadata* ContactSourceMetadata::New(::google::protobuf::Arena* arena) const {
  ContactSourceMetadata* n = new ContactSourceMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactSourceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactSourceMetadata)
  last_import_timestamp_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContactSourceMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContactSourceMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double last_import_timestamp = 1;
      case 1: {
        if (tag == 9) {
          set_has_last_import_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_import_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContactSourceMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContactSourceMetadata)
  return false;
#undef DO_
}

void ContactSourceMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContactSourceMetadata)
  // optional double last_import_timestamp = 1;
  if (has_last_import_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->last_import_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContactSourceMetadata)
}

::google::protobuf::uint8* ContactSourceMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContactSourceMetadata)
  // optional double last_import_timestamp = 1;
  if (has_last_import_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->last_import_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactSourceMetadata)
  return target;
}

size_t ContactSourceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactSourceMetadata)
  size_t total_size = 0;

  // optional double last_import_timestamp = 1;
  if (has_last_import_timestamp()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactSourceMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactSourceMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContactSourceMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContactSourceMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactSourceMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactSourceMetadata)
    UnsafeMergeFrom(*source);
  }
}

void ContactSourceMetadata::MergeFrom(const ContactSourceMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactSourceMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ContactSourceMetadata::UnsafeMergeFrom(const ContactSourceMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_import_timestamp()) {
      set_last_import_timestamp(from.last_import_timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ContactSourceMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactSourceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactSourceMetadata::CopyFrom(const ContactSourceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactSourceMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ContactSourceMetadata::IsInitialized() const {

  return true;
}

void ContactSourceMetadata::Swap(ContactSourceMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactSourceMetadata::InternalSwap(ContactSourceMetadata* other) {
  std::swap(last_import_timestamp_, other->last_import_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContactSourceMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactSourceMetadata_descriptor_;
  metadata.reflection = ContactSourceMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactSourceMetadata

// optional double last_import_timestamp = 1;
bool ContactSourceMetadata::has_last_import_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContactSourceMetadata::set_has_last_import_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void ContactSourceMetadata::clear_has_last_import_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContactSourceMetadata::clear_last_import_timestamp() {
  last_import_timestamp_ = 0;
  clear_has_last_import_timestamp();
}
double ContactSourceMetadata::last_import_timestamp() const {
  // @@protoc_insertion_point(field_get:ContactSourceMetadata.last_import_timestamp)
  return last_import_timestamp_;
}
void ContactSourceMetadata::set_last_import_timestamp(double value) {
  set_has_last_import_timestamp();
  last_import_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ContactSourceMetadata.last_import_timestamp)
}

inline const ContactSourceMetadata* ContactSourceMetadata::internal_default_instance() {
  return &ContactSourceMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
