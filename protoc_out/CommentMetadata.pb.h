// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommentMetadata.proto

#ifndef PROTOBUF_CommentMetadata_2eproto__INCLUDED
#define PROTOBUF_CommentMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ContentIds.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CommentMetadata_2eproto();
void protobuf_InitDefaults_CommentMetadata_2eproto();
void protobuf_AssignDesc_CommentMetadata_2eproto();
void protobuf_ShutdownFile_CommentMetadata_2eproto();

class CommentMetadata;

// ===================================================================

class CommentMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommentMetadata) */ {
 public:
  CommentMetadata();
  virtual ~CommentMetadata();

  CommentMetadata(const CommentMetadata& from);

  inline CommentMetadata& operator=(const CommentMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommentMetadata& default_instance();

  static const CommentMetadata* internal_default_instance();

  void Swap(CommentMetadata* other);

  // implements Message ----------------------------------------------

  inline CommentMetadata* New() const { return New(NULL); }

  CommentMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommentMetadata& from);
  void MergeFrom(const CommentMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommentMetadata* other);
  void UnsafeMergeFrom(const CommentMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CommentId comment_id = 1;
  bool has_comment_id() const;
  void clear_comment_id();
  static const int kCommentIdFieldNumber = 1;
  const ::CommentId& comment_id() const;
  ::CommentId* mutable_comment_id();
  ::CommentId* release_comment_id();
  void set_allocated_comment_id(::CommentId* comment_id);

  // optional .ViewpointId viewpoint_id = 2;
  bool has_viewpoint_id() const;
  void clear_viewpoint_id();
  static const int kViewpointIdFieldNumber = 2;
  const ::ViewpointId& viewpoint_id() const;
  ::ViewpointId* mutable_viewpoint_id();
  ::ViewpointId* release_viewpoint_id();
  void set_allocated_viewpoint_id(::ViewpointId* viewpoint_id);

  // optional int64 user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // optional string asset_id = 4;
  bool has_asset_id() const;
  void clear_asset_id();
  static const int kAssetIdFieldNumber = 4;
  const ::std::string& asset_id() const;
  void set_asset_id(const ::std::string& value);
  void set_asset_id(const char* value);
  void set_asset_id(const char* value, size_t size);
  ::std::string* mutable_asset_id();
  ::std::string* release_asset_id();
  void set_allocated_asset_id(::std::string* asset_id);

  // optional double timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  double timestamp() const;
  void set_timestamp(double value);

  // optional string message = 6;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // repeated string indexed_terms = 7;
  int indexed_terms_size() const;
  void clear_indexed_terms();
  static const int kIndexedTermsFieldNumber = 7;
  const ::std::string& indexed_terms(int index) const;
  ::std::string* mutable_indexed_terms(int index);
  void set_indexed_terms(int index, const ::std::string& value);
  void set_indexed_terms(int index, const char* value);
  void set_indexed_terms(int index, const char* value, size_t size);
  ::std::string* add_indexed_terms();
  void add_indexed_terms(const ::std::string& value);
  void add_indexed_terms(const char* value);
  void add_indexed_terms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& indexed_terms() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_indexed_terms();

  // @@protoc_insertion_point(class_scope:CommentMetadata)
 private:
  inline void set_has_comment_id();
  inline void clear_has_comment_id();
  inline void set_has_viewpoint_id();
  inline void clear_has_viewpoint_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_asset_id();
  inline void clear_has_asset_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> indexed_terms_;
  ::google::protobuf::internal::ArenaStringPtr asset_id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::CommentId* comment_id_;
  ::ViewpointId* viewpoint_id_;
  ::google::protobuf::int64 user_id_;
  double timestamp_;
  friend void  protobuf_InitDefaults_CommentMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_CommentMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_CommentMetadata_2eproto();
  friend void protobuf_ShutdownFile_CommentMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CommentMetadata> CommentMetadata_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CommentMetadata

// optional .CommentId comment_id = 1;
inline bool CommentMetadata::has_comment_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommentMetadata::set_has_comment_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommentMetadata::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommentMetadata::clear_comment_id() {
  if (comment_id_ != NULL) comment_id_->::CommentId::Clear();
  clear_has_comment_id();
}
inline const ::CommentId& CommentMetadata::comment_id() const {
  // @@protoc_insertion_point(field_get:CommentMetadata.comment_id)
  return comment_id_ != NULL ? *comment_id_
                         : *::CommentId::internal_default_instance();
}
inline ::CommentId* CommentMetadata::mutable_comment_id() {
  set_has_comment_id();
  if (comment_id_ == NULL) {
    comment_id_ = new ::CommentId;
  }
  // @@protoc_insertion_point(field_mutable:CommentMetadata.comment_id)
  return comment_id_;
}
inline ::CommentId* CommentMetadata::release_comment_id() {
  // @@protoc_insertion_point(field_release:CommentMetadata.comment_id)
  clear_has_comment_id();
  ::CommentId* temp = comment_id_;
  comment_id_ = NULL;
  return temp;
}
inline void CommentMetadata::set_allocated_comment_id(::CommentId* comment_id) {
  delete comment_id_;
  comment_id_ = comment_id;
  if (comment_id) {
    set_has_comment_id();
  } else {
    clear_has_comment_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CommentMetadata.comment_id)
}

// optional .ViewpointId viewpoint_id = 2;
inline bool CommentMetadata::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommentMetadata::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommentMetadata::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommentMetadata::clear_viewpoint_id() {
  if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
  clear_has_viewpoint_id();
}
inline const ::ViewpointId& CommentMetadata::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:CommentMetadata.viewpoint_id)
  return viewpoint_id_ != NULL ? *viewpoint_id_
                         : *::ViewpointId::internal_default_instance();
}
inline ::ViewpointId* CommentMetadata::mutable_viewpoint_id() {
  set_has_viewpoint_id();
  if (viewpoint_id_ == NULL) {
    viewpoint_id_ = new ::ViewpointId;
  }
  // @@protoc_insertion_point(field_mutable:CommentMetadata.viewpoint_id)
  return viewpoint_id_;
}
inline ::ViewpointId* CommentMetadata::release_viewpoint_id() {
  // @@protoc_insertion_point(field_release:CommentMetadata.viewpoint_id)
  clear_has_viewpoint_id();
  ::ViewpointId* temp = viewpoint_id_;
  viewpoint_id_ = NULL;
  return temp;
}
inline void CommentMetadata::set_allocated_viewpoint_id(::ViewpointId* viewpoint_id) {
  delete viewpoint_id_;
  viewpoint_id_ = viewpoint_id;
  if (viewpoint_id) {
    set_has_viewpoint_id();
  } else {
    clear_has_viewpoint_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CommentMetadata.viewpoint_id)
}

// optional int64 user_id = 3;
inline bool CommentMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommentMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommentMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommentMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 CommentMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:CommentMetadata.user_id)
  return user_id_;
}
inline void CommentMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:CommentMetadata.user_id)
}

// optional string asset_id = 4;
inline bool CommentMetadata::has_asset_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommentMetadata::set_has_asset_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommentMetadata::clear_has_asset_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommentMetadata::clear_asset_id() {
  asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_asset_id();
}
inline const ::std::string& CommentMetadata::asset_id() const {
  // @@protoc_insertion_point(field_get:CommentMetadata.asset_id)
  return asset_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentMetadata::set_asset_id(const ::std::string& value) {
  set_has_asset_id();
  asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommentMetadata.asset_id)
}
inline void CommentMetadata::set_asset_id(const char* value) {
  set_has_asset_id();
  asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommentMetadata.asset_id)
}
inline void CommentMetadata::set_asset_id(const char* value, size_t size) {
  set_has_asset_id();
  asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommentMetadata.asset_id)
}
inline ::std::string* CommentMetadata::mutable_asset_id() {
  set_has_asset_id();
  // @@protoc_insertion_point(field_mutable:CommentMetadata.asset_id)
  return asset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommentMetadata::release_asset_id() {
  // @@protoc_insertion_point(field_release:CommentMetadata.asset_id)
  clear_has_asset_id();
  return asset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentMetadata::set_allocated_asset_id(::std::string* asset_id) {
  if (asset_id != NULL) {
    set_has_asset_id();
  } else {
    clear_has_asset_id();
  }
  asset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_id);
  // @@protoc_insertion_point(field_set_allocated:CommentMetadata.asset_id)
}

// optional double timestamp = 5;
inline bool CommentMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommentMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommentMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommentMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double CommentMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:CommentMetadata.timestamp)
  return timestamp_;
}
inline void CommentMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CommentMetadata.timestamp)
}

// optional string message = 6;
inline bool CommentMetadata::has_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommentMetadata::set_has_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommentMetadata::clear_has_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommentMetadata::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& CommentMetadata::message() const {
  // @@protoc_insertion_point(field_get:CommentMetadata.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentMetadata::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommentMetadata.message)
}
inline void CommentMetadata::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommentMetadata.message)
}
inline void CommentMetadata::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommentMetadata.message)
}
inline ::std::string* CommentMetadata::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:CommentMetadata.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommentMetadata::release_message() {
  // @@protoc_insertion_point(field_release:CommentMetadata.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentMetadata::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CommentMetadata.message)
}

// repeated string indexed_terms = 7;
inline int CommentMetadata::indexed_terms_size() const {
  return indexed_terms_.size();
}
inline void CommentMetadata::clear_indexed_terms() {
  indexed_terms_.Clear();
}
inline const ::std::string& CommentMetadata::indexed_terms(int index) const {
  // @@protoc_insertion_point(field_get:CommentMetadata.indexed_terms)
  return indexed_terms_.Get(index);
}
inline ::std::string* CommentMetadata::mutable_indexed_terms(int index) {
  // @@protoc_insertion_point(field_mutable:CommentMetadata.indexed_terms)
  return indexed_terms_.Mutable(index);
}
inline void CommentMetadata::set_indexed_terms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CommentMetadata.indexed_terms)
  indexed_terms_.Mutable(index)->assign(value);
}
inline void CommentMetadata::set_indexed_terms(int index, const char* value) {
  indexed_terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CommentMetadata.indexed_terms)
}
inline void CommentMetadata::set_indexed_terms(int index, const char* value, size_t size) {
  indexed_terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommentMetadata.indexed_terms)
}
inline ::std::string* CommentMetadata::add_indexed_terms() {
  // @@protoc_insertion_point(field_add_mutable:CommentMetadata.indexed_terms)
  return indexed_terms_.Add();
}
inline void CommentMetadata::add_indexed_terms(const ::std::string& value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CommentMetadata.indexed_terms)
}
inline void CommentMetadata::add_indexed_terms(const char* value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CommentMetadata.indexed_terms)
}
inline void CommentMetadata::add_indexed_terms(const char* value, size_t size) {
  indexed_terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CommentMetadata.indexed_terms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommentMetadata::indexed_terms() const {
  // @@protoc_insertion_point(field_list:CommentMetadata.indexed_terms)
  return indexed_terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommentMetadata::mutable_indexed_terms() {
  // @@protoc_insertion_point(field_mutable_list:CommentMetadata.indexed_terms)
  return &indexed_terms_;
}

inline const CommentMetadata* CommentMetadata::internal_default_instance() {
  return &CommentMetadata_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CommentMetadata_2eproto__INCLUDED
