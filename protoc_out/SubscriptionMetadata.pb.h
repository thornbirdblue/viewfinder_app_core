// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubscriptionMetadata.proto

#ifndef PROTOBUF_SubscriptionMetadata_2eproto__INCLUDED
#define PROTOBUF_SubscriptionMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_SubscriptionMetadata_2eproto();
void protobuf_InitDefaults_SubscriptionMetadata_2eproto();
void protobuf_AssignDesc_SubscriptionMetadata_2eproto();
void protobuf_ShutdownFile_SubscriptionMetadata_2eproto();

class LocalSubscriptionMetadata;
class ServerSubscriptionMetadata;

// ===================================================================

class LocalSubscriptionMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LocalSubscriptionMetadata) */ {
 public:
  LocalSubscriptionMetadata();
  virtual ~LocalSubscriptionMetadata();

  LocalSubscriptionMetadata(const LocalSubscriptionMetadata& from);

  inline LocalSubscriptionMetadata& operator=(const LocalSubscriptionMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalSubscriptionMetadata& default_instance();

  static const LocalSubscriptionMetadata* internal_default_instance();

  void Swap(LocalSubscriptionMetadata* other);

  // implements Message ----------------------------------------------

  inline LocalSubscriptionMetadata* New() const { return New(NULL); }

  LocalSubscriptionMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocalSubscriptionMetadata& from);
  void MergeFrom(const LocalSubscriptionMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalSubscriptionMetadata* other);
  void UnsafeMergeFrom(const LocalSubscriptionMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string product = 1;
  bool has_product() const;
  void clear_product();
  static const int kProductFieldNumber = 1;
  const ::std::string& product() const;
  void set_product(const ::std::string& value);
  void set_product(const char* value);
  void set_product(const char* value, size_t size);
  ::std::string* mutable_product();
  ::std::string* release_product();
  void set_allocated_product(::std::string* product);

  // optional double timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // optional string receipt = 3;
  bool has_receipt() const;
  void clear_receipt();
  static const int kReceiptFieldNumber = 3;
  const ::std::string& receipt() const;
  void set_receipt(const ::std::string& value);
  void set_receipt(const char* value);
  void set_receipt(const char* value, size_t size);
  ::std::string* mutable_receipt();
  ::std::string* release_receipt();
  void set_allocated_receipt(::std::string* receipt);

  // optional bool recorded = 4;
  bool has_recorded() const;
  void clear_recorded();
  static const int kRecordedFieldNumber = 4;
  bool recorded() const;
  void set_recorded(bool value);

  // @@protoc_insertion_point(class_scope:LocalSubscriptionMetadata)
 private:
  inline void set_has_product();
  inline void clear_has_product();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_receipt();
  inline void clear_has_receipt();
  inline void set_has_recorded();
  inline void clear_has_recorded();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr product_;
  ::google::protobuf::internal::ArenaStringPtr receipt_;
  double timestamp_;
  bool recorded_;
  friend void  protobuf_InitDefaults_SubscriptionMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_SubscriptionMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_SubscriptionMetadata_2eproto();
  friend void protobuf_ShutdownFile_SubscriptionMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LocalSubscriptionMetadata> LocalSubscriptionMetadata_default_instance_;

// -------------------------------------------------------------------

class ServerSubscriptionMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerSubscriptionMetadata) */ {
 public:
  ServerSubscriptionMetadata();
  virtual ~ServerSubscriptionMetadata();

  ServerSubscriptionMetadata(const ServerSubscriptionMetadata& from);

  inline ServerSubscriptionMetadata& operator=(const ServerSubscriptionMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerSubscriptionMetadata& default_instance();

  static const ServerSubscriptionMetadata* internal_default_instance();

  void Swap(ServerSubscriptionMetadata* other);

  // implements Message ----------------------------------------------

  inline ServerSubscriptionMetadata* New() const { return New(NULL); }

  ServerSubscriptionMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerSubscriptionMetadata& from);
  void MergeFrom(const ServerSubscriptionMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerSubscriptionMetadata* other);
  void UnsafeMergeFrom(const ServerSubscriptionMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string transaction_id = 1;
  bool has_transaction_id() const;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 1;
  const ::std::string& transaction_id() const;
  void set_transaction_id(const ::std::string& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  ::std::string* mutable_transaction_id();
  ::std::string* release_transaction_id();
  void set_allocated_transaction_id(::std::string* transaction_id);

  // optional string subscription_id = 2;
  bool has_subscription_id() const;
  void clear_subscription_id();
  static const int kSubscriptionIdFieldNumber = 2;
  const ::std::string& subscription_id() const;
  void set_subscription_id(const ::std::string& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  ::std::string* mutable_subscription_id();
  ::std::string* release_subscription_id();
  void set_allocated_subscription_id(::std::string* subscription_id);

  // optional double timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  double timestamp() const;
  void set_timestamp(double value);

  // optional double expiration_ts = 4;
  bool has_expiration_ts() const;
  void clear_expiration_ts();
  static const int kExpirationTsFieldNumber = 4;
  double expiration_ts() const;
  void set_expiration_ts(double value);

  // optional string product_type = 5;
  bool has_product_type() const;
  void clear_product_type();
  static const int kProductTypeFieldNumber = 5;
  const ::std::string& product_type() const;
  void set_product_type(const ::std::string& value);
  void set_product_type(const char* value);
  void set_product_type(const char* value, size_t size);
  ::std::string* mutable_product_type();
  ::std::string* release_product_type();
  void set_allocated_product_type(::std::string* product_type);

  // optional double quantity = 6;
  bool has_quantity() const;
  void clear_quantity();
  static const int kQuantityFieldNumber = 6;
  double quantity() const;
  void set_quantity(double value);

  // optional string payment_type = 7;
  bool has_payment_type() const;
  void clear_payment_type();
  static const int kPaymentTypeFieldNumber = 7;
  const ::std::string& payment_type() const;
  void set_payment_type(const ::std::string& value);
  void set_payment_type(const char* value);
  void set_payment_type(const char* value, size_t size);
  ::std::string* mutable_payment_type();
  ::std::string* release_payment_type();
  void set_allocated_payment_type(::std::string* payment_type);

  // @@protoc_insertion_point(class_scope:ServerSubscriptionMetadata)
 private:
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();
  inline void set_has_subscription_id();
  inline void clear_has_subscription_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_expiration_ts();
  inline void clear_has_expiration_ts();
  inline void set_has_product_type();
  inline void clear_has_product_type();
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_payment_type();
  inline void clear_has_payment_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr transaction_id_;
  ::google::protobuf::internal::ArenaStringPtr subscription_id_;
  ::google::protobuf::internal::ArenaStringPtr product_type_;
  ::google::protobuf::internal::ArenaStringPtr payment_type_;
  double timestamp_;
  double expiration_ts_;
  double quantity_;
  friend void  protobuf_InitDefaults_SubscriptionMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_SubscriptionMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_SubscriptionMetadata_2eproto();
  friend void protobuf_ShutdownFile_SubscriptionMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServerSubscriptionMetadata> ServerSubscriptionMetadata_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalSubscriptionMetadata

// optional string product = 1;
inline bool LocalSubscriptionMetadata::has_product() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalSubscriptionMetadata::set_has_product() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalSubscriptionMetadata::clear_has_product() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalSubscriptionMetadata::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product();
}
inline const ::std::string& LocalSubscriptionMetadata::product() const {
  // @@protoc_insertion_point(field_get:LocalSubscriptionMetadata.product)
  return product_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalSubscriptionMetadata::set_product(const ::std::string& value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LocalSubscriptionMetadata.product)
}
inline void LocalSubscriptionMetadata::set_product(const char* value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LocalSubscriptionMetadata.product)
}
inline void LocalSubscriptionMetadata::set_product(const char* value, size_t size) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LocalSubscriptionMetadata.product)
}
inline ::std::string* LocalSubscriptionMetadata::mutable_product() {
  set_has_product();
  // @@protoc_insertion_point(field_mutable:LocalSubscriptionMetadata.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocalSubscriptionMetadata::release_product() {
  // @@protoc_insertion_point(field_release:LocalSubscriptionMetadata.product)
  clear_has_product();
  return product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalSubscriptionMetadata::set_allocated_product(::std::string* product) {
  if (product != NULL) {
    set_has_product();
  } else {
    clear_has_product();
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:LocalSubscriptionMetadata.product)
}

// optional double timestamp = 2;
inline bool LocalSubscriptionMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalSubscriptionMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalSubscriptionMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocalSubscriptionMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double LocalSubscriptionMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:LocalSubscriptionMetadata.timestamp)
  return timestamp_;
}
inline void LocalSubscriptionMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LocalSubscriptionMetadata.timestamp)
}

// optional string receipt = 3;
inline bool LocalSubscriptionMetadata::has_receipt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalSubscriptionMetadata::set_has_receipt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocalSubscriptionMetadata::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocalSubscriptionMetadata::clear_receipt() {
  receipt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_receipt();
}
inline const ::std::string& LocalSubscriptionMetadata::receipt() const {
  // @@protoc_insertion_point(field_get:LocalSubscriptionMetadata.receipt)
  return receipt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalSubscriptionMetadata::set_receipt(const ::std::string& value) {
  set_has_receipt();
  receipt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LocalSubscriptionMetadata.receipt)
}
inline void LocalSubscriptionMetadata::set_receipt(const char* value) {
  set_has_receipt();
  receipt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LocalSubscriptionMetadata.receipt)
}
inline void LocalSubscriptionMetadata::set_receipt(const char* value, size_t size) {
  set_has_receipt();
  receipt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LocalSubscriptionMetadata.receipt)
}
inline ::std::string* LocalSubscriptionMetadata::mutable_receipt() {
  set_has_receipt();
  // @@protoc_insertion_point(field_mutable:LocalSubscriptionMetadata.receipt)
  return receipt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocalSubscriptionMetadata::release_receipt() {
  // @@protoc_insertion_point(field_release:LocalSubscriptionMetadata.receipt)
  clear_has_receipt();
  return receipt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocalSubscriptionMetadata::set_allocated_receipt(::std::string* receipt) {
  if (receipt != NULL) {
    set_has_receipt();
  } else {
    clear_has_receipt();
  }
  receipt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receipt);
  // @@protoc_insertion_point(field_set_allocated:LocalSubscriptionMetadata.receipt)
}

// optional bool recorded = 4;
inline bool LocalSubscriptionMetadata::has_recorded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocalSubscriptionMetadata::set_has_recorded() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocalSubscriptionMetadata::clear_has_recorded() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocalSubscriptionMetadata::clear_recorded() {
  recorded_ = false;
  clear_has_recorded();
}
inline bool LocalSubscriptionMetadata::recorded() const {
  // @@protoc_insertion_point(field_get:LocalSubscriptionMetadata.recorded)
  return recorded_;
}
inline void LocalSubscriptionMetadata::set_recorded(bool value) {
  set_has_recorded();
  recorded_ = value;
  // @@protoc_insertion_point(field_set:LocalSubscriptionMetadata.recorded)
}

inline const LocalSubscriptionMetadata* LocalSubscriptionMetadata::internal_default_instance() {
  return &LocalSubscriptionMetadata_default_instance_.get();
}
// -------------------------------------------------------------------

// ServerSubscriptionMetadata

// optional string transaction_id = 1;
inline bool ServerSubscriptionMetadata::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerSubscriptionMetadata::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerSubscriptionMetadata::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerSubscriptionMetadata::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_id();
}
inline const ::std::string& ServerSubscriptionMetadata::transaction_id() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.transaction_id)
  return transaction_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerSubscriptionMetadata::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.transaction_id)
}
inline void ServerSubscriptionMetadata::set_transaction_id(const char* value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerSubscriptionMetadata.transaction_id)
}
inline void ServerSubscriptionMetadata::set_transaction_id(const char* value, size_t size) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerSubscriptionMetadata.transaction_id)
}
inline ::std::string* ServerSubscriptionMetadata::mutable_transaction_id() {
  set_has_transaction_id();
  // @@protoc_insertion_point(field_mutable:ServerSubscriptionMetadata.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerSubscriptionMetadata::release_transaction_id() {
  // @@protoc_insertion_point(field_release:ServerSubscriptionMetadata.transaction_id)
  clear_has_transaction_id();
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerSubscriptionMetadata::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    set_has_transaction_id();
  } else {
    clear_has_transaction_id();
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:ServerSubscriptionMetadata.transaction_id)
}

// optional string subscription_id = 2;
inline bool ServerSubscriptionMetadata::has_subscription_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerSubscriptionMetadata::set_has_subscription_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerSubscriptionMetadata::clear_has_subscription_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerSubscriptionMetadata::clear_subscription_id() {
  subscription_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subscription_id();
}
inline const ::std::string& ServerSubscriptionMetadata::subscription_id() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.subscription_id)
  return subscription_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerSubscriptionMetadata::set_subscription_id(const ::std::string& value) {
  set_has_subscription_id();
  subscription_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.subscription_id)
}
inline void ServerSubscriptionMetadata::set_subscription_id(const char* value) {
  set_has_subscription_id();
  subscription_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerSubscriptionMetadata.subscription_id)
}
inline void ServerSubscriptionMetadata::set_subscription_id(const char* value, size_t size) {
  set_has_subscription_id();
  subscription_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerSubscriptionMetadata.subscription_id)
}
inline ::std::string* ServerSubscriptionMetadata::mutable_subscription_id() {
  set_has_subscription_id();
  // @@protoc_insertion_point(field_mutable:ServerSubscriptionMetadata.subscription_id)
  return subscription_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerSubscriptionMetadata::release_subscription_id() {
  // @@protoc_insertion_point(field_release:ServerSubscriptionMetadata.subscription_id)
  clear_has_subscription_id();
  return subscription_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerSubscriptionMetadata::set_allocated_subscription_id(::std::string* subscription_id) {
  if (subscription_id != NULL) {
    set_has_subscription_id();
  } else {
    clear_has_subscription_id();
  }
  subscription_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription_id);
  // @@protoc_insertion_point(field_set_allocated:ServerSubscriptionMetadata.subscription_id)
}

// optional double timestamp = 3;
inline bool ServerSubscriptionMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerSubscriptionMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerSubscriptionMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerSubscriptionMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double ServerSubscriptionMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.timestamp)
  return timestamp_;
}
inline void ServerSubscriptionMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.timestamp)
}

// optional double expiration_ts = 4;
inline bool ServerSubscriptionMetadata::has_expiration_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerSubscriptionMetadata::set_has_expiration_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerSubscriptionMetadata::clear_has_expiration_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerSubscriptionMetadata::clear_expiration_ts() {
  expiration_ts_ = 0;
  clear_has_expiration_ts();
}
inline double ServerSubscriptionMetadata::expiration_ts() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.expiration_ts)
  return expiration_ts_;
}
inline void ServerSubscriptionMetadata::set_expiration_ts(double value) {
  set_has_expiration_ts();
  expiration_ts_ = value;
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.expiration_ts)
}

// optional string product_type = 5;
inline bool ServerSubscriptionMetadata::has_product_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerSubscriptionMetadata::set_has_product_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerSubscriptionMetadata::clear_has_product_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerSubscriptionMetadata::clear_product_type() {
  product_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_type();
}
inline const ::std::string& ServerSubscriptionMetadata::product_type() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.product_type)
  return product_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerSubscriptionMetadata::set_product_type(const ::std::string& value) {
  set_has_product_type();
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.product_type)
}
inline void ServerSubscriptionMetadata::set_product_type(const char* value) {
  set_has_product_type();
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerSubscriptionMetadata.product_type)
}
inline void ServerSubscriptionMetadata::set_product_type(const char* value, size_t size) {
  set_has_product_type();
  product_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerSubscriptionMetadata.product_type)
}
inline ::std::string* ServerSubscriptionMetadata::mutable_product_type() {
  set_has_product_type();
  // @@protoc_insertion_point(field_mutable:ServerSubscriptionMetadata.product_type)
  return product_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerSubscriptionMetadata::release_product_type() {
  // @@protoc_insertion_point(field_release:ServerSubscriptionMetadata.product_type)
  clear_has_product_type();
  return product_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerSubscriptionMetadata::set_allocated_product_type(::std::string* product_type) {
  if (product_type != NULL) {
    set_has_product_type();
  } else {
    clear_has_product_type();
  }
  product_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_type);
  // @@protoc_insertion_point(field_set_allocated:ServerSubscriptionMetadata.product_type)
}

// optional double quantity = 6;
inline bool ServerSubscriptionMetadata::has_quantity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerSubscriptionMetadata::set_has_quantity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerSubscriptionMetadata::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerSubscriptionMetadata::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
inline double ServerSubscriptionMetadata::quantity() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.quantity)
  return quantity_;
}
inline void ServerSubscriptionMetadata::set_quantity(double value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.quantity)
}

// optional string payment_type = 7;
inline bool ServerSubscriptionMetadata::has_payment_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerSubscriptionMetadata::set_has_payment_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerSubscriptionMetadata::clear_has_payment_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerSubscriptionMetadata::clear_payment_type() {
  payment_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payment_type();
}
inline const ::std::string& ServerSubscriptionMetadata::payment_type() const {
  // @@protoc_insertion_point(field_get:ServerSubscriptionMetadata.payment_type)
  return payment_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerSubscriptionMetadata::set_payment_type(const ::std::string& value) {
  set_has_payment_type();
  payment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerSubscriptionMetadata.payment_type)
}
inline void ServerSubscriptionMetadata::set_payment_type(const char* value) {
  set_has_payment_type();
  payment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerSubscriptionMetadata.payment_type)
}
inline void ServerSubscriptionMetadata::set_payment_type(const char* value, size_t size) {
  set_has_payment_type();
  payment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerSubscriptionMetadata.payment_type)
}
inline ::std::string* ServerSubscriptionMetadata::mutable_payment_type() {
  set_has_payment_type();
  // @@protoc_insertion_point(field_mutable:ServerSubscriptionMetadata.payment_type)
  return payment_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerSubscriptionMetadata::release_payment_type() {
  // @@protoc_insertion_point(field_release:ServerSubscriptionMetadata.payment_type)
  clear_has_payment_type();
  return payment_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerSubscriptionMetadata::set_allocated_payment_type(::std::string* payment_type) {
  if (payment_type != NULL) {
    set_has_payment_type();
  } else {
    clear_has_payment_type();
  }
  payment_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_type);
  // @@protoc_insertion_point(field_set_allocated:ServerSubscriptionMetadata.payment_type)
}

inline const ServerSubscriptionMetadata* ServerSubscriptionMetadata::internal_default_instance() {
  return &ServerSubscriptionMetadata_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SubscriptionMetadata_2eproto__INCLUDED
