// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ViewpointMetadata.proto

#ifndef PROTOBUF_ViewpointMetadata_2eproto__INCLUDED
#define PROTOBUF_ViewpointMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ContentIds.pb.h"
#include "QueueMetadata.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ViewpointMetadata_2eproto();
void protobuf_InitDefaults_ViewpointMetadata_2eproto();
void protobuf_AssignDesc_ViewpointMetadata_2eproto();
void protobuf_ShutdownFile_ViewpointMetadata_2eproto();

class CoverPhoto;
class ViewpointMetadata;

// ===================================================================

class CoverPhoto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CoverPhoto) */ {
 public:
  CoverPhoto();
  virtual ~CoverPhoto();

  CoverPhoto(const CoverPhoto& from);

  inline CoverPhoto& operator=(const CoverPhoto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoverPhoto& default_instance();

  static const CoverPhoto* internal_default_instance();

  void Swap(CoverPhoto* other);

  // implements Message ----------------------------------------------

  inline CoverPhoto* New() const { return New(NULL); }

  CoverPhoto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoverPhoto& from);
  void MergeFrom(const CoverPhoto& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CoverPhoto* other);
  void UnsafeMergeFrom(const CoverPhoto& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PhotoId photo_id = 1;
  bool has_photo_id() const;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 1;
  const ::PhotoId& photo_id() const;
  ::PhotoId* mutable_photo_id();
  ::PhotoId* release_photo_id();
  void set_allocated_photo_id(::PhotoId* photo_id);

  // optional .EpisodeId episode_id = 2;
  bool has_episode_id() const;
  void clear_episode_id();
  static const int kEpisodeIdFieldNumber = 2;
  const ::EpisodeId& episode_id() const;
  ::EpisodeId* mutable_episode_id();
  ::EpisodeId* release_episode_id();
  void set_allocated_episode_id(::EpisodeId* episode_id);

  // @@protoc_insertion_point(class_scope:CoverPhoto)
 private:
  inline void set_has_photo_id();
  inline void clear_has_photo_id();
  inline void set_has_episode_id();
  inline void clear_has_episode_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::PhotoId* photo_id_;
  ::EpisodeId* episode_id_;
  friend void  protobuf_InitDefaults_ViewpointMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_ViewpointMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_ViewpointMetadata_2eproto();
  friend void protobuf_ShutdownFile_ViewpointMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CoverPhoto> CoverPhoto_default_instance_;

// -------------------------------------------------------------------

class ViewpointMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ViewpointMetadata) */ {
 public:
  ViewpointMetadata();
  virtual ~ViewpointMetadata();

  ViewpointMetadata(const ViewpointMetadata& from);

  inline ViewpointMetadata& operator=(const ViewpointMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewpointMetadata& default_instance();

  static const ViewpointMetadata* internal_default_instance();

  void Swap(ViewpointMetadata* other);

  // implements Message ----------------------------------------------

  inline ViewpointMetadata* New() const { return New(NULL); }

  ViewpointMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewpointMetadata& from);
  void MergeFrom(const ViewpointMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ViewpointMetadata* other);
  void UnsafeMergeFrom(const ViewpointMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ViewpointId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::ViewpointId& id() const;
  ::ViewpointId* mutable_id();
  ::ViewpointId* release_id();
  void set_allocated_id(::ViewpointId* id);

  // optional int64 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // optional int64 sharing_user_id = 3;
  bool has_sharing_user_id() const;
  void clear_sharing_user_id();
  static const int kSharingUserIdFieldNumber = 3;
  ::google::protobuf::int64 sharing_user_id() const;
  void set_sharing_user_id(::google::protobuf::int64 value);

  // optional string title = 4;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 4;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string description = 5;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .CoverPhoto cover_photo = 11;
  bool has_cover_photo() const;
  void clear_cover_photo();
  static const int kCoverPhotoFieldNumber = 11;
  const ::CoverPhoto& cover_photo() const;
  ::CoverPhoto* mutable_cover_photo();
  ::CoverPhoto* release_cover_photo();
  void set_allocated_cover_photo(::CoverPhoto* cover_photo);

  // optional string type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional int64 update_seq = 8;
  bool has_update_seq() const;
  void clear_update_seq();
  static const int kUpdateSeqFieldNumber = 8;
  ::google::protobuf::int64 update_seq() const;
  void set_update_seq(::google::protobuf::int64 value);

  // optional int64 viewed_seq = 9;
  bool has_viewed_seq() const;
  void clear_viewed_seq();
  static const int kViewedSeqFieldNumber = 9;
  ::google::protobuf::int64 viewed_seq() const;
  void set_viewed_seq(::google::protobuf::int64 value);

  // optional .QueueMetadata queue = 10;
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 10;
  const ::QueueMetadata& queue() const;
  ::QueueMetadata* mutable_queue();
  ::QueueMetadata* release_queue();
  void set_allocated_queue(::QueueMetadata* queue);

  // optional bool label_admin = 20;
  bool has_label_admin() const;
  void clear_label_admin();
  static const int kLabelAdminFieldNumber = 20;
  bool label_admin() const;
  void set_label_admin(bool value);

  // optional bool label_autosave = 26;
  bool has_label_autosave() const;
  void clear_label_autosave();
  static const int kLabelAutosaveFieldNumber = 26;
  bool label_autosave() const;
  void set_label_autosave(bool value);

  // optional bool label_contribute = 21;
  bool has_label_contribute() const;
  void clear_label_contribute();
  static const int kLabelContributeFieldNumber = 21;
  bool label_contribute() const;
  void set_label_contribute(bool value);

  // optional bool DEPRECATED_label_personal = 22;
  bool has_deprecated_label_personal() const;
  void clear_deprecated_label_personal();
  static const int kDEPRECATEDLabelPersonalFieldNumber = 22;
  bool deprecated_label_personal() const;
  void set_deprecated_label_personal(bool value);

  // optional bool label_hidden = 23;
  bool has_label_hidden() const;
  void clear_label_hidden();
  static const int kLabelHiddenFieldNumber = 23;
  bool label_hidden() const;
  void set_label_hidden(bool value);

  // optional bool label_removed = 24;
  bool has_label_removed() const;
  void clear_label_removed();
  static const int kLabelRemovedFieldNumber = 24;
  bool label_removed() const;
  void set_label_removed(bool value);

  // optional bool label_muted = 25;
  bool has_label_muted() const;
  void clear_label_muted();
  static const int kLabelMutedFieldNumber = 25;
  bool label_muted() const;
  void set_label_muted(bool value);

  // optional bool label_unrevivable = 27;
  bool has_label_unrevivable() const;
  void clear_label_unrevivable();
  static const int kLabelUnrevivableFieldNumber = 27;
  bool label_unrevivable() const;
  void set_label_unrevivable(bool value);

  // optional bool label_error = 30;
  bool has_label_error() const;
  void clear_label_error();
  static const int kLabelErrorFieldNumber = 30;
  bool label_error() const;
  void set_label_error(bool value);

  // optional bool provisional = 45;
  bool has_provisional() const;
  void clear_provisional();
  static const int kProvisionalFieldNumber = 45;
  bool provisional() const;
  void set_provisional(bool value);

  // optional bool update_metadata = 40;
  bool has_update_metadata() const;
  void clear_update_metadata();
  static const int kUpdateMetadataFieldNumber = 40;
  bool update_metadata() const;
  void set_update_metadata(bool value);

  // optional bool update_follower_metadata = 41;
  bool has_update_follower_metadata() const;
  void clear_update_follower_metadata();
  static const int kUpdateFollowerMetadataFieldNumber = 41;
  bool update_follower_metadata() const;
  void set_update_follower_metadata(bool value);

  // optional bool update_remove = 44;
  bool has_update_remove() const;
  void clear_update_remove();
  static const int kUpdateRemoveFieldNumber = 44;
  bool update_remove() const;
  void set_update_remove(bool value);

  // optional bool update_viewed_seq = 47;
  bool has_update_viewed_seq() const;
  void clear_update_viewed_seq();
  static const int kUpdateViewedSeqFieldNumber = 47;
  bool update_viewed_seq() const;
  void set_update_viewed_seq(bool value);

  // repeated string indexed_terms = 46;
  int indexed_terms_size() const;
  void clear_indexed_terms();
  static const int kIndexedTermsFieldNumber = 46;
  const ::std::string& indexed_terms(int index) const;
  ::std::string* mutable_indexed_terms(int index);
  void set_indexed_terms(int index, const ::std::string& value);
  void set_indexed_terms(int index, const char* value);
  void set_indexed_terms(int index, const char* value, size_t size);
  ::std::string* add_indexed_terms();
  void add_indexed_terms(const ::std::string& value);
  void add_indexed_terms(const char* value);
  void add_indexed_terms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& indexed_terms() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_indexed_terms();

  // optional int64 DEPRECATED_last_viewed_seq = 42;
  bool has_deprecated_last_viewed_seq() const;
  void clear_deprecated_last_viewed_seq();
  static const int kDEPRECATEDLastViewedSeqFieldNumber = 42;
  ::google::protobuf::int64 deprecated_last_viewed_seq() const;
  void set_deprecated_last_viewed_seq(::google::protobuf::int64 value);

  // optional double DECPRECATED_last_viewed_timestamp = 43;
  bool has_decprecated_last_viewed_timestamp() const;
  void clear_decprecated_last_viewed_timestamp();
  static const int kDECPRECATEDLastViewedTimestampFieldNumber = 43;
  double decprecated_last_viewed_timestamp() const;
  void set_decprecated_last_viewed_timestamp(double value);

  // @@protoc_insertion_point(class_scope:ViewpointMetadata)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_sharing_user_id();
  inline void clear_has_sharing_user_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cover_photo();
  inline void clear_has_cover_photo();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_update_seq();
  inline void clear_has_update_seq();
  inline void set_has_viewed_seq();
  inline void clear_has_viewed_seq();
  inline void set_has_queue();
  inline void clear_has_queue();
  inline void set_has_label_admin();
  inline void clear_has_label_admin();
  inline void set_has_label_autosave();
  inline void clear_has_label_autosave();
  inline void set_has_label_contribute();
  inline void clear_has_label_contribute();
  inline void set_has_deprecated_label_personal();
  inline void clear_has_deprecated_label_personal();
  inline void set_has_label_hidden();
  inline void clear_has_label_hidden();
  inline void set_has_label_removed();
  inline void clear_has_label_removed();
  inline void set_has_label_muted();
  inline void clear_has_label_muted();
  inline void set_has_label_unrevivable();
  inline void clear_has_label_unrevivable();
  inline void set_has_label_error();
  inline void clear_has_label_error();
  inline void set_has_provisional();
  inline void clear_has_provisional();
  inline void set_has_update_metadata();
  inline void clear_has_update_metadata();
  inline void set_has_update_follower_metadata();
  inline void clear_has_update_follower_metadata();
  inline void set_has_update_remove();
  inline void clear_has_update_remove();
  inline void set_has_update_viewed_seq();
  inline void clear_has_update_viewed_seq();
  inline void set_has_deprecated_last_viewed_seq();
  inline void clear_has_deprecated_last_viewed_seq();
  inline void set_has_decprecated_last_viewed_timestamp();
  inline void clear_has_decprecated_last_viewed_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> indexed_terms_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::ViewpointId* id_;
  ::CoverPhoto* cover_photo_;
  ::QueueMetadata* queue_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 sharing_user_id_;
  ::google::protobuf::int64 update_seq_;
  ::google::protobuf::int64 viewed_seq_;
  bool label_admin_;
  bool label_autosave_;
  bool label_contribute_;
  bool deprecated_label_personal_;
  bool label_hidden_;
  bool label_removed_;
  bool label_muted_;
  bool label_unrevivable_;
  bool label_error_;
  bool provisional_;
  bool update_metadata_;
  bool update_follower_metadata_;
  bool update_remove_;
  bool update_viewed_seq_;
  ::google::protobuf::int64 deprecated_last_viewed_seq_;
  double decprecated_last_viewed_timestamp_;
  friend void  protobuf_InitDefaults_ViewpointMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_ViewpointMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_ViewpointMetadata_2eproto();
  friend void protobuf_ShutdownFile_ViewpointMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ViewpointMetadata> ViewpointMetadata_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CoverPhoto

// optional .PhotoId photo_id = 1;
inline bool CoverPhoto::has_photo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoverPhoto::set_has_photo_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoverPhoto::clear_has_photo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoverPhoto::clear_photo_id() {
  if (photo_id_ != NULL) photo_id_->::PhotoId::Clear();
  clear_has_photo_id();
}
inline const ::PhotoId& CoverPhoto::photo_id() const {
  // @@protoc_insertion_point(field_get:CoverPhoto.photo_id)
  return photo_id_ != NULL ? *photo_id_
                         : *::PhotoId::internal_default_instance();
}
inline ::PhotoId* CoverPhoto::mutable_photo_id() {
  set_has_photo_id();
  if (photo_id_ == NULL) {
    photo_id_ = new ::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:CoverPhoto.photo_id)
  return photo_id_;
}
inline ::PhotoId* CoverPhoto::release_photo_id() {
  // @@protoc_insertion_point(field_release:CoverPhoto.photo_id)
  clear_has_photo_id();
  ::PhotoId* temp = photo_id_;
  photo_id_ = NULL;
  return temp;
}
inline void CoverPhoto::set_allocated_photo_id(::PhotoId* photo_id) {
  delete photo_id_;
  photo_id_ = photo_id;
  if (photo_id) {
    set_has_photo_id();
  } else {
    clear_has_photo_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CoverPhoto.photo_id)
}

// optional .EpisodeId episode_id = 2;
inline bool CoverPhoto::has_episode_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CoverPhoto::set_has_episode_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CoverPhoto::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CoverPhoto::clear_episode_id() {
  if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  clear_has_episode_id();
}
inline const ::EpisodeId& CoverPhoto::episode_id() const {
  // @@protoc_insertion_point(field_get:CoverPhoto.episode_id)
  return episode_id_ != NULL ? *episode_id_
                         : *::EpisodeId::internal_default_instance();
}
inline ::EpisodeId* CoverPhoto::mutable_episode_id() {
  set_has_episode_id();
  if (episode_id_ == NULL) {
    episode_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:CoverPhoto.episode_id)
  return episode_id_;
}
inline ::EpisodeId* CoverPhoto::release_episode_id() {
  // @@protoc_insertion_point(field_release:CoverPhoto.episode_id)
  clear_has_episode_id();
  ::EpisodeId* temp = episode_id_;
  episode_id_ = NULL;
  return temp;
}
inline void CoverPhoto::set_allocated_episode_id(::EpisodeId* episode_id) {
  delete episode_id_;
  episode_id_ = episode_id;
  if (episode_id) {
    set_has_episode_id();
  } else {
    clear_has_episode_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CoverPhoto.episode_id)
}

inline const CoverPhoto* CoverPhoto::internal_default_instance() {
  return &CoverPhoto_default_instance_.get();
}
// -------------------------------------------------------------------

// ViewpointMetadata

// optional .ViewpointId id = 1;
inline bool ViewpointMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewpointMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewpointMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewpointMetadata::clear_id() {
  if (id_ != NULL) id_->::ViewpointId::Clear();
  clear_has_id();
}
inline const ::ViewpointId& ViewpointMetadata::id() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.id)
  return id_ != NULL ? *id_
                         : *::ViewpointId::internal_default_instance();
}
inline ::ViewpointId* ViewpointMetadata::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::ViewpointId;
  }
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.id)
  return id_;
}
inline ::ViewpointId* ViewpointMetadata::release_id() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.id)
  clear_has_id();
  ::ViewpointId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void ViewpointMetadata::set_allocated_id(::ViewpointId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.id)
}

// optional int64 user_id = 2;
inline bool ViewpointMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewpointMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewpointMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewpointMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 ViewpointMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.user_id)
  return user_id_;
}
inline void ViewpointMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.user_id)
}

// optional int64 sharing_user_id = 3;
inline bool ViewpointMetadata::has_sharing_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ViewpointMetadata::set_has_sharing_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ViewpointMetadata::clear_has_sharing_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ViewpointMetadata::clear_sharing_user_id() {
  sharing_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_sharing_user_id();
}
inline ::google::protobuf::int64 ViewpointMetadata::sharing_user_id() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.sharing_user_id)
  return sharing_user_id_;
}
inline void ViewpointMetadata::set_sharing_user_id(::google::protobuf::int64 value) {
  set_has_sharing_user_id();
  sharing_user_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.sharing_user_id)
}

// optional string title = 4;
inline bool ViewpointMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ViewpointMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ViewpointMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ViewpointMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& ViewpointMetadata::title() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointMetadata.title)
}
inline void ViewpointMetadata::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.title)
}
inline void ViewpointMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.title)
}
inline ::std::string* ViewpointMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewpointMetadata::release_title() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.title)
}

// optional string description = 5;
inline bool ViewpointMetadata::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ViewpointMetadata::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ViewpointMetadata::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ViewpointMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& ViewpointMetadata::description() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointMetadata::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointMetadata.description)
}
inline void ViewpointMetadata::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.description)
}
inline void ViewpointMetadata::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.description)
}
inline ::std::string* ViewpointMetadata::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewpointMetadata::release_description() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.description)
}

// optional string name = 6;
inline bool ViewpointMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ViewpointMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ViewpointMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ViewpointMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ViewpointMetadata::name() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointMetadata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointMetadata.name)
}
inline void ViewpointMetadata::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.name)
}
inline void ViewpointMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.name)
}
inline ::std::string* ViewpointMetadata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewpointMetadata::release_name() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.name)
}

// optional .CoverPhoto cover_photo = 11;
inline bool ViewpointMetadata::has_cover_photo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ViewpointMetadata::set_has_cover_photo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ViewpointMetadata::clear_has_cover_photo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ViewpointMetadata::clear_cover_photo() {
  if (cover_photo_ != NULL) cover_photo_->::CoverPhoto::Clear();
  clear_has_cover_photo();
}
inline const ::CoverPhoto& ViewpointMetadata::cover_photo() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.cover_photo)
  return cover_photo_ != NULL ? *cover_photo_
                         : *::CoverPhoto::internal_default_instance();
}
inline ::CoverPhoto* ViewpointMetadata::mutable_cover_photo() {
  set_has_cover_photo();
  if (cover_photo_ == NULL) {
    cover_photo_ = new ::CoverPhoto;
  }
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.cover_photo)
  return cover_photo_;
}
inline ::CoverPhoto* ViewpointMetadata::release_cover_photo() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.cover_photo)
  clear_has_cover_photo();
  ::CoverPhoto* temp = cover_photo_;
  cover_photo_ = NULL;
  return temp;
}
inline void ViewpointMetadata::set_allocated_cover_photo(::CoverPhoto* cover_photo) {
  delete cover_photo_;
  cover_photo_ = cover_photo;
  if (cover_photo) {
    set_has_cover_photo();
  } else {
    clear_has_cover_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.cover_photo)
}

// optional string type = 7;
inline bool ViewpointMetadata::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ViewpointMetadata::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ViewpointMetadata::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ViewpointMetadata::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& ViewpointMetadata::type() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointMetadata::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointMetadata.type)
}
inline void ViewpointMetadata::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.type)
}
inline void ViewpointMetadata::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.type)
}
inline ::std::string* ViewpointMetadata::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewpointMetadata::release_type() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointMetadata::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.type)
}

// optional int64 update_seq = 8;
inline bool ViewpointMetadata::has_update_seq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ViewpointMetadata::set_has_update_seq() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ViewpointMetadata::clear_has_update_seq() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ViewpointMetadata::clear_update_seq() {
  update_seq_ = GOOGLE_LONGLONG(0);
  clear_has_update_seq();
}
inline ::google::protobuf::int64 ViewpointMetadata::update_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_seq)
  return update_seq_;
}
inline void ViewpointMetadata::set_update_seq(::google::protobuf::int64 value) {
  set_has_update_seq();
  update_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_seq)
}

// optional int64 viewed_seq = 9;
inline bool ViewpointMetadata::has_viewed_seq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ViewpointMetadata::set_has_viewed_seq() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ViewpointMetadata::clear_has_viewed_seq() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ViewpointMetadata::clear_viewed_seq() {
  viewed_seq_ = GOOGLE_LONGLONG(0);
  clear_has_viewed_seq();
}
inline ::google::protobuf::int64 ViewpointMetadata::viewed_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.viewed_seq)
  return viewed_seq_;
}
inline void ViewpointMetadata::set_viewed_seq(::google::protobuf::int64 value) {
  set_has_viewed_seq();
  viewed_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.viewed_seq)
}

// optional .QueueMetadata queue = 10;
inline bool ViewpointMetadata::has_queue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ViewpointMetadata::set_has_queue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ViewpointMetadata::clear_has_queue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ViewpointMetadata::clear_queue() {
  if (queue_ != NULL) queue_->::QueueMetadata::Clear();
  clear_has_queue();
}
inline const ::QueueMetadata& ViewpointMetadata::queue() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.queue)
  return queue_ != NULL ? *queue_
                         : *::QueueMetadata::internal_default_instance();
}
inline ::QueueMetadata* ViewpointMetadata::mutable_queue() {
  set_has_queue();
  if (queue_ == NULL) {
    queue_ = new ::QueueMetadata;
  }
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.queue)
  return queue_;
}
inline ::QueueMetadata* ViewpointMetadata::release_queue() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.queue)
  clear_has_queue();
  ::QueueMetadata* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline void ViewpointMetadata::set_allocated_queue(::QueueMetadata* queue) {
  delete queue_;
  queue_ = queue;
  if (queue) {
    set_has_queue();
  } else {
    clear_has_queue();
  }
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.queue)
}

// optional bool label_admin = 20;
inline bool ViewpointMetadata::has_label_admin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ViewpointMetadata::set_has_label_admin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ViewpointMetadata::clear_has_label_admin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ViewpointMetadata::clear_label_admin() {
  label_admin_ = false;
  clear_has_label_admin();
}
inline bool ViewpointMetadata::label_admin() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_admin)
  return label_admin_;
}
inline void ViewpointMetadata::set_label_admin(bool value) {
  set_has_label_admin();
  label_admin_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_admin)
}

// optional bool label_autosave = 26;
inline bool ViewpointMetadata::has_label_autosave() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ViewpointMetadata::set_has_label_autosave() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ViewpointMetadata::clear_has_label_autosave() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ViewpointMetadata::clear_label_autosave() {
  label_autosave_ = false;
  clear_has_label_autosave();
}
inline bool ViewpointMetadata::label_autosave() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_autosave)
  return label_autosave_;
}
inline void ViewpointMetadata::set_label_autosave(bool value) {
  set_has_label_autosave();
  label_autosave_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_autosave)
}

// optional bool label_contribute = 21;
inline bool ViewpointMetadata::has_label_contribute() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ViewpointMetadata::set_has_label_contribute() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ViewpointMetadata::clear_has_label_contribute() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ViewpointMetadata::clear_label_contribute() {
  label_contribute_ = false;
  clear_has_label_contribute();
}
inline bool ViewpointMetadata::label_contribute() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_contribute)
  return label_contribute_;
}
inline void ViewpointMetadata::set_label_contribute(bool value) {
  set_has_label_contribute();
  label_contribute_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_contribute)
}

// optional bool DEPRECATED_label_personal = 22;
inline bool ViewpointMetadata::has_deprecated_label_personal() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ViewpointMetadata::set_has_deprecated_label_personal() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ViewpointMetadata::clear_has_deprecated_label_personal() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ViewpointMetadata::clear_deprecated_label_personal() {
  deprecated_label_personal_ = false;
  clear_has_deprecated_label_personal();
}
inline bool ViewpointMetadata::deprecated_label_personal() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.DEPRECATED_label_personal)
  return deprecated_label_personal_;
}
inline void ViewpointMetadata::set_deprecated_label_personal(bool value) {
  set_has_deprecated_label_personal();
  deprecated_label_personal_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.DEPRECATED_label_personal)
}

// optional bool label_hidden = 23;
inline bool ViewpointMetadata::has_label_hidden() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ViewpointMetadata::set_has_label_hidden() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ViewpointMetadata::clear_has_label_hidden() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ViewpointMetadata::clear_label_hidden() {
  label_hidden_ = false;
  clear_has_label_hidden();
}
inline bool ViewpointMetadata::label_hidden() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_hidden)
  return label_hidden_;
}
inline void ViewpointMetadata::set_label_hidden(bool value) {
  set_has_label_hidden();
  label_hidden_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_hidden)
}

// optional bool label_removed = 24;
inline bool ViewpointMetadata::has_label_removed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ViewpointMetadata::set_has_label_removed() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ViewpointMetadata::clear_has_label_removed() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ViewpointMetadata::clear_label_removed() {
  label_removed_ = false;
  clear_has_label_removed();
}
inline bool ViewpointMetadata::label_removed() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_removed)
  return label_removed_;
}
inline void ViewpointMetadata::set_label_removed(bool value) {
  set_has_label_removed();
  label_removed_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_removed)
}

// optional bool label_muted = 25;
inline bool ViewpointMetadata::has_label_muted() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ViewpointMetadata::set_has_label_muted() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ViewpointMetadata::clear_has_label_muted() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ViewpointMetadata::clear_label_muted() {
  label_muted_ = false;
  clear_has_label_muted();
}
inline bool ViewpointMetadata::label_muted() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_muted)
  return label_muted_;
}
inline void ViewpointMetadata::set_label_muted(bool value) {
  set_has_label_muted();
  label_muted_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_muted)
}

// optional bool label_unrevivable = 27;
inline bool ViewpointMetadata::has_label_unrevivable() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ViewpointMetadata::set_has_label_unrevivable() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ViewpointMetadata::clear_has_label_unrevivable() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ViewpointMetadata::clear_label_unrevivable() {
  label_unrevivable_ = false;
  clear_has_label_unrevivable();
}
inline bool ViewpointMetadata::label_unrevivable() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_unrevivable)
  return label_unrevivable_;
}
inline void ViewpointMetadata::set_label_unrevivable(bool value) {
  set_has_label_unrevivable();
  label_unrevivable_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_unrevivable)
}

// optional bool label_error = 30;
inline bool ViewpointMetadata::has_label_error() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ViewpointMetadata::set_has_label_error() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ViewpointMetadata::clear_has_label_error() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ViewpointMetadata::clear_label_error() {
  label_error_ = false;
  clear_has_label_error();
}
inline bool ViewpointMetadata::label_error() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_error)
  return label_error_;
}
inline void ViewpointMetadata::set_label_error(bool value) {
  set_has_label_error();
  label_error_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_error)
}

// optional bool provisional = 45;
inline bool ViewpointMetadata::has_provisional() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ViewpointMetadata::set_has_provisional() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ViewpointMetadata::clear_has_provisional() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ViewpointMetadata::clear_provisional() {
  provisional_ = false;
  clear_has_provisional();
}
inline bool ViewpointMetadata::provisional() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.provisional)
  return provisional_;
}
inline void ViewpointMetadata::set_provisional(bool value) {
  set_has_provisional();
  provisional_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.provisional)
}

// optional bool update_metadata = 40;
inline bool ViewpointMetadata::has_update_metadata() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ViewpointMetadata::set_has_update_metadata() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ViewpointMetadata::clear_has_update_metadata() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ViewpointMetadata::clear_update_metadata() {
  update_metadata_ = false;
  clear_has_update_metadata();
}
inline bool ViewpointMetadata::update_metadata() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_metadata)
  return update_metadata_;
}
inline void ViewpointMetadata::set_update_metadata(bool value) {
  set_has_update_metadata();
  update_metadata_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_metadata)
}

// optional bool update_follower_metadata = 41;
inline bool ViewpointMetadata::has_update_follower_metadata() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ViewpointMetadata::set_has_update_follower_metadata() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ViewpointMetadata::clear_has_update_follower_metadata() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ViewpointMetadata::clear_update_follower_metadata() {
  update_follower_metadata_ = false;
  clear_has_update_follower_metadata();
}
inline bool ViewpointMetadata::update_follower_metadata() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_follower_metadata)
  return update_follower_metadata_;
}
inline void ViewpointMetadata::set_update_follower_metadata(bool value) {
  set_has_update_follower_metadata();
  update_follower_metadata_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_follower_metadata)
}

// optional bool update_remove = 44;
inline bool ViewpointMetadata::has_update_remove() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ViewpointMetadata::set_has_update_remove() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ViewpointMetadata::clear_has_update_remove() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ViewpointMetadata::clear_update_remove() {
  update_remove_ = false;
  clear_has_update_remove();
}
inline bool ViewpointMetadata::update_remove() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_remove)
  return update_remove_;
}
inline void ViewpointMetadata::set_update_remove(bool value) {
  set_has_update_remove();
  update_remove_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_remove)
}

// optional bool update_viewed_seq = 47;
inline bool ViewpointMetadata::has_update_viewed_seq() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ViewpointMetadata::set_has_update_viewed_seq() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ViewpointMetadata::clear_has_update_viewed_seq() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ViewpointMetadata::clear_update_viewed_seq() {
  update_viewed_seq_ = false;
  clear_has_update_viewed_seq();
}
inline bool ViewpointMetadata::update_viewed_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_viewed_seq)
  return update_viewed_seq_;
}
inline void ViewpointMetadata::set_update_viewed_seq(bool value) {
  set_has_update_viewed_seq();
  update_viewed_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_viewed_seq)
}

// repeated string indexed_terms = 46;
inline int ViewpointMetadata::indexed_terms_size() const {
  return indexed_terms_.size();
}
inline void ViewpointMetadata::clear_indexed_terms() {
  indexed_terms_.Clear();
}
inline const ::std::string& ViewpointMetadata::indexed_terms(int index) const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.indexed_terms)
  return indexed_terms_.Get(index);
}
inline ::std::string* ViewpointMetadata::mutable_indexed_terms(int index) {
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.indexed_terms)
  return indexed_terms_.Mutable(index);
}
inline void ViewpointMetadata::set_indexed_terms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ViewpointMetadata.indexed_terms)
  indexed_terms_.Mutable(index)->assign(value);
}
inline void ViewpointMetadata::set_indexed_terms(int index, const char* value) {
  indexed_terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.indexed_terms)
}
inline void ViewpointMetadata::set_indexed_terms(int index, const char* value, size_t size) {
  indexed_terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.indexed_terms)
}
inline ::std::string* ViewpointMetadata::add_indexed_terms() {
  // @@protoc_insertion_point(field_add_mutable:ViewpointMetadata.indexed_terms)
  return indexed_terms_.Add();
}
inline void ViewpointMetadata::add_indexed_terms(const ::std::string& value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ViewpointMetadata.indexed_terms)
}
inline void ViewpointMetadata::add_indexed_terms(const char* value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ViewpointMetadata.indexed_terms)
}
inline void ViewpointMetadata::add_indexed_terms(const char* value, size_t size) {
  indexed_terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ViewpointMetadata.indexed_terms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ViewpointMetadata::indexed_terms() const {
  // @@protoc_insertion_point(field_list:ViewpointMetadata.indexed_terms)
  return indexed_terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ViewpointMetadata::mutable_indexed_terms() {
  // @@protoc_insertion_point(field_mutable_list:ViewpointMetadata.indexed_terms)
  return &indexed_terms_;
}

// optional int64 DEPRECATED_last_viewed_seq = 42;
inline bool ViewpointMetadata::has_deprecated_last_viewed_seq() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ViewpointMetadata::set_has_deprecated_last_viewed_seq() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ViewpointMetadata::clear_has_deprecated_last_viewed_seq() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ViewpointMetadata::clear_deprecated_last_viewed_seq() {
  deprecated_last_viewed_seq_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_last_viewed_seq();
}
inline ::google::protobuf::int64 ViewpointMetadata::deprecated_last_viewed_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.DEPRECATED_last_viewed_seq)
  return deprecated_last_viewed_seq_;
}
inline void ViewpointMetadata::set_deprecated_last_viewed_seq(::google::protobuf::int64 value) {
  set_has_deprecated_last_viewed_seq();
  deprecated_last_viewed_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.DEPRECATED_last_viewed_seq)
}

// optional double DECPRECATED_last_viewed_timestamp = 43;
inline bool ViewpointMetadata::has_decprecated_last_viewed_timestamp() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ViewpointMetadata::set_has_decprecated_last_viewed_timestamp() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ViewpointMetadata::clear_has_decprecated_last_viewed_timestamp() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ViewpointMetadata::clear_decprecated_last_viewed_timestamp() {
  decprecated_last_viewed_timestamp_ = 0;
  clear_has_decprecated_last_viewed_timestamp();
}
inline double ViewpointMetadata::decprecated_last_viewed_timestamp() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.DECPRECATED_last_viewed_timestamp)
  return decprecated_last_viewed_timestamp_;
}
inline void ViewpointMetadata::set_decprecated_last_viewed_timestamp(double value) {
  set_has_decprecated_last_viewed_timestamp();
  decprecated_last_viewed_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.DECPRECATED_last_viewed_timestamp)
}

inline const ViewpointMetadata* ViewpointMetadata::internal_default_instance() {
  return &ViewpointMetadata_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ViewpointMetadata_2eproto__INCLUDED
