// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Placemark.proto

#ifndef PROTOBUF_Placemark_2eproto__INCLUDED
#define PROTOBUF_Placemark_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Placemark_2eproto();
void protobuf_InitDefaults_Placemark_2eproto();
void protobuf_AssignDesc_Placemark_2eproto();
void protobuf_ShutdownFile_Placemark_2eproto();

class Placemark;

// ===================================================================

class Placemark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Placemark) */ {
 public:
  Placemark();
  virtual ~Placemark();

  Placemark(const Placemark& from);

  inline Placemark& operator=(const Placemark& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Placemark& default_instance();

  static const Placemark* internal_default_instance();

  void Swap(Placemark* other);

  // implements Message ----------------------------------------------

  inline Placemark* New() const { return New(NULL); }

  Placemark* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Placemark& from);
  void MergeFrom(const Placemark& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Placemark* other);
  void UnsafeMergeFrom(const Placemark& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string iso_country_code = 1;
  bool has_iso_country_code() const;
  void clear_iso_country_code();
  static const int kIsoCountryCodeFieldNumber = 1;
  const ::std::string& iso_country_code() const;
  void set_iso_country_code(const ::std::string& value);
  void set_iso_country_code(const char* value);
  void set_iso_country_code(const char* value, size_t size);
  ::std::string* mutable_iso_country_code();
  ::std::string* release_iso_country_code();
  void set_allocated_iso_country_code(::std::string* iso_country_code);

  // optional string country = 2;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 2;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // optional string postal_code = 4;
  bool has_postal_code() const;
  void clear_postal_code();
  static const int kPostalCodeFieldNumber = 4;
  const ::std::string& postal_code() const;
  void set_postal_code(const ::std::string& value);
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  ::std::string* mutable_postal_code();
  ::std::string* release_postal_code();
  void set_allocated_postal_code(::std::string* postal_code);

  // optional string locality = 5;
  bool has_locality() const;
  void clear_locality();
  static const int kLocalityFieldNumber = 5;
  const ::std::string& locality() const;
  void set_locality(const ::std::string& value);
  void set_locality(const char* value);
  void set_locality(const char* value, size_t size);
  ::std::string* mutable_locality();
  ::std::string* release_locality();
  void set_allocated_locality(::std::string* locality);

  // optional string sublocality = 6;
  bool has_sublocality() const;
  void clear_sublocality();
  static const int kSublocalityFieldNumber = 6;
  const ::std::string& sublocality() const;
  void set_sublocality(const ::std::string& value);
  void set_sublocality(const char* value);
  void set_sublocality(const char* value, size_t size);
  ::std::string* mutable_sublocality();
  ::std::string* release_sublocality();
  void set_allocated_sublocality(::std::string* sublocality);

  // optional string thoroughfare = 7;
  bool has_thoroughfare() const;
  void clear_thoroughfare();
  static const int kThoroughfareFieldNumber = 7;
  const ::std::string& thoroughfare() const;
  void set_thoroughfare(const ::std::string& value);
  void set_thoroughfare(const char* value);
  void set_thoroughfare(const char* value, size_t size);
  ::std::string* mutable_thoroughfare();
  ::std::string* release_thoroughfare();
  void set_allocated_thoroughfare(::std::string* thoroughfare);

  // optional string subthoroughfare = 8;
  bool has_subthoroughfare() const;
  void clear_subthoroughfare();
  static const int kSubthoroughfareFieldNumber = 8;
  const ::std::string& subthoroughfare() const;
  void set_subthoroughfare(const ::std::string& value);
  void set_subthoroughfare(const char* value);
  void set_subthoroughfare(const char* value, size_t size);
  ::std::string* mutable_subthoroughfare();
  ::std::string* release_subthoroughfare();
  void set_allocated_subthoroughfare(::std::string* subthoroughfare);

  // @@protoc_insertion_point(class_scope:Placemark)
 private:
  inline void set_has_iso_country_code();
  inline void clear_has_iso_country_code();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_postal_code();
  inline void clear_has_postal_code();
  inline void set_has_locality();
  inline void clear_has_locality();
  inline void set_has_sublocality();
  inline void clear_has_sublocality();
  inline void set_has_thoroughfare();
  inline void clear_has_thoroughfare();
  inline void set_has_subthoroughfare();
  inline void clear_has_subthoroughfare();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr iso_country_code_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr postal_code_;
  ::google::protobuf::internal::ArenaStringPtr locality_;
  ::google::protobuf::internal::ArenaStringPtr sublocality_;
  ::google::protobuf::internal::ArenaStringPtr thoroughfare_;
  ::google::protobuf::internal::ArenaStringPtr subthoroughfare_;
  friend void  protobuf_InitDefaults_Placemark_2eproto_impl();
  friend void  protobuf_AddDesc_Placemark_2eproto_impl();
  friend void protobuf_AssignDesc_Placemark_2eproto();
  friend void protobuf_ShutdownFile_Placemark_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Placemark> Placemark_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Placemark

// optional string iso_country_code = 1;
inline bool Placemark::has_iso_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Placemark::set_has_iso_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Placemark::clear_has_iso_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Placemark::clear_iso_country_code() {
  iso_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iso_country_code();
}
inline const ::std::string& Placemark::iso_country_code() const {
  // @@protoc_insertion_point(field_get:Placemark.iso_country_code)
  return iso_country_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_iso_country_code(const ::std::string& value) {
  set_has_iso_country_code();
  iso_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.iso_country_code)
}
inline void Placemark::set_iso_country_code(const char* value) {
  set_has_iso_country_code();
  iso_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.iso_country_code)
}
inline void Placemark::set_iso_country_code(const char* value, size_t size) {
  set_has_iso_country_code();
  iso_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.iso_country_code)
}
inline ::std::string* Placemark::mutable_iso_country_code() {
  set_has_iso_country_code();
  // @@protoc_insertion_point(field_mutable:Placemark.iso_country_code)
  return iso_country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Placemark::release_iso_country_code() {
  // @@protoc_insertion_point(field_release:Placemark.iso_country_code)
  clear_has_iso_country_code();
  return iso_country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_allocated_iso_country_code(::std::string* iso_country_code) {
  if (iso_country_code != NULL) {
    set_has_iso_country_code();
  } else {
    clear_has_iso_country_code();
  }
  iso_country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iso_country_code);
  // @@protoc_insertion_point(field_set_allocated:Placemark.iso_country_code)
}

// optional string country = 2;
inline bool Placemark::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Placemark::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Placemark::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Placemark::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& Placemark::country() const {
  // @@protoc_insertion_point(field_get:Placemark.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.country)
}
inline void Placemark::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.country)
}
inline void Placemark::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.country)
}
inline ::std::string* Placemark::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:Placemark.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Placemark::release_country() {
  // @@protoc_insertion_point(field_release:Placemark.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:Placemark.country)
}

// optional string state = 3;
inline bool Placemark::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Placemark::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Placemark::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Placemark::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
inline const ::std::string& Placemark::state() const {
  // @@protoc_insertion_point(field_get:Placemark.state)
  return state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.state)
}
inline void Placemark::set_state(const char* value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.state)
}
inline void Placemark::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.state)
}
inline ::std::string* Placemark::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:Placemark.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Placemark::release_state() {
  // @@protoc_insertion_point(field_release:Placemark.state)
  clear_has_state();
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:Placemark.state)
}

// optional string postal_code = 4;
inline bool Placemark::has_postal_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Placemark::set_has_postal_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Placemark::clear_has_postal_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Placemark::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postal_code();
}
inline const ::std::string& Placemark::postal_code() const {
  // @@protoc_insertion_point(field_get:Placemark.postal_code)
  return postal_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_postal_code(const ::std::string& value) {
  set_has_postal_code();
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.postal_code)
}
inline void Placemark::set_postal_code(const char* value) {
  set_has_postal_code();
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.postal_code)
}
inline void Placemark::set_postal_code(const char* value, size_t size) {
  set_has_postal_code();
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.postal_code)
}
inline ::std::string* Placemark::mutable_postal_code() {
  set_has_postal_code();
  // @@protoc_insertion_point(field_mutable:Placemark.postal_code)
  return postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Placemark::release_postal_code() {
  // @@protoc_insertion_point(field_release:Placemark.postal_code)
  clear_has_postal_code();
  return postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_allocated_postal_code(::std::string* postal_code) {
  if (postal_code != NULL) {
    set_has_postal_code();
  } else {
    clear_has_postal_code();
  }
  postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:Placemark.postal_code)
}

// optional string locality = 5;
inline bool Placemark::has_locality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Placemark::set_has_locality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Placemark::clear_has_locality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Placemark::clear_locality() {
  locality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locality();
}
inline const ::std::string& Placemark::locality() const {
  // @@protoc_insertion_point(field_get:Placemark.locality)
  return locality_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_locality(const ::std::string& value) {
  set_has_locality();
  locality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.locality)
}
inline void Placemark::set_locality(const char* value) {
  set_has_locality();
  locality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.locality)
}
inline void Placemark::set_locality(const char* value, size_t size) {
  set_has_locality();
  locality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.locality)
}
inline ::std::string* Placemark::mutable_locality() {
  set_has_locality();
  // @@protoc_insertion_point(field_mutable:Placemark.locality)
  return locality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Placemark::release_locality() {
  // @@protoc_insertion_point(field_release:Placemark.locality)
  clear_has_locality();
  return locality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_allocated_locality(::std::string* locality) {
  if (locality != NULL) {
    set_has_locality();
  } else {
    clear_has_locality();
  }
  locality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locality);
  // @@protoc_insertion_point(field_set_allocated:Placemark.locality)
}

// optional string sublocality = 6;
inline bool Placemark::has_sublocality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Placemark::set_has_sublocality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Placemark::clear_has_sublocality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Placemark::clear_sublocality() {
  sublocality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sublocality();
}
inline const ::std::string& Placemark::sublocality() const {
  // @@protoc_insertion_point(field_get:Placemark.sublocality)
  return sublocality_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_sublocality(const ::std::string& value) {
  set_has_sublocality();
  sublocality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.sublocality)
}
inline void Placemark::set_sublocality(const char* value) {
  set_has_sublocality();
  sublocality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.sublocality)
}
inline void Placemark::set_sublocality(const char* value, size_t size) {
  set_has_sublocality();
  sublocality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.sublocality)
}
inline ::std::string* Placemark::mutable_sublocality() {
  set_has_sublocality();
  // @@protoc_insertion_point(field_mutable:Placemark.sublocality)
  return sublocality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Placemark::release_sublocality() {
  // @@protoc_insertion_point(field_release:Placemark.sublocality)
  clear_has_sublocality();
  return sublocality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_allocated_sublocality(::std::string* sublocality) {
  if (sublocality != NULL) {
    set_has_sublocality();
  } else {
    clear_has_sublocality();
  }
  sublocality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sublocality);
  // @@protoc_insertion_point(field_set_allocated:Placemark.sublocality)
}

// optional string thoroughfare = 7;
inline bool Placemark::has_thoroughfare() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Placemark::set_has_thoroughfare() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Placemark::clear_has_thoroughfare() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Placemark::clear_thoroughfare() {
  thoroughfare_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thoroughfare();
}
inline const ::std::string& Placemark::thoroughfare() const {
  // @@protoc_insertion_point(field_get:Placemark.thoroughfare)
  return thoroughfare_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_thoroughfare(const ::std::string& value) {
  set_has_thoroughfare();
  thoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.thoroughfare)
}
inline void Placemark::set_thoroughfare(const char* value) {
  set_has_thoroughfare();
  thoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.thoroughfare)
}
inline void Placemark::set_thoroughfare(const char* value, size_t size) {
  set_has_thoroughfare();
  thoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.thoroughfare)
}
inline ::std::string* Placemark::mutable_thoroughfare() {
  set_has_thoroughfare();
  // @@protoc_insertion_point(field_mutable:Placemark.thoroughfare)
  return thoroughfare_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Placemark::release_thoroughfare() {
  // @@protoc_insertion_point(field_release:Placemark.thoroughfare)
  clear_has_thoroughfare();
  return thoroughfare_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_allocated_thoroughfare(::std::string* thoroughfare) {
  if (thoroughfare != NULL) {
    set_has_thoroughfare();
  } else {
    clear_has_thoroughfare();
  }
  thoroughfare_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thoroughfare);
  // @@protoc_insertion_point(field_set_allocated:Placemark.thoroughfare)
}

// optional string subthoroughfare = 8;
inline bool Placemark::has_subthoroughfare() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Placemark::set_has_subthoroughfare() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Placemark::clear_has_subthoroughfare() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Placemark::clear_subthoroughfare() {
  subthoroughfare_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subthoroughfare();
}
inline const ::std::string& Placemark::subthoroughfare() const {
  // @@protoc_insertion_point(field_get:Placemark.subthoroughfare)
  return subthoroughfare_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_subthoroughfare(const ::std::string& value) {
  set_has_subthoroughfare();
  subthoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.subthoroughfare)
}
inline void Placemark::set_subthoroughfare(const char* value) {
  set_has_subthoroughfare();
  subthoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.subthoroughfare)
}
inline void Placemark::set_subthoroughfare(const char* value, size_t size) {
  set_has_subthoroughfare();
  subthoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.subthoroughfare)
}
inline ::std::string* Placemark::mutable_subthoroughfare() {
  set_has_subthoroughfare();
  // @@protoc_insertion_point(field_mutable:Placemark.subthoroughfare)
  return subthoroughfare_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Placemark::release_subthoroughfare() {
  // @@protoc_insertion_point(field_release:Placemark.subthoroughfare)
  clear_has_subthoroughfare();
  return subthoroughfare_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placemark::set_allocated_subthoroughfare(::std::string* subthoroughfare) {
  if (subthoroughfare != NULL) {
    set_has_subthoroughfare();
  } else {
    clear_has_subthoroughfare();
  }
  subthoroughfare_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subthoroughfare);
  // @@protoc_insertion_point(field_set_allocated:Placemark.subthoroughfare)
}

inline const Placemark* Placemark::internal_default_instance() {
  return &Placemark_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Placemark_2eproto__INCLUDED
