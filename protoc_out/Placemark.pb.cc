// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Placemark.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Placemark.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Placemark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Placemark_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Placemark_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Placemark_2eproto() {
  protobuf_AddDesc_Placemark_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Placemark.proto");
  GOOGLE_CHECK(file != NULL);
  Placemark_descriptor_ = file->message_type(0);
  static const int Placemark_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, iso_country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, postal_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, sublocality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, thoroughfare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, subthoroughfare_),
  };
  Placemark_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Placemark_descriptor_,
      Placemark::internal_default_instance(),
      Placemark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, _has_bits_),
      -1,
      -1,
      sizeof(Placemark),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Placemark, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Placemark_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Placemark_descriptor_, Placemark::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Placemark_2eproto() {
  Placemark_default_instance_.Shutdown();
  delete Placemark_reflection_;
}

void protobuf_InitDefaults_Placemark_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Placemark_default_instance_.DefaultConstruct();
  Placemark_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Placemark_2eproto_once_);
void protobuf_InitDefaults_Placemark_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Placemark_2eproto_once_,
                 &protobuf_InitDefaults_Placemark_2eproto_impl);
}
void protobuf_AddDesc_Placemark_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Placemark_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Placemark.proto\"\260\001\n\tPlacemark\022\030\n\020iso_c"
    "ountry_code\030\001 \001(\t\022\017\n\007country\030\002 \001(\t\022\r\n\005st"
    "ate\030\003 \001(\t\022\023\n\013postal_code\030\004 \001(\t\022\020\n\010locali"
    "ty\030\005 \001(\t\022\023\n\013sublocality\030\006 \001(\t\022\024\n\014thoroug"
    "hfare\030\007 \001(\t\022\027\n\017subthoroughfare\030\010 \001(\tB\"\n\023"
    "co.viewfinder.protoB\013PlacemarkPB", 232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Placemark.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Placemark_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Placemark_2eproto_once_);
void protobuf_AddDesc_Placemark_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Placemark_2eproto_once_,
                 &protobuf_AddDesc_Placemark_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Placemark_2eproto {
  StaticDescriptorInitializer_Placemark_2eproto() {
    protobuf_AddDesc_Placemark_2eproto();
  }
} static_descriptor_initializer_Placemark_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Placemark::kIsoCountryCodeFieldNumber;
const int Placemark::kCountryFieldNumber;
const int Placemark::kStateFieldNumber;
const int Placemark::kPostalCodeFieldNumber;
const int Placemark::kLocalityFieldNumber;
const int Placemark::kSublocalityFieldNumber;
const int Placemark::kThoroughfareFieldNumber;
const int Placemark::kSubthoroughfareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Placemark::Placemark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Placemark_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Placemark)
}

void Placemark::InitAsDefaultInstance() {
}

Placemark::Placemark(const Placemark& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Placemark)
}

void Placemark::SharedCtor() {
  _cached_size_ = 0;
  iso_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sublocality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thoroughfare_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subthoroughfare_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Placemark::~Placemark() {
  // @@protoc_insertion_point(destructor:Placemark)
  SharedDtor();
}

void Placemark::SharedDtor() {
  iso_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sublocality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thoroughfare_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subthoroughfare_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Placemark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Placemark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Placemark_descriptor_;
}

const Placemark& Placemark::default_instance() {
  protobuf_InitDefaults_Placemark_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Placemark> Placemark_default_instance_;

Placemark* Placemark::New(::google::protobuf::Arena* arena) const {
  Placemark* n = new Placemark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Placemark::Clear() {
// @@protoc_insertion_point(message_clear_start:Placemark)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_iso_country_code()) {
      iso_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_state()) {
      state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_postal_code()) {
      postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_locality()) {
      locality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sublocality()) {
      sublocality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_thoroughfare()) {
      thoroughfare_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_subthoroughfare()) {
      subthoroughfare_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Placemark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Placemark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string iso_country_code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iso_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iso_country_code().data(), this->iso_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Placemark.iso_country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_country;
        break;
      }

      // optional string country = 2;
      case 2: {
        if (tag == 18) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Placemark.country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_state;
        break;
      }

      // optional string state = 3;
      case 3: {
        if (tag == 26) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Placemark.state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 4;
      case 4: {
        if (tag == 34) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Placemark.postal_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_locality;
        break;
      }

      // optional string locality = 5;
      case 5: {
        if (tag == 42) {
         parse_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->locality().data(), this->locality().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Placemark.locality");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sublocality;
        break;
      }

      // optional string sublocality = 6;
      case 6: {
        if (tag == 50) {
         parse_sublocality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sublocality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sublocality().data(), this->sublocality().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Placemark.sublocality");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_thoroughfare;
        break;
      }

      // optional string thoroughfare = 7;
      case 7: {
        if (tag == 58) {
         parse_thoroughfare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thoroughfare()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thoroughfare().data(), this->thoroughfare().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Placemark.thoroughfare");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_subthoroughfare;
        break;
      }

      // optional string subthoroughfare = 8;
      case 8: {
        if (tag == 66) {
         parse_subthoroughfare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subthoroughfare()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subthoroughfare().data(), this->subthoroughfare().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Placemark.subthoroughfare");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Placemark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Placemark)
  return false;
#undef DO_
}

void Placemark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Placemark)
  // optional string iso_country_code = 1;
  if (has_iso_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iso_country_code().data(), this->iso_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.iso_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->iso_country_code(), output);
  }

  // optional string country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->country(), output);
  }

  // optional string state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->state(), output);
  }

  // optional string postal_code = 4;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.postal_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->postal_code(), output);
  }

  // optional string locality = 5;
  if (has_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->locality().data(), this->locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.locality");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->locality(), output);
  }

  // optional string sublocality = 6;
  if (has_sublocality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sublocality().data(), this->sublocality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.sublocality");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sublocality(), output);
  }

  // optional string thoroughfare = 7;
  if (has_thoroughfare()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thoroughfare().data(), this->thoroughfare().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.thoroughfare");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->thoroughfare(), output);
  }

  // optional string subthoroughfare = 8;
  if (has_subthoroughfare()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subthoroughfare().data(), this->subthoroughfare().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.subthoroughfare");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->subthoroughfare(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Placemark)
}

::google::protobuf::uint8* Placemark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Placemark)
  // optional string iso_country_code = 1;
  if (has_iso_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iso_country_code().data(), this->iso_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.iso_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->iso_country_code(), target);
  }

  // optional string country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country(), target);
  }

  // optional string state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->state(), target);
  }

  // optional string postal_code = 4;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.postal_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->postal_code(), target);
  }

  // optional string locality = 5;
  if (has_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->locality().data(), this->locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.locality");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->locality(), target);
  }

  // optional string sublocality = 6;
  if (has_sublocality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sublocality().data(), this->sublocality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.sublocality");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sublocality(), target);
  }

  // optional string thoroughfare = 7;
  if (has_thoroughfare()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thoroughfare().data(), this->thoroughfare().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.thoroughfare");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->thoroughfare(), target);
  }

  // optional string subthoroughfare = 8;
  if (has_subthoroughfare()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subthoroughfare().data(), this->subthoroughfare().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Placemark.subthoroughfare");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subthoroughfare(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Placemark)
  return target;
}

size_t Placemark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Placemark)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string iso_country_code = 1;
    if (has_iso_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iso_country_code());
    }

    // optional string country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string postal_code = 4;
    if (has_postal_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

    // optional string locality = 5;
    if (has_locality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locality());
    }

    // optional string sublocality = 6;
    if (has_sublocality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sublocality());
    }

    // optional string thoroughfare = 7;
    if (has_thoroughfare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thoroughfare());
    }

    // optional string subthoroughfare = 8;
    if (has_subthoroughfare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subthoroughfare());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Placemark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Placemark)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Placemark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Placemark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Placemark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Placemark)
    UnsafeMergeFrom(*source);
  }
}

void Placemark::MergeFrom(const Placemark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Placemark)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Placemark::UnsafeMergeFrom(const Placemark& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iso_country_code()) {
      set_has_iso_country_code();
      iso_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iso_country_code_);
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_state()) {
      set_has_state();
      state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
    }
    if (from.has_postal_code()) {
      set_has_postal_code();
      postal_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
    }
    if (from.has_locality()) {
      set_has_locality();
      locality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locality_);
    }
    if (from.has_sublocality()) {
      set_has_sublocality();
      sublocality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sublocality_);
    }
    if (from.has_thoroughfare()) {
      set_has_thoroughfare();
      thoroughfare_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thoroughfare_);
    }
    if (from.has_subthoroughfare()) {
      set_has_subthoroughfare();
      subthoroughfare_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subthoroughfare_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Placemark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Placemark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Placemark::CopyFrom(const Placemark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Placemark)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Placemark::IsInitialized() const {

  return true;
}

void Placemark::Swap(Placemark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Placemark::InternalSwap(Placemark* other) {
  iso_country_code_.Swap(&other->iso_country_code_);
  country_.Swap(&other->country_);
  state_.Swap(&other->state_);
  postal_code_.Swap(&other->postal_code_);
  locality_.Swap(&other->locality_);
  sublocality_.Swap(&other->sublocality_);
  thoroughfare_.Swap(&other->thoroughfare_);
  subthoroughfare_.Swap(&other->subthoroughfare_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Placemark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Placemark_descriptor_;
  metadata.reflection = Placemark_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Placemark

// optional string iso_country_code = 1;
bool Placemark::has_iso_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Placemark::set_has_iso_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
void Placemark::clear_has_iso_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void Placemark::clear_iso_country_code() {
  iso_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iso_country_code();
}
const ::std::string& Placemark::iso_country_code() const {
  // @@protoc_insertion_point(field_get:Placemark.iso_country_code)
  return iso_country_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_iso_country_code(const ::std::string& value) {
  set_has_iso_country_code();
  iso_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.iso_country_code)
}
void Placemark::set_iso_country_code(const char* value) {
  set_has_iso_country_code();
  iso_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.iso_country_code)
}
void Placemark::set_iso_country_code(const char* value, size_t size) {
  set_has_iso_country_code();
  iso_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.iso_country_code)
}
::std::string* Placemark::mutable_iso_country_code() {
  set_has_iso_country_code();
  // @@protoc_insertion_point(field_mutable:Placemark.iso_country_code)
  return iso_country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Placemark::release_iso_country_code() {
  // @@protoc_insertion_point(field_release:Placemark.iso_country_code)
  clear_has_iso_country_code();
  return iso_country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_allocated_iso_country_code(::std::string* iso_country_code) {
  if (iso_country_code != NULL) {
    set_has_iso_country_code();
  } else {
    clear_has_iso_country_code();
  }
  iso_country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iso_country_code);
  // @@protoc_insertion_point(field_set_allocated:Placemark.iso_country_code)
}

// optional string country = 2;
bool Placemark::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Placemark::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
void Placemark::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
void Placemark::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& Placemark::country() const {
  // @@protoc_insertion_point(field_get:Placemark.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.country)
}
void Placemark::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.country)
}
void Placemark::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.country)
}
::std::string* Placemark::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:Placemark.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Placemark::release_country() {
  // @@protoc_insertion_point(field_release:Placemark.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:Placemark.country)
}

// optional string state = 3;
bool Placemark::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Placemark::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void Placemark::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void Placemark::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
const ::std::string& Placemark::state() const {
  // @@protoc_insertion_point(field_get:Placemark.state)
  return state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.state)
}
void Placemark::set_state(const char* value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.state)
}
void Placemark::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.state)
}
::std::string* Placemark::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:Placemark.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Placemark::release_state() {
  // @@protoc_insertion_point(field_release:Placemark.state)
  clear_has_state();
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:Placemark.state)
}

// optional string postal_code = 4;
bool Placemark::has_postal_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Placemark::set_has_postal_code() {
  _has_bits_[0] |= 0x00000008u;
}
void Placemark::clear_has_postal_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void Placemark::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postal_code();
}
const ::std::string& Placemark::postal_code() const {
  // @@protoc_insertion_point(field_get:Placemark.postal_code)
  return postal_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_postal_code(const ::std::string& value) {
  set_has_postal_code();
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.postal_code)
}
void Placemark::set_postal_code(const char* value) {
  set_has_postal_code();
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.postal_code)
}
void Placemark::set_postal_code(const char* value, size_t size) {
  set_has_postal_code();
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.postal_code)
}
::std::string* Placemark::mutable_postal_code() {
  set_has_postal_code();
  // @@protoc_insertion_point(field_mutable:Placemark.postal_code)
  return postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Placemark::release_postal_code() {
  // @@protoc_insertion_point(field_release:Placemark.postal_code)
  clear_has_postal_code();
  return postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_allocated_postal_code(::std::string* postal_code) {
  if (postal_code != NULL) {
    set_has_postal_code();
  } else {
    clear_has_postal_code();
  }
  postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:Placemark.postal_code)
}

// optional string locality = 5;
bool Placemark::has_locality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Placemark::set_has_locality() {
  _has_bits_[0] |= 0x00000010u;
}
void Placemark::clear_has_locality() {
  _has_bits_[0] &= ~0x00000010u;
}
void Placemark::clear_locality() {
  locality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locality();
}
const ::std::string& Placemark::locality() const {
  // @@protoc_insertion_point(field_get:Placemark.locality)
  return locality_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_locality(const ::std::string& value) {
  set_has_locality();
  locality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.locality)
}
void Placemark::set_locality(const char* value) {
  set_has_locality();
  locality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.locality)
}
void Placemark::set_locality(const char* value, size_t size) {
  set_has_locality();
  locality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.locality)
}
::std::string* Placemark::mutable_locality() {
  set_has_locality();
  // @@protoc_insertion_point(field_mutable:Placemark.locality)
  return locality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Placemark::release_locality() {
  // @@protoc_insertion_point(field_release:Placemark.locality)
  clear_has_locality();
  return locality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_allocated_locality(::std::string* locality) {
  if (locality != NULL) {
    set_has_locality();
  } else {
    clear_has_locality();
  }
  locality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locality);
  // @@protoc_insertion_point(field_set_allocated:Placemark.locality)
}

// optional string sublocality = 6;
bool Placemark::has_sublocality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Placemark::set_has_sublocality() {
  _has_bits_[0] |= 0x00000020u;
}
void Placemark::clear_has_sublocality() {
  _has_bits_[0] &= ~0x00000020u;
}
void Placemark::clear_sublocality() {
  sublocality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sublocality();
}
const ::std::string& Placemark::sublocality() const {
  // @@protoc_insertion_point(field_get:Placemark.sublocality)
  return sublocality_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_sublocality(const ::std::string& value) {
  set_has_sublocality();
  sublocality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.sublocality)
}
void Placemark::set_sublocality(const char* value) {
  set_has_sublocality();
  sublocality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.sublocality)
}
void Placemark::set_sublocality(const char* value, size_t size) {
  set_has_sublocality();
  sublocality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.sublocality)
}
::std::string* Placemark::mutable_sublocality() {
  set_has_sublocality();
  // @@protoc_insertion_point(field_mutable:Placemark.sublocality)
  return sublocality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Placemark::release_sublocality() {
  // @@protoc_insertion_point(field_release:Placemark.sublocality)
  clear_has_sublocality();
  return sublocality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_allocated_sublocality(::std::string* sublocality) {
  if (sublocality != NULL) {
    set_has_sublocality();
  } else {
    clear_has_sublocality();
  }
  sublocality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sublocality);
  // @@protoc_insertion_point(field_set_allocated:Placemark.sublocality)
}

// optional string thoroughfare = 7;
bool Placemark::has_thoroughfare() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Placemark::set_has_thoroughfare() {
  _has_bits_[0] |= 0x00000040u;
}
void Placemark::clear_has_thoroughfare() {
  _has_bits_[0] &= ~0x00000040u;
}
void Placemark::clear_thoroughfare() {
  thoroughfare_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_thoroughfare();
}
const ::std::string& Placemark::thoroughfare() const {
  // @@protoc_insertion_point(field_get:Placemark.thoroughfare)
  return thoroughfare_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_thoroughfare(const ::std::string& value) {
  set_has_thoroughfare();
  thoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.thoroughfare)
}
void Placemark::set_thoroughfare(const char* value) {
  set_has_thoroughfare();
  thoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.thoroughfare)
}
void Placemark::set_thoroughfare(const char* value, size_t size) {
  set_has_thoroughfare();
  thoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.thoroughfare)
}
::std::string* Placemark::mutable_thoroughfare() {
  set_has_thoroughfare();
  // @@protoc_insertion_point(field_mutable:Placemark.thoroughfare)
  return thoroughfare_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Placemark::release_thoroughfare() {
  // @@protoc_insertion_point(field_release:Placemark.thoroughfare)
  clear_has_thoroughfare();
  return thoroughfare_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_allocated_thoroughfare(::std::string* thoroughfare) {
  if (thoroughfare != NULL) {
    set_has_thoroughfare();
  } else {
    clear_has_thoroughfare();
  }
  thoroughfare_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thoroughfare);
  // @@protoc_insertion_point(field_set_allocated:Placemark.thoroughfare)
}

// optional string subthoroughfare = 8;
bool Placemark::has_subthoroughfare() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Placemark::set_has_subthoroughfare() {
  _has_bits_[0] |= 0x00000080u;
}
void Placemark::clear_has_subthoroughfare() {
  _has_bits_[0] &= ~0x00000080u;
}
void Placemark::clear_subthoroughfare() {
  subthoroughfare_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subthoroughfare();
}
const ::std::string& Placemark::subthoroughfare() const {
  // @@protoc_insertion_point(field_get:Placemark.subthoroughfare)
  return subthoroughfare_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_subthoroughfare(const ::std::string& value) {
  set_has_subthoroughfare();
  subthoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Placemark.subthoroughfare)
}
void Placemark::set_subthoroughfare(const char* value) {
  set_has_subthoroughfare();
  subthoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Placemark.subthoroughfare)
}
void Placemark::set_subthoroughfare(const char* value, size_t size) {
  set_has_subthoroughfare();
  subthoroughfare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Placemark.subthoroughfare)
}
::std::string* Placemark::mutable_subthoroughfare() {
  set_has_subthoroughfare();
  // @@protoc_insertion_point(field_mutable:Placemark.subthoroughfare)
  return subthoroughfare_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Placemark::release_subthoroughfare() {
  // @@protoc_insertion_point(field_release:Placemark.subthoroughfare)
  clear_has_subthoroughfare();
  return subthoroughfare_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Placemark::set_allocated_subthoroughfare(::std::string* subthoroughfare) {
  if (subthoroughfare != NULL) {
    set_has_subthoroughfare();
  } else {
    clear_has_subthoroughfare();
  }
  subthoroughfare_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subthoroughfare);
  // @@protoc_insertion_point(field_set_allocated:Placemark.subthoroughfare)
}

inline const Placemark* Placemark::internal_default_instance() {
  return &Placemark_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
