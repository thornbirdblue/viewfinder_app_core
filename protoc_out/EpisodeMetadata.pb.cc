// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EpisodeMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EpisodeMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EpisodeMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EpisodeMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EpisodeMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_EpisodeMetadata_2eproto() {
  protobuf_AddDesc_EpisodeMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EpisodeMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  EpisodeMetadata_descriptor_ = file->message_type(0);
  static const int EpisodeMetadata_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, viewpoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, sharing_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, publish_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, earliest_photo_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, latest_photo_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, upload_episode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, indexed_terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, indexed_location_terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, deprecated_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, deprecated_placemark_),
  };
  EpisodeMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EpisodeMetadata_descriptor_,
      EpisodeMetadata::internal_default_instance(),
      EpisodeMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, _has_bits_),
      -1,
      -1,
      sizeof(EpisodeMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeMetadata, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EpisodeMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EpisodeMetadata_descriptor_, EpisodeMetadata::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EpisodeMetadata_2eproto() {
  EpisodeMetadata_default_instance_.Shutdown();
  delete EpisodeMetadata_reflection_;
}

void protobuf_InitDefaults_EpisodeMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_ContentIds_2eproto();
  ::protobuf_InitDefaults_ContactMetadata_2eproto();
  ::protobuf_InitDefaults_Location_2eproto();
  ::protobuf_InitDefaults_Placemark_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  EpisodeMetadata_default_instance_.DefaultConstruct();
  EpisodeMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_EpisodeMetadata_2eproto_once_);
void protobuf_InitDefaults_EpisodeMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_EpisodeMetadata_2eproto_once_,
                 &protobuf_InitDefaults_EpisodeMetadata_2eproto_impl);
}
void protobuf_AddDesc_EpisodeMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_EpisodeMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025EpisodeMetadata.proto\032\020ContentIds.prot"
    "o\032\025ContactMetadata.proto\032\016Location.proto"
    "\032\017Placemark.proto\"\331\003\n\017EpisodeMetadata\022\026\n"
    "\002id\030\001 \001(\0132\n.EpisodeId\022\035\n\tparent_id\030\002 \001(\013"
    "2\n.EpisodeId\022\"\n\014viewpoint_id\030\003 \001(\0132\014.Vie"
    "wpointId\022\017\n\007user_id\030\004 \001(\003\022\027\n\017sharing_use"
    "r_id\030\005 \001(\003\022\021\n\ttimestamp\030\006 \001(\001\022\031\n\021publish"
    "_timestamp\030\014 \001(\001\022\r\n\005title\030\007 \001(\t\022\023\n\013descr"
    "iption\030\010 \001(\t\022\014\n\004name\030\013 \001(\t\022 \n\030earliest_p"
    "hoto_timestamp\030\036 \001(\001\022\036\n\026latest_photo_tim"
    "estamp\030\037 \001(\001\022\026\n\016upload_episode\030  \001(\010\022\025\n\r"
    "indexed_terms\030! \003(\t\022\036\n\026indexed_location_"
    "terms\030\" \003(\t\022&\n\023DEPRECATED_location\030\t \001(\013"
    "2\t.Location\022(\n\024DEPRECATED_placemark\030\n \001("
    "\0132\n.PlacemarkB(\n\023co.viewfinder.protoB\021Ep"
    "isodeMetadataPB", 615);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EpisodeMetadata.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_ContentIds_2eproto();
  ::protobuf_AddDesc_ContactMetadata_2eproto();
  ::protobuf_AddDesc_Location_2eproto();
  ::protobuf_AddDesc_Placemark_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EpisodeMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EpisodeMetadata_2eproto_once_);
void protobuf_AddDesc_EpisodeMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EpisodeMetadata_2eproto_once_,
                 &protobuf_AddDesc_EpisodeMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EpisodeMetadata_2eproto {
  StaticDescriptorInitializer_EpisodeMetadata_2eproto() {
    protobuf_AddDesc_EpisodeMetadata_2eproto();
  }
} static_descriptor_initializer_EpisodeMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpisodeMetadata::kIdFieldNumber;
const int EpisodeMetadata::kParentIdFieldNumber;
const int EpisodeMetadata::kViewpointIdFieldNumber;
const int EpisodeMetadata::kUserIdFieldNumber;
const int EpisodeMetadata::kSharingUserIdFieldNumber;
const int EpisodeMetadata::kTimestampFieldNumber;
const int EpisodeMetadata::kPublishTimestampFieldNumber;
const int EpisodeMetadata::kTitleFieldNumber;
const int EpisodeMetadata::kDescriptionFieldNumber;
const int EpisodeMetadata::kNameFieldNumber;
const int EpisodeMetadata::kEarliestPhotoTimestampFieldNumber;
const int EpisodeMetadata::kLatestPhotoTimestampFieldNumber;
const int EpisodeMetadata::kUploadEpisodeFieldNumber;
const int EpisodeMetadata::kIndexedTermsFieldNumber;
const int EpisodeMetadata::kIndexedLocationTermsFieldNumber;
const int EpisodeMetadata::kDEPRECATEDLocationFieldNumber;
const int EpisodeMetadata::kDEPRECATEDPlacemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpisodeMetadata::EpisodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_EpisodeMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:EpisodeMetadata)
}

void EpisodeMetadata::InitAsDefaultInstance() {
  id_ = const_cast< ::EpisodeId*>(
      ::EpisodeId::internal_default_instance());
  parent_id_ = const_cast< ::EpisodeId*>(
      ::EpisodeId::internal_default_instance());
  viewpoint_id_ = const_cast< ::ViewpointId*>(
      ::ViewpointId::internal_default_instance());
  deprecated_location_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
  deprecated_placemark_ = const_cast< ::Placemark*>(
      ::Placemark::internal_default_instance());
}

EpisodeMetadata::EpisodeMetadata(const EpisodeMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EpisodeMetadata)
}

void EpisodeMetadata::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = NULL;
  parent_id_ = NULL;
  viewpoint_id_ = NULL;
  deprecated_location_ = NULL;
  deprecated_placemark_ = NULL;
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&upload_episode_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(upload_episode_));
}

EpisodeMetadata::~EpisodeMetadata() {
  // @@protoc_insertion_point(destructor:EpisodeMetadata)
  SharedDtor();
}

void EpisodeMetadata::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &EpisodeMetadata_default_instance_.get()) {
    delete id_;
    delete parent_id_;
    delete viewpoint_id_;
    delete deprecated_location_;
    delete deprecated_placemark_;
  }
}

void EpisodeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpisodeMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EpisodeMetadata_descriptor_;
}

const EpisodeMetadata& EpisodeMetadata::default_instance() {
  protobuf_InitDefaults_EpisodeMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EpisodeMetadata> EpisodeMetadata_default_instance_;

EpisodeMetadata* EpisodeMetadata::New(::google::protobuf::Arena* arena) const {
  EpisodeMetadata* n = new EpisodeMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EpisodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:EpisodeMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EpisodeMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EpisodeMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(user_id_, publish_timestamp_);
    if (has_id()) {
      if (id_ != NULL) id_->::EpisodeId::Clear();
    }
    if (has_parent_id()) {
      if (parent_id_ != NULL) parent_id_->::EpisodeId::Clear();
    }
    if (has_viewpoint_id()) {
      if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 40704u) {
    ZR_(earliest_photo_timestamp_, upload_episode_);
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deprecated_location()) {
      if (deprecated_location_ != NULL) deprecated_location_->::Location::Clear();
    }
  }
  if (has_deprecated_placemark()) {
    if (deprecated_placemark_ != NULL) deprecated_placemark_->::Placemark::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  indexed_terms_.Clear();
  indexed_location_terms_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EpisodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EpisodeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EpisodeId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parent_id;
        break;
      }

      // optional .EpisodeId parent_id = 2;
      case 2: {
        if (tag == 18) {
         parse_parent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_viewpoint_id;
        break;
      }

      // optional .ViewpointId viewpoint_id = 3;
      case 3: {
        if (tag == 26) {
         parse_viewpoint_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewpoint_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 4;
      case 4: {
        if (tag == 32) {
         parse_user_id:
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sharing_user_id;
        break;
      }

      // optional int64 sharing_user_id = 5;
      case 5: {
        if (tag == 40) {
         parse_sharing_user_id:
          set_has_sharing_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sharing_user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 6;
      case 6: {
        if (tag == 49) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_title;
        break;
      }

      // optional string title = 7;
      case 7: {
        if (tag == 58) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EpisodeMetadata.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_description;
        break;
      }

      // optional string description = 8;
      case 8: {
        if (tag == 66) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EpisodeMetadata.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_DEPRECATED_location;
        break;
      }

      // optional .Location DEPRECATED_location = 9;
      case 9: {
        if (tag == 74) {
         parse_DEPRECATED_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_DEPRECATED_placemark;
        break;
      }

      // optional .Placemark DEPRECATED_placemark = 10;
      case 10: {
        if (tag == 82) {
         parse_DEPRECATED_placemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_placemark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // optional string name = 11;
      case 11: {
        if (tag == 90) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EpisodeMetadata.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_publish_timestamp;
        break;
      }

      // optional double publish_timestamp = 12;
      case 12: {
        if (tag == 97) {
         parse_publish_timestamp:
          set_has_publish_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &publish_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_earliest_photo_timestamp;
        break;
      }

      // optional double earliest_photo_timestamp = 30;
      case 30: {
        if (tag == 241) {
         parse_earliest_photo_timestamp:
          set_has_earliest_photo_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &earliest_photo_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_latest_photo_timestamp;
        break;
      }

      // optional double latest_photo_timestamp = 31;
      case 31: {
        if (tag == 249) {
         parse_latest_photo_timestamp:
          set_has_latest_photo_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latest_photo_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_upload_episode;
        break;
      }

      // optional bool upload_episode = 32;
      case 32: {
        if (tag == 256) {
         parse_upload_episode:
          set_has_upload_episode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_episode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_indexed_terms;
        break;
      }

      // repeated string indexed_terms = 33;
      case 33: {
        if (tag == 266) {
         parse_indexed_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_indexed_terms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->indexed_terms(this->indexed_terms_size() - 1).data(),
            this->indexed_terms(this->indexed_terms_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EpisodeMetadata.indexed_terms");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_indexed_terms;
        if (input->ExpectTag(274)) goto parse_indexed_location_terms;
        break;
      }

      // repeated string indexed_location_terms = 34;
      case 34: {
        if (tag == 274) {
         parse_indexed_location_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_indexed_location_terms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->indexed_location_terms(this->indexed_location_terms_size() - 1).data(),
            this->indexed_location_terms(this->indexed_location_terms_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EpisodeMetadata.indexed_location_terms");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_indexed_location_terms;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EpisodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EpisodeMetadata)
  return false;
#undef DO_
}

void EpisodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EpisodeMetadata)
  // optional .EpisodeId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .EpisodeId parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parent_id_, output);
  }

  // optional .ViewpointId viewpoint_id = 3;
  if (has_viewpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->viewpoint_id_, output);
  }

  // optional int64 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->user_id(), output);
  }

  // optional int64 sharing_user_id = 5;
  if (has_sharing_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sharing_user_id(), output);
  }

  // optional double timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->timestamp(), output);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->title(), output);
  }

  // optional string description = 8;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->description(), output);
  }

  // optional .Location DEPRECATED_location = 9;
  if (has_deprecated_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->deprecated_location_, output);
  }

  // optional .Placemark DEPRECATED_placemark = 10;
  if (has_deprecated_placemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->deprecated_placemark_, output);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->name(), output);
  }

  // optional double publish_timestamp = 12;
  if (has_publish_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->publish_timestamp(), output);
  }

  // optional double earliest_photo_timestamp = 30;
  if (has_earliest_photo_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->earliest_photo_timestamp(), output);
  }

  // optional double latest_photo_timestamp = 31;
  if (has_latest_photo_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->latest_photo_timestamp(), output);
  }

  // optional bool upload_episode = 32;
  if (has_upload_episode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->upload_episode(), output);
  }

  // repeated string indexed_terms = 33;
  for (int i = 0; i < this->indexed_terms_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexed_terms(i).data(), this->indexed_terms(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.indexed_terms");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->indexed_terms(i), output);
  }

  // repeated string indexed_location_terms = 34;
  for (int i = 0; i < this->indexed_location_terms_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexed_location_terms(i).data(), this->indexed_location_terms(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.indexed_location_terms");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->indexed_location_terms(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EpisodeMetadata)
}

::google::protobuf::uint8* EpisodeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EpisodeMetadata)
  // optional .EpisodeId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional .EpisodeId parent_id = 2;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->parent_id_, false, target);
  }

  // optional .ViewpointId viewpoint_id = 3;
  if (has_viewpoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->viewpoint_id_, false, target);
  }

  // optional int64 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->user_id(), target);
  }

  // optional int64 sharing_user_id = 5;
  if (has_sharing_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sharing_user_id(), target);
  }

  // optional double timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->timestamp(), target);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->title(), target);
  }

  // optional string description = 8;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->description(), target);
  }

  // optional .Location DEPRECATED_location = 9;
  if (has_deprecated_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->deprecated_location_, false, target);
  }

  // optional .Placemark DEPRECATED_placemark = 10;
  if (has_deprecated_placemark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->deprecated_placemark_, false, target);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  // optional double publish_timestamp = 12;
  if (has_publish_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->publish_timestamp(), target);
  }

  // optional double earliest_photo_timestamp = 30;
  if (has_earliest_photo_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->earliest_photo_timestamp(), target);
  }

  // optional double latest_photo_timestamp = 31;
  if (has_latest_photo_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->latest_photo_timestamp(), target);
  }

  // optional bool upload_episode = 32;
  if (has_upload_episode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->upload_episode(), target);
  }

  // repeated string indexed_terms = 33;
  for (int i = 0; i < this->indexed_terms_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexed_terms(i).data(), this->indexed_terms(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.indexed_terms");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(33, this->indexed_terms(i), target);
  }

  // repeated string indexed_location_terms = 34;
  for (int i = 0; i < this->indexed_location_terms_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexed_location_terms(i).data(), this->indexed_location_terms(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeMetadata.indexed_location_terms");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(34, this->indexed_location_terms(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EpisodeMetadata)
  return target;
}

size_t EpisodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EpisodeMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .EpisodeId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .EpisodeId parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parent_id_);
    }

    // optional .ViewpointId viewpoint_id = 3;
    if (has_viewpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->viewpoint_id_);
    }

    // optional int64 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int64 sharing_user_id = 5;
    if (has_sharing_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sharing_user_id());
    }

    // optional double timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double publish_timestamp = 12;
    if (has_publish_timestamp()) {
      total_size += 1 + 8;
    }

    // optional string title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  if (_has_bits_[8 / 32] & 40704u) {
    // optional string description = 8;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double earliest_photo_timestamp = 30;
    if (has_earliest_photo_timestamp()) {
      total_size += 2 + 8;
    }

    // optional double latest_photo_timestamp = 31;
    if (has_latest_photo_timestamp()) {
      total_size += 2 + 8;
    }

    // optional bool upload_episode = 32;
    if (has_upload_episode()) {
      total_size += 2 + 1;
    }

    // optional .Location DEPRECATED_location = 9;
    if (has_deprecated_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deprecated_location_);
    }

  }
  // optional .Placemark DEPRECATED_placemark = 10;
  if (has_deprecated_placemark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->deprecated_placemark_);
  }

  // repeated string indexed_terms = 33;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->indexed_terms_size());
  for (int i = 0; i < this->indexed_terms_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->indexed_terms(i));
  }

  // repeated string indexed_location_terms = 34;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->indexed_location_terms_size());
  for (int i = 0; i < this->indexed_location_terms_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->indexed_location_terms(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpisodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EpisodeMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EpisodeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpisodeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EpisodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EpisodeMetadata)
    UnsafeMergeFrom(*source);
  }
}

void EpisodeMetadata::MergeFrom(const EpisodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EpisodeMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EpisodeMetadata::UnsafeMergeFrom(const EpisodeMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  indexed_terms_.UnsafeMergeFrom(from.indexed_terms_);
  indexed_location_terms_.UnsafeMergeFrom(from.indexed_location_terms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::EpisodeId::MergeFrom(from.id());
    }
    if (from.has_parent_id()) {
      mutable_parent_id()->::EpisodeId::MergeFrom(from.parent_id());
    }
    if (from.has_viewpoint_id()) {
      mutable_viewpoint_id()->::ViewpointId::MergeFrom(from.viewpoint_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sharing_user_id()) {
      set_sharing_user_id(from.sharing_user_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_publish_timestamp()) {
      set_publish_timestamp(from.publish_timestamp());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_earliest_photo_timestamp()) {
      set_earliest_photo_timestamp(from.earliest_photo_timestamp());
    }
    if (from.has_latest_photo_timestamp()) {
      set_latest_photo_timestamp(from.latest_photo_timestamp());
    }
    if (from.has_upload_episode()) {
      set_upload_episode(from.upload_episode());
    }
    if (from.has_deprecated_location()) {
      mutable_deprecated_location()->::Location::MergeFrom(from.deprecated_location());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_deprecated_placemark()) {
      mutable_deprecated_placemark()->::Placemark::MergeFrom(from.deprecated_placemark());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EpisodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EpisodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpisodeMetadata::CopyFrom(const EpisodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EpisodeMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EpisodeMetadata::IsInitialized() const {

  return true;
}

void EpisodeMetadata::Swap(EpisodeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpisodeMetadata::InternalSwap(EpisodeMetadata* other) {
  std::swap(id_, other->id_);
  std::swap(parent_id_, other->parent_id_);
  std::swap(viewpoint_id_, other->viewpoint_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(sharing_user_id_, other->sharing_user_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(publish_timestamp_, other->publish_timestamp_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  name_.Swap(&other->name_);
  std::swap(earliest_photo_timestamp_, other->earliest_photo_timestamp_);
  std::swap(latest_photo_timestamp_, other->latest_photo_timestamp_);
  std::swap(upload_episode_, other->upload_episode_);
  indexed_terms_.UnsafeArenaSwap(&other->indexed_terms_);
  indexed_location_terms_.UnsafeArenaSwap(&other->indexed_location_terms_);
  std::swap(deprecated_location_, other->deprecated_location_);
  std::swap(deprecated_placemark_, other->deprecated_placemark_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EpisodeMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EpisodeMetadata_descriptor_;
  metadata.reflection = EpisodeMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EpisodeMetadata

// optional .EpisodeId id = 1;
bool EpisodeMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EpisodeMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EpisodeMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EpisodeMetadata::clear_id() {
  if (id_ != NULL) id_->::EpisodeId::Clear();
  clear_has_id();
}
const ::EpisodeId& EpisodeMetadata::id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.id)
  return id_ != NULL ? *id_
                         : *::EpisodeId::internal_default_instance();
}
::EpisodeId* EpisodeMetadata::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.id)
  return id_;
}
::EpisodeId* EpisodeMetadata::release_id() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.id)
  clear_has_id();
  ::EpisodeId* temp = id_;
  id_ = NULL;
  return temp;
}
void EpisodeMetadata::set_allocated_id(::EpisodeId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.id)
}

// optional .EpisodeId parent_id = 2;
bool EpisodeMetadata::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EpisodeMetadata::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
void EpisodeMetadata::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void EpisodeMetadata::clear_parent_id() {
  if (parent_id_ != NULL) parent_id_->::EpisodeId::Clear();
  clear_has_parent_id();
}
const ::EpisodeId& EpisodeMetadata::parent_id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.parent_id)
  return parent_id_ != NULL ? *parent_id_
                         : *::EpisodeId::internal_default_instance();
}
::EpisodeId* EpisodeMetadata::mutable_parent_id() {
  set_has_parent_id();
  if (parent_id_ == NULL) {
    parent_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.parent_id)
  return parent_id_;
}
::EpisodeId* EpisodeMetadata::release_parent_id() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.parent_id)
  clear_has_parent_id();
  ::EpisodeId* temp = parent_id_;
  parent_id_ = NULL;
  return temp;
}
void EpisodeMetadata::set_allocated_parent_id(::EpisodeId* parent_id) {
  delete parent_id_;
  parent_id_ = parent_id;
  if (parent_id) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.parent_id)
}

// optional .ViewpointId viewpoint_id = 3;
bool EpisodeMetadata::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EpisodeMetadata::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000004u;
}
void EpisodeMetadata::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void EpisodeMetadata::clear_viewpoint_id() {
  if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
  clear_has_viewpoint_id();
}
const ::ViewpointId& EpisodeMetadata::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.viewpoint_id)
  return viewpoint_id_ != NULL ? *viewpoint_id_
                         : *::ViewpointId::internal_default_instance();
}
::ViewpointId* EpisodeMetadata::mutable_viewpoint_id() {
  set_has_viewpoint_id();
  if (viewpoint_id_ == NULL) {
    viewpoint_id_ = new ::ViewpointId;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.viewpoint_id)
  return viewpoint_id_;
}
::ViewpointId* EpisodeMetadata::release_viewpoint_id() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.viewpoint_id)
  clear_has_viewpoint_id();
  ::ViewpointId* temp = viewpoint_id_;
  viewpoint_id_ = NULL;
  return temp;
}
void EpisodeMetadata::set_allocated_viewpoint_id(::ViewpointId* viewpoint_id) {
  delete viewpoint_id_;
  viewpoint_id_ = viewpoint_id;
  if (viewpoint_id) {
    set_has_viewpoint_id();
  } else {
    clear_has_viewpoint_id();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.viewpoint_id)
}

// optional int64 user_id = 4;
bool EpisodeMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EpisodeMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void EpisodeMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void EpisodeMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 EpisodeMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.user_id)
  return user_id_;
}
void EpisodeMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.user_id)
}

// optional int64 sharing_user_id = 5;
bool EpisodeMetadata::has_sharing_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EpisodeMetadata::set_has_sharing_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
void EpisodeMetadata::clear_has_sharing_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void EpisodeMetadata::clear_sharing_user_id() {
  sharing_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_sharing_user_id();
}
::google::protobuf::int64 EpisodeMetadata::sharing_user_id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.sharing_user_id)
  return sharing_user_id_;
}
void EpisodeMetadata::set_sharing_user_id(::google::protobuf::int64 value) {
  set_has_sharing_user_id();
  sharing_user_id_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.sharing_user_id)
}

// optional double timestamp = 6;
bool EpisodeMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EpisodeMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void EpisodeMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void EpisodeMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double EpisodeMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.timestamp)
  return timestamp_;
}
void EpisodeMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.timestamp)
}

// optional double publish_timestamp = 12;
bool EpisodeMetadata::has_publish_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EpisodeMetadata::set_has_publish_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void EpisodeMetadata::clear_has_publish_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void EpisodeMetadata::clear_publish_timestamp() {
  publish_timestamp_ = 0;
  clear_has_publish_timestamp();
}
double EpisodeMetadata::publish_timestamp() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.publish_timestamp)
  return publish_timestamp_;
}
void EpisodeMetadata::set_publish_timestamp(double value) {
  set_has_publish_timestamp();
  publish_timestamp_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.publish_timestamp)
}

// optional string title = 7;
bool EpisodeMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EpisodeMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000080u;
}
void EpisodeMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000080u;
}
void EpisodeMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& EpisodeMetadata::title() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeMetadata.title)
}
void EpisodeMetadata::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.title)
}
void EpisodeMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.title)
}
::std::string* EpisodeMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EpisodeMetadata::release_title() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.title)
}

// optional string description = 8;
bool EpisodeMetadata::has_description() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EpisodeMetadata::set_has_description() {
  _has_bits_[0] |= 0x00000100u;
}
void EpisodeMetadata::clear_has_description() {
  _has_bits_[0] &= ~0x00000100u;
}
void EpisodeMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& EpisodeMetadata::description() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeMetadata::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeMetadata.description)
}
void EpisodeMetadata::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.description)
}
void EpisodeMetadata::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.description)
}
::std::string* EpisodeMetadata::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EpisodeMetadata::release_description() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.description)
}

// optional string name = 11;
bool EpisodeMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EpisodeMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000200u;
}
void EpisodeMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000200u;
}
void EpisodeMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& EpisodeMetadata::name() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeMetadata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeMetadata.name)
}
void EpisodeMetadata::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.name)
}
void EpisodeMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.name)
}
::std::string* EpisodeMetadata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EpisodeMetadata::release_name() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.name)
}

// optional double earliest_photo_timestamp = 30;
bool EpisodeMetadata::has_earliest_photo_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void EpisodeMetadata::set_has_earliest_photo_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
void EpisodeMetadata::clear_has_earliest_photo_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
void EpisodeMetadata::clear_earliest_photo_timestamp() {
  earliest_photo_timestamp_ = 0;
  clear_has_earliest_photo_timestamp();
}
double EpisodeMetadata::earliest_photo_timestamp() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.earliest_photo_timestamp)
  return earliest_photo_timestamp_;
}
void EpisodeMetadata::set_earliest_photo_timestamp(double value) {
  set_has_earliest_photo_timestamp();
  earliest_photo_timestamp_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.earliest_photo_timestamp)
}

// optional double latest_photo_timestamp = 31;
bool EpisodeMetadata::has_latest_photo_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void EpisodeMetadata::set_has_latest_photo_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
void EpisodeMetadata::clear_has_latest_photo_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
void EpisodeMetadata::clear_latest_photo_timestamp() {
  latest_photo_timestamp_ = 0;
  clear_has_latest_photo_timestamp();
}
double EpisodeMetadata::latest_photo_timestamp() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.latest_photo_timestamp)
  return latest_photo_timestamp_;
}
void EpisodeMetadata::set_latest_photo_timestamp(double value) {
  set_has_latest_photo_timestamp();
  latest_photo_timestamp_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.latest_photo_timestamp)
}

// optional bool upload_episode = 32;
bool EpisodeMetadata::has_upload_episode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void EpisodeMetadata::set_has_upload_episode() {
  _has_bits_[0] |= 0x00001000u;
}
void EpisodeMetadata::clear_has_upload_episode() {
  _has_bits_[0] &= ~0x00001000u;
}
void EpisodeMetadata::clear_upload_episode() {
  upload_episode_ = false;
  clear_has_upload_episode();
}
bool EpisodeMetadata::upload_episode() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.upload_episode)
  return upload_episode_;
}
void EpisodeMetadata::set_upload_episode(bool value) {
  set_has_upload_episode();
  upload_episode_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.upload_episode)
}

// repeated string indexed_terms = 33;
int EpisodeMetadata::indexed_terms_size() const {
  return indexed_terms_.size();
}
void EpisodeMetadata::clear_indexed_terms() {
  indexed_terms_.Clear();
}
const ::std::string& EpisodeMetadata::indexed_terms(int index) const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.indexed_terms)
  return indexed_terms_.Get(index);
}
::std::string* EpisodeMetadata::mutable_indexed_terms(int index) {
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.indexed_terms)
  return indexed_terms_.Mutable(index);
}
void EpisodeMetadata::set_indexed_terms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:EpisodeMetadata.indexed_terms)
  indexed_terms_.Mutable(index)->assign(value);
}
void EpisodeMetadata::set_indexed_terms(int index, const char* value) {
  indexed_terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.indexed_terms)
}
void EpisodeMetadata::set_indexed_terms(int index, const char* value, size_t size) {
  indexed_terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.indexed_terms)
}
::std::string* EpisodeMetadata::add_indexed_terms() {
  // @@protoc_insertion_point(field_add_mutable:EpisodeMetadata.indexed_terms)
  return indexed_terms_.Add();
}
void EpisodeMetadata::add_indexed_terms(const ::std::string& value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:EpisodeMetadata.indexed_terms)
}
void EpisodeMetadata::add_indexed_terms(const char* value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EpisodeMetadata.indexed_terms)
}
void EpisodeMetadata::add_indexed_terms(const char* value, size_t size) {
  indexed_terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EpisodeMetadata.indexed_terms)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EpisodeMetadata::indexed_terms() const {
  // @@protoc_insertion_point(field_list:EpisodeMetadata.indexed_terms)
  return indexed_terms_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EpisodeMetadata::mutable_indexed_terms() {
  // @@protoc_insertion_point(field_mutable_list:EpisodeMetadata.indexed_terms)
  return &indexed_terms_;
}

// repeated string indexed_location_terms = 34;
int EpisodeMetadata::indexed_location_terms_size() const {
  return indexed_location_terms_.size();
}
void EpisodeMetadata::clear_indexed_location_terms() {
  indexed_location_terms_.Clear();
}
const ::std::string& EpisodeMetadata::indexed_location_terms(int index) const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.indexed_location_terms)
  return indexed_location_terms_.Get(index);
}
::std::string* EpisodeMetadata::mutable_indexed_location_terms(int index) {
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.indexed_location_terms)
  return indexed_location_terms_.Mutable(index);
}
void EpisodeMetadata::set_indexed_location_terms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:EpisodeMetadata.indexed_location_terms)
  indexed_location_terms_.Mutable(index)->assign(value);
}
void EpisodeMetadata::set_indexed_location_terms(int index, const char* value) {
  indexed_location_terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.indexed_location_terms)
}
void EpisodeMetadata::set_indexed_location_terms(int index, const char* value, size_t size) {
  indexed_location_terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.indexed_location_terms)
}
::std::string* EpisodeMetadata::add_indexed_location_terms() {
  // @@protoc_insertion_point(field_add_mutable:EpisodeMetadata.indexed_location_terms)
  return indexed_location_terms_.Add();
}
void EpisodeMetadata::add_indexed_location_terms(const ::std::string& value) {
  indexed_location_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:EpisodeMetadata.indexed_location_terms)
}
void EpisodeMetadata::add_indexed_location_terms(const char* value) {
  indexed_location_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EpisodeMetadata.indexed_location_terms)
}
void EpisodeMetadata::add_indexed_location_terms(const char* value, size_t size) {
  indexed_location_terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EpisodeMetadata.indexed_location_terms)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EpisodeMetadata::indexed_location_terms() const {
  // @@protoc_insertion_point(field_list:EpisodeMetadata.indexed_location_terms)
  return indexed_location_terms_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EpisodeMetadata::mutable_indexed_location_terms() {
  // @@protoc_insertion_point(field_mutable_list:EpisodeMetadata.indexed_location_terms)
  return &indexed_location_terms_;
}

// optional .Location DEPRECATED_location = 9;
bool EpisodeMetadata::has_deprecated_location() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void EpisodeMetadata::set_has_deprecated_location() {
  _has_bits_[0] |= 0x00008000u;
}
void EpisodeMetadata::clear_has_deprecated_location() {
  _has_bits_[0] &= ~0x00008000u;
}
void EpisodeMetadata::clear_deprecated_location() {
  if (deprecated_location_ != NULL) deprecated_location_->::Location::Clear();
  clear_has_deprecated_location();
}
const ::Location& EpisodeMetadata::deprecated_location() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.DEPRECATED_location)
  return deprecated_location_ != NULL ? *deprecated_location_
                         : *::Location::internal_default_instance();
}
::Location* EpisodeMetadata::mutable_deprecated_location() {
  set_has_deprecated_location();
  if (deprecated_location_ == NULL) {
    deprecated_location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.DEPRECATED_location)
  return deprecated_location_;
}
::Location* EpisodeMetadata::release_deprecated_location() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.DEPRECATED_location)
  clear_has_deprecated_location();
  ::Location* temp = deprecated_location_;
  deprecated_location_ = NULL;
  return temp;
}
void EpisodeMetadata::set_allocated_deprecated_location(::Location* deprecated_location) {
  delete deprecated_location_;
  deprecated_location_ = deprecated_location;
  if (deprecated_location) {
    set_has_deprecated_location();
  } else {
    clear_has_deprecated_location();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.DEPRECATED_location)
}

// optional .Placemark DEPRECATED_placemark = 10;
bool EpisodeMetadata::has_deprecated_placemark() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void EpisodeMetadata::set_has_deprecated_placemark() {
  _has_bits_[0] |= 0x00010000u;
}
void EpisodeMetadata::clear_has_deprecated_placemark() {
  _has_bits_[0] &= ~0x00010000u;
}
void EpisodeMetadata::clear_deprecated_placemark() {
  if (deprecated_placemark_ != NULL) deprecated_placemark_->::Placemark::Clear();
  clear_has_deprecated_placemark();
}
const ::Placemark& EpisodeMetadata::deprecated_placemark() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.DEPRECATED_placemark)
  return deprecated_placemark_ != NULL ? *deprecated_placemark_
                         : *::Placemark::internal_default_instance();
}
::Placemark* EpisodeMetadata::mutable_deprecated_placemark() {
  set_has_deprecated_placemark();
  if (deprecated_placemark_ == NULL) {
    deprecated_placemark_ = new ::Placemark;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.DEPRECATED_placemark)
  return deprecated_placemark_;
}
::Placemark* EpisodeMetadata::release_deprecated_placemark() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.DEPRECATED_placemark)
  clear_has_deprecated_placemark();
  ::Placemark* temp = deprecated_placemark_;
  deprecated_placemark_ = NULL;
  return temp;
}
void EpisodeMetadata::set_allocated_deprecated_placemark(::Placemark* deprecated_placemark) {
  delete deprecated_placemark_;
  deprecated_placemark_ = deprecated_placemark;
  if (deprecated_placemark) {
    set_has_deprecated_placemark();
  } else {
    clear_has_deprecated_placemark();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.DEPRECATED_placemark)
}

inline const EpisodeMetadata* EpisodeMetadata::internal_default_instance() {
  return &EpisodeMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
