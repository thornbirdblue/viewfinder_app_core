// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemMessage.proto

#ifndef PROTOBUF_SystemMessage_2eproto__INCLUDED
#define PROTOBUF_SystemMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_SystemMessage_2eproto();
void protobuf_InitDefaults_SystemMessage_2eproto();
void protobuf_AssignDesc_SystemMessage_2eproto();
void protobuf_ShutdownFile_SystemMessage_2eproto();

class SystemMessage;

enum SystemMessage_Severity {
  SystemMessage_Severity_SILENT = 0,
  SystemMessage_Severity_INFO = 1,
  SystemMessage_Severity_ATTENTION = 2,
  SystemMessage_Severity_DISABLE_NETWORK = 3,
  SystemMessage_Severity_UNKNOWN = 4
};
bool SystemMessage_Severity_IsValid(int value);
const SystemMessage_Severity SystemMessage_Severity_Severity_MIN = SystemMessage_Severity_SILENT;
const SystemMessage_Severity SystemMessage_Severity_Severity_MAX = SystemMessage_Severity_UNKNOWN;
const int SystemMessage_Severity_Severity_ARRAYSIZE = SystemMessage_Severity_Severity_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemMessage_Severity_descriptor();
inline const ::std::string& SystemMessage_Severity_Name(SystemMessage_Severity value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemMessage_Severity_descriptor(), value);
}
inline bool SystemMessage_Severity_Parse(
    const ::std::string& name, SystemMessage_Severity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemMessage_Severity>(
    SystemMessage_Severity_descriptor(), name, value);
}
// ===================================================================

class SystemMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SystemMessage) */ {
 public:
  SystemMessage();
  virtual ~SystemMessage();

  SystemMessage(const SystemMessage& from);

  inline SystemMessage& operator=(const SystemMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemMessage& default_instance();

  static const SystemMessage* internal_default_instance();

  void Swap(SystemMessage* other);

  // implements Message ----------------------------------------------

  inline SystemMessage* New() const { return New(NULL); }

  SystemMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemMessage& from);
  void MergeFrom(const SystemMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemMessage* other);
  void UnsafeMergeFrom(const SystemMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SystemMessage_Severity Severity;
  static const Severity SILENT =
    SystemMessage_Severity_SILENT;
  static const Severity INFO =
    SystemMessage_Severity_INFO;
  static const Severity ATTENTION =
    SystemMessage_Severity_ATTENTION;
  static const Severity DISABLE_NETWORK =
    SystemMessage_Severity_DISABLE_NETWORK;
  static const Severity UNKNOWN =
    SystemMessage_Severity_UNKNOWN;
  static inline bool Severity_IsValid(int value) {
    return SystemMessage_Severity_IsValid(value);
  }
  static const Severity Severity_MIN =
    SystemMessage_Severity_Severity_MIN;
  static const Severity Severity_MAX =
    SystemMessage_Severity_Severity_MAX;
  static const int Severity_ARRAYSIZE =
    SystemMessage_Severity_Severity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Severity_descriptor() {
    return SystemMessage_Severity_descriptor();
  }
  static inline const ::std::string& Severity_Name(Severity value) {
    return SystemMessage_Severity_Name(value);
  }
  static inline bool Severity_Parse(const ::std::string& name,
      Severity* value) {
    return SystemMessage_Severity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional string link = 3;
  bool has_link() const;
  void clear_link();
  static const int kLinkFieldNumber = 3;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // optional string identifier = 4;
  bool has_identifier() const;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 4;
  const ::std::string& identifier() const;
  void set_identifier(const ::std::string& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  ::std::string* mutable_identifier();
  ::std::string* release_identifier();
  void set_allocated_identifier(::std::string* identifier);

  // optional .SystemMessage.Severity severity = 5 [default = UNKNOWN];
  bool has_severity() const;
  void clear_severity();
  static const int kSeverityFieldNumber = 5;
  ::SystemMessage_Severity severity() const;
  void set_severity(::SystemMessage_Severity value);

  // @@protoc_insertion_point(class_scope:SystemMessage)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_link();
  inline void clear_has_link();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_severity();
  inline void clear_has_severity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  ::google::protobuf::internal::ArenaStringPtr identifier_;
  int severity_;
  friend void  protobuf_InitDefaults_SystemMessage_2eproto_impl();
  friend void  protobuf_AddDesc_SystemMessage_2eproto_impl();
  friend void protobuf_AssignDesc_SystemMessage_2eproto();
  friend void protobuf_ShutdownFile_SystemMessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SystemMessage> SystemMessage_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemMessage

// optional string title = 1;
inline bool SystemMessage::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemMessage::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemMessage::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemMessage::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SystemMessage::title() const {
  // @@protoc_insertion_point(field_get:SystemMessage.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMessage::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SystemMessage.title)
}
inline void SystemMessage::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SystemMessage.title)
}
inline void SystemMessage::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SystemMessage.title)
}
inline ::std::string* SystemMessage::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:SystemMessage.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemMessage::release_title() {
  // @@protoc_insertion_point(field_release:SystemMessage.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMessage::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:SystemMessage.title)
}

// optional string body = 2;
inline bool SystemMessage::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemMessage::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemMessage::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& SystemMessage::body() const {
  // @@protoc_insertion_point(field_get:SystemMessage.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMessage::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SystemMessage.body)
}
inline void SystemMessage::set_body(const char* value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SystemMessage.body)
}
inline void SystemMessage::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SystemMessage.body)
}
inline ::std::string* SystemMessage::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:SystemMessage.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemMessage::release_body() {
  // @@protoc_insertion_point(field_release:SystemMessage.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMessage::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:SystemMessage.body)
}

// optional string link = 3;
inline bool SystemMessage::has_link() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemMessage::set_has_link() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemMessage::clear_has_link() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemMessage::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
inline const ::std::string& SystemMessage::link() const {
  // @@protoc_insertion_point(field_get:SystemMessage.link)
  return link_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMessage::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SystemMessage.link)
}
inline void SystemMessage::set_link(const char* value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SystemMessage.link)
}
inline void SystemMessage::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SystemMessage.link)
}
inline ::std::string* SystemMessage::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:SystemMessage.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemMessage::release_link() {
  // @@protoc_insertion_point(field_release:SystemMessage.link)
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMessage::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:SystemMessage.link)
}

// optional string identifier = 4;
inline bool SystemMessage::has_identifier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemMessage::set_has_identifier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemMessage::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemMessage::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
inline const ::std::string& SystemMessage::identifier() const {
  // @@protoc_insertion_point(field_get:SystemMessage.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMessage::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SystemMessage.identifier)
}
inline void SystemMessage::set_identifier(const char* value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SystemMessage.identifier)
}
inline void SystemMessage::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SystemMessage.identifier)
}
inline ::std::string* SystemMessage::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:SystemMessage.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemMessage::release_identifier() {
  // @@protoc_insertion_point(field_release:SystemMessage.identifier)
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemMessage::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:SystemMessage.identifier)
}

// optional .SystemMessage.Severity severity = 5 [default = UNKNOWN];
inline bool SystemMessage::has_severity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemMessage::set_has_severity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemMessage::clear_has_severity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemMessage::clear_severity() {
  severity_ = 4;
  clear_has_severity();
}
inline ::SystemMessage_Severity SystemMessage::severity() const {
  // @@protoc_insertion_point(field_get:SystemMessage.severity)
  return static_cast< ::SystemMessage_Severity >(severity_);
}
inline void SystemMessage::set_severity(::SystemMessage_Severity value) {
  assert(::SystemMessage_Severity_IsValid(value));
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:SystemMessage.severity)
}

inline const SystemMessage* SystemMessage::internal_default_instance() {
  return &SystemMessage_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SystemMessage_Severity> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SystemMessage_Severity>() {
  return ::SystemMessage_Severity_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SystemMessage_2eproto__INCLUDED
