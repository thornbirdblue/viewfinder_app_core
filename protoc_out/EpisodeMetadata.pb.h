// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EpisodeMetadata.proto

#ifndef PROTOBUF_EpisodeMetadata_2eproto__INCLUDED
#define PROTOBUF_EpisodeMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ContentIds.pb.h"
#include "ContactMetadata.pb.h"
#include "Location.pb.h"
#include "Placemark.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_EpisodeMetadata_2eproto();
void protobuf_InitDefaults_EpisodeMetadata_2eproto();
void protobuf_AssignDesc_EpisodeMetadata_2eproto();
void protobuf_ShutdownFile_EpisodeMetadata_2eproto();

class EpisodeMetadata;

// ===================================================================

class EpisodeMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EpisodeMetadata) */ {
 public:
  EpisodeMetadata();
  virtual ~EpisodeMetadata();

  EpisodeMetadata(const EpisodeMetadata& from);

  inline EpisodeMetadata& operator=(const EpisodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EpisodeMetadata& default_instance();

  static const EpisodeMetadata* internal_default_instance();

  void Swap(EpisodeMetadata* other);

  // implements Message ----------------------------------------------

  inline EpisodeMetadata* New() const { return New(NULL); }

  EpisodeMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EpisodeMetadata& from);
  void MergeFrom(const EpisodeMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EpisodeMetadata* other);
  void UnsafeMergeFrom(const EpisodeMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .EpisodeId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::EpisodeId& id() const;
  ::EpisodeId* mutable_id();
  ::EpisodeId* release_id();
  void set_allocated_id(::EpisodeId* id);

  // optional .EpisodeId parent_id = 2;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  const ::EpisodeId& parent_id() const;
  ::EpisodeId* mutable_parent_id();
  ::EpisodeId* release_parent_id();
  void set_allocated_parent_id(::EpisodeId* parent_id);

  // optional .ViewpointId viewpoint_id = 3;
  bool has_viewpoint_id() const;
  void clear_viewpoint_id();
  static const int kViewpointIdFieldNumber = 3;
  const ::ViewpointId& viewpoint_id() const;
  ::ViewpointId* mutable_viewpoint_id();
  ::ViewpointId* release_viewpoint_id();
  void set_allocated_viewpoint_id(::ViewpointId* viewpoint_id);

  // optional int64 user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // optional int64 sharing_user_id = 5;
  bool has_sharing_user_id() const;
  void clear_sharing_user_id();
  static const int kSharingUserIdFieldNumber = 5;
  ::google::protobuf::int64 sharing_user_id() const;
  void set_sharing_user_id(::google::protobuf::int64 value);

  // optional double timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  double timestamp() const;
  void set_timestamp(double value);

  // optional double publish_timestamp = 12;
  bool has_publish_timestamp() const;
  void clear_publish_timestamp();
  static const int kPublishTimestampFieldNumber = 12;
  double publish_timestamp() const;
  void set_publish_timestamp(double value);

  // optional string title = 7;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 7;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string description = 8;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 8;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string name = 11;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 11;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double earliest_photo_timestamp = 30;
  bool has_earliest_photo_timestamp() const;
  void clear_earliest_photo_timestamp();
  static const int kEarliestPhotoTimestampFieldNumber = 30;
  double earliest_photo_timestamp() const;
  void set_earliest_photo_timestamp(double value);

  // optional double latest_photo_timestamp = 31;
  bool has_latest_photo_timestamp() const;
  void clear_latest_photo_timestamp();
  static const int kLatestPhotoTimestampFieldNumber = 31;
  double latest_photo_timestamp() const;
  void set_latest_photo_timestamp(double value);

  // optional bool upload_episode = 32;
  bool has_upload_episode() const;
  void clear_upload_episode();
  static const int kUploadEpisodeFieldNumber = 32;
  bool upload_episode() const;
  void set_upload_episode(bool value);

  // repeated string indexed_terms = 33;
  int indexed_terms_size() const;
  void clear_indexed_terms();
  static const int kIndexedTermsFieldNumber = 33;
  const ::std::string& indexed_terms(int index) const;
  ::std::string* mutable_indexed_terms(int index);
  void set_indexed_terms(int index, const ::std::string& value);
  void set_indexed_terms(int index, const char* value);
  void set_indexed_terms(int index, const char* value, size_t size);
  ::std::string* add_indexed_terms();
  void add_indexed_terms(const ::std::string& value);
  void add_indexed_terms(const char* value);
  void add_indexed_terms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& indexed_terms() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_indexed_terms();

  // repeated string indexed_location_terms = 34;
  int indexed_location_terms_size() const;
  void clear_indexed_location_terms();
  static const int kIndexedLocationTermsFieldNumber = 34;
  const ::std::string& indexed_location_terms(int index) const;
  ::std::string* mutable_indexed_location_terms(int index);
  void set_indexed_location_terms(int index, const ::std::string& value);
  void set_indexed_location_terms(int index, const char* value);
  void set_indexed_location_terms(int index, const char* value, size_t size);
  ::std::string* add_indexed_location_terms();
  void add_indexed_location_terms(const ::std::string& value);
  void add_indexed_location_terms(const char* value);
  void add_indexed_location_terms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& indexed_location_terms() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_indexed_location_terms();

  // optional .Location DEPRECATED_location = 9;
  bool has_deprecated_location() const;
  void clear_deprecated_location();
  static const int kDEPRECATEDLocationFieldNumber = 9;
  const ::Location& deprecated_location() const;
  ::Location* mutable_deprecated_location();
  ::Location* release_deprecated_location();
  void set_allocated_deprecated_location(::Location* deprecated_location);

  // optional .Placemark DEPRECATED_placemark = 10;
  bool has_deprecated_placemark() const;
  void clear_deprecated_placemark();
  static const int kDEPRECATEDPlacemarkFieldNumber = 10;
  const ::Placemark& deprecated_placemark() const;
  ::Placemark* mutable_deprecated_placemark();
  ::Placemark* release_deprecated_placemark();
  void set_allocated_deprecated_placemark(::Placemark* deprecated_placemark);

  // @@protoc_insertion_point(class_scope:EpisodeMetadata)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_viewpoint_id();
  inline void clear_has_viewpoint_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_sharing_user_id();
  inline void clear_has_sharing_user_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_publish_timestamp();
  inline void clear_has_publish_timestamp();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_earliest_photo_timestamp();
  inline void clear_has_earliest_photo_timestamp();
  inline void set_has_latest_photo_timestamp();
  inline void clear_has_latest_photo_timestamp();
  inline void set_has_upload_episode();
  inline void clear_has_upload_episode();
  inline void set_has_deprecated_location();
  inline void clear_has_deprecated_location();
  inline void set_has_deprecated_placemark();
  inline void clear_has_deprecated_placemark();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> indexed_terms_;
  ::google::protobuf::RepeatedPtrField< ::std::string> indexed_location_terms_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::EpisodeId* id_;
  ::EpisodeId* parent_id_;
  ::ViewpointId* viewpoint_id_;
  ::Location* deprecated_location_;
  ::Placemark* deprecated_placemark_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 sharing_user_id_;
  double timestamp_;
  double publish_timestamp_;
  double earliest_photo_timestamp_;
  double latest_photo_timestamp_;
  bool upload_episode_;
  friend void  protobuf_InitDefaults_EpisodeMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_EpisodeMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_EpisodeMetadata_2eproto();
  friend void protobuf_ShutdownFile_EpisodeMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EpisodeMetadata> EpisodeMetadata_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EpisodeMetadata

// optional .EpisodeId id = 1;
inline bool EpisodeMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EpisodeMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EpisodeMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EpisodeMetadata::clear_id() {
  if (id_ != NULL) id_->::EpisodeId::Clear();
  clear_has_id();
}
inline const ::EpisodeId& EpisodeMetadata::id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.id)
  return id_ != NULL ? *id_
                         : *::EpisodeId::internal_default_instance();
}
inline ::EpisodeId* EpisodeMetadata::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.id)
  return id_;
}
inline ::EpisodeId* EpisodeMetadata::release_id() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.id)
  clear_has_id();
  ::EpisodeId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void EpisodeMetadata::set_allocated_id(::EpisodeId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.id)
}

// optional .EpisodeId parent_id = 2;
inline bool EpisodeMetadata::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EpisodeMetadata::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EpisodeMetadata::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EpisodeMetadata::clear_parent_id() {
  if (parent_id_ != NULL) parent_id_->::EpisodeId::Clear();
  clear_has_parent_id();
}
inline const ::EpisodeId& EpisodeMetadata::parent_id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.parent_id)
  return parent_id_ != NULL ? *parent_id_
                         : *::EpisodeId::internal_default_instance();
}
inline ::EpisodeId* EpisodeMetadata::mutable_parent_id() {
  set_has_parent_id();
  if (parent_id_ == NULL) {
    parent_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.parent_id)
  return parent_id_;
}
inline ::EpisodeId* EpisodeMetadata::release_parent_id() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.parent_id)
  clear_has_parent_id();
  ::EpisodeId* temp = parent_id_;
  parent_id_ = NULL;
  return temp;
}
inline void EpisodeMetadata::set_allocated_parent_id(::EpisodeId* parent_id) {
  delete parent_id_;
  parent_id_ = parent_id;
  if (parent_id) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.parent_id)
}

// optional .ViewpointId viewpoint_id = 3;
inline bool EpisodeMetadata::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EpisodeMetadata::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EpisodeMetadata::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EpisodeMetadata::clear_viewpoint_id() {
  if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
  clear_has_viewpoint_id();
}
inline const ::ViewpointId& EpisodeMetadata::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.viewpoint_id)
  return viewpoint_id_ != NULL ? *viewpoint_id_
                         : *::ViewpointId::internal_default_instance();
}
inline ::ViewpointId* EpisodeMetadata::mutable_viewpoint_id() {
  set_has_viewpoint_id();
  if (viewpoint_id_ == NULL) {
    viewpoint_id_ = new ::ViewpointId;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.viewpoint_id)
  return viewpoint_id_;
}
inline ::ViewpointId* EpisodeMetadata::release_viewpoint_id() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.viewpoint_id)
  clear_has_viewpoint_id();
  ::ViewpointId* temp = viewpoint_id_;
  viewpoint_id_ = NULL;
  return temp;
}
inline void EpisodeMetadata::set_allocated_viewpoint_id(::ViewpointId* viewpoint_id) {
  delete viewpoint_id_;
  viewpoint_id_ = viewpoint_id;
  if (viewpoint_id) {
    set_has_viewpoint_id();
  } else {
    clear_has_viewpoint_id();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.viewpoint_id)
}

// optional int64 user_id = 4;
inline bool EpisodeMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EpisodeMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EpisodeMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EpisodeMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 EpisodeMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.user_id)
  return user_id_;
}
inline void EpisodeMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.user_id)
}

// optional int64 sharing_user_id = 5;
inline bool EpisodeMetadata::has_sharing_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EpisodeMetadata::set_has_sharing_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EpisodeMetadata::clear_has_sharing_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EpisodeMetadata::clear_sharing_user_id() {
  sharing_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_sharing_user_id();
}
inline ::google::protobuf::int64 EpisodeMetadata::sharing_user_id() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.sharing_user_id)
  return sharing_user_id_;
}
inline void EpisodeMetadata::set_sharing_user_id(::google::protobuf::int64 value) {
  set_has_sharing_user_id();
  sharing_user_id_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.sharing_user_id)
}

// optional double timestamp = 6;
inline bool EpisodeMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EpisodeMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EpisodeMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EpisodeMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double EpisodeMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.timestamp)
  return timestamp_;
}
inline void EpisodeMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.timestamp)
}

// optional double publish_timestamp = 12;
inline bool EpisodeMetadata::has_publish_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EpisodeMetadata::set_has_publish_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EpisodeMetadata::clear_has_publish_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EpisodeMetadata::clear_publish_timestamp() {
  publish_timestamp_ = 0;
  clear_has_publish_timestamp();
}
inline double EpisodeMetadata::publish_timestamp() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.publish_timestamp)
  return publish_timestamp_;
}
inline void EpisodeMetadata::set_publish_timestamp(double value) {
  set_has_publish_timestamp();
  publish_timestamp_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.publish_timestamp)
}

// optional string title = 7;
inline bool EpisodeMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EpisodeMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EpisodeMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EpisodeMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& EpisodeMetadata::title() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EpisodeMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeMetadata.title)
}
inline void EpisodeMetadata::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.title)
}
inline void EpisodeMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.title)
}
inline ::std::string* EpisodeMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EpisodeMetadata::release_title() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EpisodeMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.title)
}

// optional string description = 8;
inline bool EpisodeMetadata::has_description() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EpisodeMetadata::set_has_description() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EpisodeMetadata::clear_has_description() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EpisodeMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& EpisodeMetadata::description() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EpisodeMetadata::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeMetadata.description)
}
inline void EpisodeMetadata::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.description)
}
inline void EpisodeMetadata::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.description)
}
inline ::std::string* EpisodeMetadata::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EpisodeMetadata::release_description() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EpisodeMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.description)
}

// optional string name = 11;
inline bool EpisodeMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EpisodeMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EpisodeMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EpisodeMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& EpisodeMetadata::name() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EpisodeMetadata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeMetadata.name)
}
inline void EpisodeMetadata::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.name)
}
inline void EpisodeMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.name)
}
inline ::std::string* EpisodeMetadata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EpisodeMetadata::release_name() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EpisodeMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.name)
}

// optional double earliest_photo_timestamp = 30;
inline bool EpisodeMetadata::has_earliest_photo_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EpisodeMetadata::set_has_earliest_photo_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EpisodeMetadata::clear_has_earliest_photo_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EpisodeMetadata::clear_earliest_photo_timestamp() {
  earliest_photo_timestamp_ = 0;
  clear_has_earliest_photo_timestamp();
}
inline double EpisodeMetadata::earliest_photo_timestamp() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.earliest_photo_timestamp)
  return earliest_photo_timestamp_;
}
inline void EpisodeMetadata::set_earliest_photo_timestamp(double value) {
  set_has_earliest_photo_timestamp();
  earliest_photo_timestamp_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.earliest_photo_timestamp)
}

// optional double latest_photo_timestamp = 31;
inline bool EpisodeMetadata::has_latest_photo_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EpisodeMetadata::set_has_latest_photo_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EpisodeMetadata::clear_has_latest_photo_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EpisodeMetadata::clear_latest_photo_timestamp() {
  latest_photo_timestamp_ = 0;
  clear_has_latest_photo_timestamp();
}
inline double EpisodeMetadata::latest_photo_timestamp() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.latest_photo_timestamp)
  return latest_photo_timestamp_;
}
inline void EpisodeMetadata::set_latest_photo_timestamp(double value) {
  set_has_latest_photo_timestamp();
  latest_photo_timestamp_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.latest_photo_timestamp)
}

// optional bool upload_episode = 32;
inline bool EpisodeMetadata::has_upload_episode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EpisodeMetadata::set_has_upload_episode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EpisodeMetadata::clear_has_upload_episode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EpisodeMetadata::clear_upload_episode() {
  upload_episode_ = false;
  clear_has_upload_episode();
}
inline bool EpisodeMetadata::upload_episode() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.upload_episode)
  return upload_episode_;
}
inline void EpisodeMetadata::set_upload_episode(bool value) {
  set_has_upload_episode();
  upload_episode_ = value;
  // @@protoc_insertion_point(field_set:EpisodeMetadata.upload_episode)
}

// repeated string indexed_terms = 33;
inline int EpisodeMetadata::indexed_terms_size() const {
  return indexed_terms_.size();
}
inline void EpisodeMetadata::clear_indexed_terms() {
  indexed_terms_.Clear();
}
inline const ::std::string& EpisodeMetadata::indexed_terms(int index) const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.indexed_terms)
  return indexed_terms_.Get(index);
}
inline ::std::string* EpisodeMetadata::mutable_indexed_terms(int index) {
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.indexed_terms)
  return indexed_terms_.Mutable(index);
}
inline void EpisodeMetadata::set_indexed_terms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:EpisodeMetadata.indexed_terms)
  indexed_terms_.Mutable(index)->assign(value);
}
inline void EpisodeMetadata::set_indexed_terms(int index, const char* value) {
  indexed_terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.indexed_terms)
}
inline void EpisodeMetadata::set_indexed_terms(int index, const char* value, size_t size) {
  indexed_terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.indexed_terms)
}
inline ::std::string* EpisodeMetadata::add_indexed_terms() {
  // @@protoc_insertion_point(field_add_mutable:EpisodeMetadata.indexed_terms)
  return indexed_terms_.Add();
}
inline void EpisodeMetadata::add_indexed_terms(const ::std::string& value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:EpisodeMetadata.indexed_terms)
}
inline void EpisodeMetadata::add_indexed_terms(const char* value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EpisodeMetadata.indexed_terms)
}
inline void EpisodeMetadata::add_indexed_terms(const char* value, size_t size) {
  indexed_terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EpisodeMetadata.indexed_terms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EpisodeMetadata::indexed_terms() const {
  // @@protoc_insertion_point(field_list:EpisodeMetadata.indexed_terms)
  return indexed_terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EpisodeMetadata::mutable_indexed_terms() {
  // @@protoc_insertion_point(field_mutable_list:EpisodeMetadata.indexed_terms)
  return &indexed_terms_;
}

// repeated string indexed_location_terms = 34;
inline int EpisodeMetadata::indexed_location_terms_size() const {
  return indexed_location_terms_.size();
}
inline void EpisodeMetadata::clear_indexed_location_terms() {
  indexed_location_terms_.Clear();
}
inline const ::std::string& EpisodeMetadata::indexed_location_terms(int index) const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.indexed_location_terms)
  return indexed_location_terms_.Get(index);
}
inline ::std::string* EpisodeMetadata::mutable_indexed_location_terms(int index) {
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.indexed_location_terms)
  return indexed_location_terms_.Mutable(index);
}
inline void EpisodeMetadata::set_indexed_location_terms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:EpisodeMetadata.indexed_location_terms)
  indexed_location_terms_.Mutable(index)->assign(value);
}
inline void EpisodeMetadata::set_indexed_location_terms(int index, const char* value) {
  indexed_location_terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EpisodeMetadata.indexed_location_terms)
}
inline void EpisodeMetadata::set_indexed_location_terms(int index, const char* value, size_t size) {
  indexed_location_terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EpisodeMetadata.indexed_location_terms)
}
inline ::std::string* EpisodeMetadata::add_indexed_location_terms() {
  // @@protoc_insertion_point(field_add_mutable:EpisodeMetadata.indexed_location_terms)
  return indexed_location_terms_.Add();
}
inline void EpisodeMetadata::add_indexed_location_terms(const ::std::string& value) {
  indexed_location_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:EpisodeMetadata.indexed_location_terms)
}
inline void EpisodeMetadata::add_indexed_location_terms(const char* value) {
  indexed_location_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EpisodeMetadata.indexed_location_terms)
}
inline void EpisodeMetadata::add_indexed_location_terms(const char* value, size_t size) {
  indexed_location_terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EpisodeMetadata.indexed_location_terms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EpisodeMetadata::indexed_location_terms() const {
  // @@protoc_insertion_point(field_list:EpisodeMetadata.indexed_location_terms)
  return indexed_location_terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EpisodeMetadata::mutable_indexed_location_terms() {
  // @@protoc_insertion_point(field_mutable_list:EpisodeMetadata.indexed_location_terms)
  return &indexed_location_terms_;
}

// optional .Location DEPRECATED_location = 9;
inline bool EpisodeMetadata::has_deprecated_location() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EpisodeMetadata::set_has_deprecated_location() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EpisodeMetadata::clear_has_deprecated_location() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EpisodeMetadata::clear_deprecated_location() {
  if (deprecated_location_ != NULL) deprecated_location_->::Location::Clear();
  clear_has_deprecated_location();
}
inline const ::Location& EpisodeMetadata::deprecated_location() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.DEPRECATED_location)
  return deprecated_location_ != NULL ? *deprecated_location_
                         : *::Location::internal_default_instance();
}
inline ::Location* EpisodeMetadata::mutable_deprecated_location() {
  set_has_deprecated_location();
  if (deprecated_location_ == NULL) {
    deprecated_location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.DEPRECATED_location)
  return deprecated_location_;
}
inline ::Location* EpisodeMetadata::release_deprecated_location() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.DEPRECATED_location)
  clear_has_deprecated_location();
  ::Location* temp = deprecated_location_;
  deprecated_location_ = NULL;
  return temp;
}
inline void EpisodeMetadata::set_allocated_deprecated_location(::Location* deprecated_location) {
  delete deprecated_location_;
  deprecated_location_ = deprecated_location;
  if (deprecated_location) {
    set_has_deprecated_location();
  } else {
    clear_has_deprecated_location();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.DEPRECATED_location)
}

// optional .Placemark DEPRECATED_placemark = 10;
inline bool EpisodeMetadata::has_deprecated_placemark() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EpisodeMetadata::set_has_deprecated_placemark() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EpisodeMetadata::clear_has_deprecated_placemark() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EpisodeMetadata::clear_deprecated_placemark() {
  if (deprecated_placemark_ != NULL) deprecated_placemark_->::Placemark::Clear();
  clear_has_deprecated_placemark();
}
inline const ::Placemark& EpisodeMetadata::deprecated_placemark() const {
  // @@protoc_insertion_point(field_get:EpisodeMetadata.DEPRECATED_placemark)
  return deprecated_placemark_ != NULL ? *deprecated_placemark_
                         : *::Placemark::internal_default_instance();
}
inline ::Placemark* EpisodeMetadata::mutable_deprecated_placemark() {
  set_has_deprecated_placemark();
  if (deprecated_placemark_ == NULL) {
    deprecated_placemark_ = new ::Placemark;
  }
  // @@protoc_insertion_point(field_mutable:EpisodeMetadata.DEPRECATED_placemark)
  return deprecated_placemark_;
}
inline ::Placemark* EpisodeMetadata::release_deprecated_placemark() {
  // @@protoc_insertion_point(field_release:EpisodeMetadata.DEPRECATED_placemark)
  clear_has_deprecated_placemark();
  ::Placemark* temp = deprecated_placemark_;
  deprecated_placemark_ = NULL;
  return temp;
}
inline void EpisodeMetadata::set_allocated_deprecated_placemark(::Placemark* deprecated_placemark) {
  delete deprecated_placemark_;
  deprecated_placemark_ = deprecated_placemark;
  if (deprecated_placemark) {
    set_has_deprecated_placemark();
  } else {
    clear_has_deprecated_placemark();
  }
  // @@protoc_insertion_point(field_set_allocated:EpisodeMetadata.DEPRECATED_placemark)
}

inline const EpisodeMetadata* EpisodeMetadata::internal_default_instance() {
  return &EpisodeMetadata_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EpisodeMetadata_2eproto__INCLUDED
