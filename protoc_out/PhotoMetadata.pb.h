// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PhotoMetadata.proto

#ifndef PROTOBUF_PhotoMetadata_2eproto__INCLUDED
#define PROTOBUF_PhotoMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ContactMetadata.pb.h"
#include "ContentIds.pb.h"
#include "ImageFingerprint.pb.h"
#include "Location.pb.h"
#include "Placemark.pb.h"
#include "QueueMetadata.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PhotoMetadata_2eproto();
void protobuf_InitDefaults_PhotoMetadata_2eproto();
void protobuf_AssignDesc_PhotoMetadata_2eproto();
void protobuf_ShutdownFile_PhotoMetadata_2eproto();

class PhotoMetadata;
class PhotoMetadata_Image;
class PhotoMetadata_Images;
class PhotoPathMetadata;

enum PhotoMetadata_PhotoType {
  PhotoMetadata_PhotoType_THUMBNAIL = 1,
  PhotoMetadata_PhotoType_MEDIUM = 2,
  PhotoMetadata_PhotoType_FULL = 4,
  PhotoMetadata_PhotoType_ORIGINAL = 8
};
bool PhotoMetadata_PhotoType_IsValid(int value);
const PhotoMetadata_PhotoType PhotoMetadata_PhotoType_PhotoType_MIN = PhotoMetadata_PhotoType_THUMBNAIL;
const PhotoMetadata_PhotoType PhotoMetadata_PhotoType_PhotoType_MAX = PhotoMetadata_PhotoType_ORIGINAL;
const int PhotoMetadata_PhotoType_PhotoType_ARRAYSIZE = PhotoMetadata_PhotoType_PhotoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoMetadata_PhotoType_descriptor();
inline const ::std::string& PhotoMetadata_PhotoType_Name(PhotoMetadata_PhotoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoMetadata_PhotoType_descriptor(), value);
}
inline bool PhotoMetadata_PhotoType_Parse(
    const ::std::string& name, PhotoMetadata_PhotoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoMetadata_PhotoType>(
    PhotoMetadata_PhotoType_descriptor(), name, value);
}
// ===================================================================

class PhotoMetadata_Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PhotoMetadata.Image) */ {
 public:
  PhotoMetadata_Image();
  virtual ~PhotoMetadata_Image();

  PhotoMetadata_Image(const PhotoMetadata_Image& from);

  inline PhotoMetadata_Image& operator=(const PhotoMetadata_Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoMetadata_Image& default_instance();

  static const PhotoMetadata_Image* internal_default_instance();

  void Swap(PhotoMetadata_Image* other);

  // implements Message ----------------------------------------------

  inline PhotoMetadata_Image* New() const { return New(NULL); }

  PhotoMetadata_Image* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoMetadata_Image& from);
  void MergeFrom(const PhotoMetadata_Image& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhotoMetadata_Image* other);
  void UnsafeMergeFrom(const PhotoMetadata_Image& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 size = 1;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional string md5 = 2;
  bool has_md5() const;
  void clear_md5();
  static const int kMd5FieldNumber = 2;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:PhotoMetadata.Image)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_InitDefaults_PhotoMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_PhotoMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_PhotoMetadata_2eproto();
  friend void protobuf_ShutdownFile_PhotoMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PhotoMetadata_Image> PhotoMetadata_Image_default_instance_;

// -------------------------------------------------------------------

class PhotoMetadata_Images : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PhotoMetadata.Images) */ {
 public:
  PhotoMetadata_Images();
  virtual ~PhotoMetadata_Images();

  PhotoMetadata_Images(const PhotoMetadata_Images& from);

  inline PhotoMetadata_Images& operator=(const PhotoMetadata_Images& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoMetadata_Images& default_instance();

  static const PhotoMetadata_Images* internal_default_instance();

  void Swap(PhotoMetadata_Images* other);

  // implements Message ----------------------------------------------

  inline PhotoMetadata_Images* New() const { return New(NULL); }

  PhotoMetadata_Images* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoMetadata_Images& from);
  void MergeFrom(const PhotoMetadata_Images& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhotoMetadata_Images* other);
  void UnsafeMergeFrom(const PhotoMetadata_Images& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PhotoMetadata.Image tn = 1;
  bool has_tn() const;
  void clear_tn();
  static const int kTnFieldNumber = 1;
  const ::PhotoMetadata_Image& tn() const;
  ::PhotoMetadata_Image* mutable_tn();
  ::PhotoMetadata_Image* release_tn();
  void set_allocated_tn(::PhotoMetadata_Image* tn);

  // optional .PhotoMetadata.Image med = 2;
  bool has_med() const;
  void clear_med();
  static const int kMedFieldNumber = 2;
  const ::PhotoMetadata_Image& med() const;
  ::PhotoMetadata_Image* mutable_med();
  ::PhotoMetadata_Image* release_med();
  void set_allocated_med(::PhotoMetadata_Image* med);

  // optional .PhotoMetadata.Image full = 3;
  bool has_full() const;
  void clear_full();
  static const int kFullFieldNumber = 3;
  const ::PhotoMetadata_Image& full() const;
  ::PhotoMetadata_Image* mutable_full();
  ::PhotoMetadata_Image* release_full();
  void set_allocated_full(::PhotoMetadata_Image* full);

  // optional .PhotoMetadata.Image orig = 4;
  bool has_orig() const;
  void clear_orig();
  static const int kOrigFieldNumber = 4;
  const ::PhotoMetadata_Image& orig() const;
  ::PhotoMetadata_Image* mutable_orig();
  ::PhotoMetadata_Image* release_orig();
  void set_allocated_orig(::PhotoMetadata_Image* orig);

  // @@protoc_insertion_point(class_scope:PhotoMetadata.Images)
 private:
  inline void set_has_tn();
  inline void clear_has_tn();
  inline void set_has_med();
  inline void clear_has_med();
  inline void set_has_full();
  inline void clear_has_full();
  inline void set_has_orig();
  inline void clear_has_orig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::PhotoMetadata_Image* tn_;
  ::PhotoMetadata_Image* med_;
  ::PhotoMetadata_Image* full_;
  ::PhotoMetadata_Image* orig_;
  friend void  protobuf_InitDefaults_PhotoMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_PhotoMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_PhotoMetadata_2eproto();
  friend void protobuf_ShutdownFile_PhotoMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PhotoMetadata_Images> PhotoMetadata_Images_default_instance_;

// -------------------------------------------------------------------

class PhotoMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PhotoMetadata) */ {
 public:
  PhotoMetadata();
  virtual ~PhotoMetadata();

  PhotoMetadata(const PhotoMetadata& from);

  inline PhotoMetadata& operator=(const PhotoMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoMetadata& default_instance();

  static const PhotoMetadata* internal_default_instance();

  void Swap(PhotoMetadata* other);

  // implements Message ----------------------------------------------

  inline PhotoMetadata* New() const { return New(NULL); }

  PhotoMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoMetadata& from);
  void MergeFrom(const PhotoMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhotoMetadata* other);
  void UnsafeMergeFrom(const PhotoMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PhotoMetadata_Image Image;
  typedef PhotoMetadata_Images Images;

  typedef PhotoMetadata_PhotoType PhotoType;
  static const PhotoType THUMBNAIL =
    PhotoMetadata_PhotoType_THUMBNAIL;
  static const PhotoType MEDIUM =
    PhotoMetadata_PhotoType_MEDIUM;
  static const PhotoType FULL =
    PhotoMetadata_PhotoType_FULL;
  static const PhotoType ORIGINAL =
    PhotoMetadata_PhotoType_ORIGINAL;
  static inline bool PhotoType_IsValid(int value) {
    return PhotoMetadata_PhotoType_IsValid(value);
  }
  static const PhotoType PhotoType_MIN =
    PhotoMetadata_PhotoType_PhotoType_MIN;
  static const PhotoType PhotoType_MAX =
    PhotoMetadata_PhotoType_PhotoType_MAX;
  static const int PhotoType_ARRAYSIZE =
    PhotoMetadata_PhotoType_PhotoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhotoType_descriptor() {
    return PhotoMetadata_PhotoType_descriptor();
  }
  static inline const ::std::string& PhotoType_Name(PhotoType value) {
    return PhotoMetadata_PhotoType_Name(value);
  }
  static inline bool PhotoType_Parse(const ::std::string& name,
      PhotoType* value) {
    return PhotoMetadata_PhotoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PhotoId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::PhotoId& id() const;
  ::PhotoId* mutable_id();
  ::PhotoId* release_id();
  void set_allocated_id(::PhotoId* id);

  // optional .PhotoId parent_id = 2;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  const ::PhotoId& parent_id() const;
  ::PhotoId* mutable_parent_id();
  ::PhotoId* release_parent_id();
  void set_allocated_parent_id(::PhotoId* parent_id);

  // optional .EpisodeId episode_id = 3;
  bool has_episode_id() const;
  void clear_episode_id();
  static const int kEpisodeIdFieldNumber = 3;
  const ::EpisodeId& episode_id() const;
  ::EpisodeId* mutable_episode_id();
  ::EpisodeId* release_episode_id();
  void set_allocated_episode_id(::EpisodeId* episode_id);

  // optional int64 user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // optional int64 sharing_user_id = 5;
  bool has_sharing_user_id() const;
  void clear_sharing_user_id();
  static const int kSharingUserIdFieldNumber = 5;
  ::google::protobuf::int64 sharing_user_id() const;
  void set_sharing_user_id(::google::protobuf::int64 value);

  // optional int32 DEPRECATED_orientation = 6;
  bool has_deprecated_orientation() const;
  void clear_deprecated_orientation();
  static const int kDEPRECATEDOrientationFieldNumber = 6;
  ::google::protobuf::int32 deprecated_orientation() const;
  void set_deprecated_orientation(::google::protobuf::int32 value);

  // optional double aspect_ratio = 7;
  bool has_aspect_ratio() const;
  void clear_aspect_ratio();
  static const int kAspectRatioFieldNumber = 7;
  double aspect_ratio() const;
  void set_aspect_ratio(double value);

  // optional double timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  double timestamp() const;
  void set_timestamp(double value);

  // optional .Location location = 9;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 9;
  const ::Location& location() const;
  ::Location* mutable_location();
  ::Location* release_location();
  void set_allocated_location(::Location* location);

  // optional .Placemark placemark = 10;
  bool has_placemark() const;
  void clear_placemark();
  static const int kPlacemarkFieldNumber = 10;
  const ::Placemark& placemark() const;
  ::Placemark* mutable_placemark();
  ::Placemark* release_placemark();
  void set_allocated_placemark(::Placemark* placemark);

  // optional string caption = 11;
  bool has_caption() const;
  void clear_caption();
  static const int kCaptionFieldNumber = 11;
  const ::std::string& caption() const;
  void set_caption(const ::std::string& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  ::std::string* mutable_caption();
  ::std::string* release_caption();
  void set_allocated_caption(::std::string* caption);

  // optional string link = 12;
  bool has_link() const;
  void clear_link();
  static const int kLinkFieldNumber = 12;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // optional .PhotoMetadata.Images images = 14;
  bool has_images() const;
  void clear_images();
  static const int kImagesFieldNumber = 14;
  const ::PhotoMetadata_Images& images() const;
  ::PhotoMetadata_Images* mutable_images();
  ::PhotoMetadata_Images* release_images();
  void set_allocated_images(::PhotoMetadata_Images* images);

  // optional .QueueMetadata queue = 15;
  bool has_queue() const;
  void clear_queue();
  static const int kQueueFieldNumber = 15;
  const ::QueueMetadata& queue() const;
  ::QueueMetadata* mutable_queue();
  ::QueueMetadata* release_queue();
  void set_allocated_queue(::QueueMetadata* queue);

  // optional bool shared = 16;
  bool has_shared() const;
  void clear_shared();
  static const int kSharedFieldNumber = 16;
  bool shared() const;
  void set_shared(bool value);

  // optional string DEPRECATED_adjustment_xmp = 17;
  bool has_deprecated_adjustment_xmp() const;
  void clear_deprecated_adjustment_xmp();
  static const int kDEPRECATEDAdjustmentXmpFieldNumber = 17;
  const ::std::string& deprecated_adjustment_xmp() const;
  void set_deprecated_adjustment_xmp(const ::std::string& value);
  void set_deprecated_adjustment_xmp(const char* value);
  void set_deprecated_adjustment_xmp(const char* value, size_t size);
  ::std::string* mutable_deprecated_adjustment_xmp();
  ::std::string* release_deprecated_adjustment_xmp();
  void set_allocated_deprecated_adjustment_xmp(::std::string* deprecated_adjustment_xmp);

  // repeated string asset_keys = 18;
  int asset_keys_size() const;
  void clear_asset_keys();
  static const int kAssetKeysFieldNumber = 18;
  const ::std::string& asset_keys(int index) const;
  ::std::string* mutable_asset_keys(int index);
  void set_asset_keys(int index, const ::std::string& value);
  void set_asset_keys(int index, const char* value);
  void set_asset_keys(int index, const char* value, size_t size);
  ::std::string* add_asset_keys();
  void add_asset_keys(const ::std::string& value);
  void add_asset_keys(const char* value);
  void add_asset_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& asset_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_asset_keys();

  // repeated string asset_fingerprints = 19;
  int asset_fingerprints_size() const;
  void clear_asset_fingerprints();
  static const int kAssetFingerprintsFieldNumber = 19;
  const ::std::string& asset_fingerprints(int index) const;
  ::std::string* mutable_asset_fingerprints(int index);
  void set_asset_fingerprints(int index, const ::std::string& value);
  void set_asset_fingerprints(int index, const char* value);
  void set_asset_fingerprints(int index, const char* value, size_t size);
  ::std::string* add_asset_fingerprints();
  void add_asset_fingerprints(const ::std::string& value);
  void add_asset_fingerprints(const char* value);
  void add_asset_fingerprints(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& asset_fingerprints() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_asset_fingerprints();

  // optional .ImageFingerprint perceptual_fingerprint = 24;
  bool has_perceptual_fingerprint() const;
  void clear_perceptual_fingerprint();
  static const int kPerceptualFingerprintFieldNumber = 24;
  const ::ImageFingerprint& perceptual_fingerprint() const;
  ::ImageFingerprint* mutable_perceptual_fingerprint();
  ::ImageFingerprint* release_perceptual_fingerprint();
  void set_allocated_perceptual_fingerprint(::ImageFingerprint* perceptual_fingerprint);

  // repeated int64 candidate_duplicates = 25;
  int candidate_duplicates_size() const;
  void clear_candidate_duplicates();
  static const int kCandidateDuplicatesFieldNumber = 25;
  ::google::protobuf::int64 candidate_duplicates(int index) const;
  void set_candidate_duplicates(int index, ::google::protobuf::int64 value);
  void add_candidate_duplicates(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      candidate_duplicates() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_candidate_duplicates();

  // optional bool label_removed = 20;
  bool has_label_removed() const;
  void clear_label_removed();
  static const int kLabelRemovedFieldNumber = 20;
  bool label_removed() const;
  void set_label_removed(bool value);

  // optional bool label_hidden = 23;
  bool has_label_hidden() const;
  void clear_label_hidden();
  static const int kLabelHiddenFieldNumber = 23;
  bool label_hidden() const;
  void set_label_hidden(bool value);

  // optional bool label_unshared = 21;
  bool has_label_unshared() const;
  void clear_label_unshared();
  static const int kLabelUnsharedFieldNumber = 21;
  bool label_unshared() const;
  void set_label_unshared(bool value);

  // optional bool label_error = 22;
  bool has_label_error() const;
  void clear_label_error();
  static const int kLabelErrorFieldNumber = 22;
  bool label_error() const;
  void set_label_error(bool value);

  // optional bool update_metadata = 49;
  bool has_update_metadata() const;
  void clear_update_metadata();
  static const int kUpdateMetadataFieldNumber = 49;
  bool update_metadata() const;
  void set_update_metadata(bool value);

  // optional bool upload_metadata = 40;
  bool has_upload_metadata() const;
  void clear_upload_metadata();
  static const int kUploadMetadataFieldNumber = 40;
  bool upload_metadata() const;
  void set_upload_metadata(bool value);

  // optional bool upload_thumbnail = 41;
  bool has_upload_thumbnail() const;
  void clear_upload_thumbnail();
  static const int kUploadThumbnailFieldNumber = 41;
  bool upload_thumbnail() const;
  void set_upload_thumbnail(bool value);

  // optional bool upload_medium = 42;
  bool has_upload_medium() const;
  void clear_upload_medium();
  static const int kUploadMediumFieldNumber = 42;
  bool upload_medium() const;
  void set_upload_medium(bool value);

  // optional bool upload_full = 43;
  bool has_upload_full() const;
  void clear_upload_full();
  static const int kUploadFullFieldNumber = 43;
  bool upload_full() const;
  void set_upload_full(bool value);

  // optional bool upload_original = 44;
  bool has_upload_original() const;
  void clear_upload_original();
  static const int kUploadOriginalFieldNumber = 44;
  bool upload_original() const;
  void set_upload_original(bool value);

  // optional bool download_thumbnail = 45;
  bool has_download_thumbnail() const;
  void clear_download_thumbnail();
  static const int kDownloadThumbnailFieldNumber = 45;
  bool download_thumbnail() const;
  void set_download_thumbnail(bool value);

  // optional bool download_medium = 46;
  bool has_download_medium() const;
  void clear_download_medium();
  static const int kDownloadMediumFieldNumber = 46;
  bool download_medium() const;
  void set_download_medium(bool value);

  // optional bool download_full = 47;
  bool has_download_full() const;
  void clear_download_full();
  static const int kDownloadFullFieldNumber = 47;
  bool download_full() const;
  void set_download_full(bool value);

  // optional bool download_original = 48;
  bool has_download_original() const;
  void clear_download_original();
  static const int kDownloadOriginalFieldNumber = 48;
  bool download_original() const;
  void set_download_original(bool value);

  // optional bool error_update_metadata = 77;
  bool has_error_update_metadata() const;
  void clear_error_update_metadata();
  static const int kErrorUpdateMetadataFieldNumber = 77;
  bool error_update_metadata() const;
  void set_error_update_metadata(bool value);

  // optional bool error_upload_metadata = 75;
  bool has_error_upload_metadata() const;
  void clear_error_upload_metadata();
  static const int kErrorUploadMetadataFieldNumber = 75;
  bool error_upload_metadata() const;
  void set_error_upload_metadata(bool value);

  // optional bool error_upload_thumbnail = 60;
  bool has_error_upload_thumbnail() const;
  void clear_error_upload_thumbnail();
  static const int kErrorUploadThumbnailFieldNumber = 60;
  bool error_upload_thumbnail() const;
  void set_error_upload_thumbnail(bool value);

  // optional bool error_upload_medium = 61;
  bool has_error_upload_medium() const;
  void clear_error_upload_medium();
  static const int kErrorUploadMediumFieldNumber = 61;
  bool error_upload_medium() const;
  void set_error_upload_medium(bool value);

  // optional bool error_upload_full = 62;
  bool has_error_upload_full() const;
  void clear_error_upload_full();
  static const int kErrorUploadFullFieldNumber = 62;
  bool error_upload_full() const;
  void set_error_upload_full(bool value);

  // optional bool error_upload_original = 63;
  bool has_error_upload_original() const;
  void clear_error_upload_original();
  static const int kErrorUploadOriginalFieldNumber = 63;
  bool error_upload_original() const;
  void set_error_upload_original(bool value);

  // optional bool error_download_thumbnail = 64;
  bool has_error_download_thumbnail() const;
  void clear_error_download_thumbnail();
  static const int kErrorDownloadThumbnailFieldNumber = 64;
  bool error_download_thumbnail() const;
  void set_error_download_thumbnail(bool value);

  // optional bool error_download_medium = 65;
  bool has_error_download_medium() const;
  void clear_error_download_medium();
  static const int kErrorDownloadMediumFieldNumber = 65;
  bool error_download_medium() const;
  void set_error_download_medium(bool value);

  // optional bool error_download_full = 66;
  bool has_error_download_full() const;
  void clear_error_download_full();
  static const int kErrorDownloadFullFieldNumber = 66;
  bool error_download_full() const;
  void set_error_download_full(bool value);

  // optional bool error_download_original = 67;
  bool has_error_download_original() const;
  void clear_error_download_original();
  static const int kErrorDownloadOriginalFieldNumber = 67;
  bool error_download_original() const;
  void set_error_download_original(bool value);

  // optional bool error_asset_thumbnail = 68;
  bool has_error_asset_thumbnail() const;
  void clear_error_asset_thumbnail();
  static const int kErrorAssetThumbnailFieldNumber = 68;
  bool error_asset_thumbnail() const;
  void set_error_asset_thumbnail(bool value);

  // optional bool error_asset_full = 69;
  bool has_error_asset_full() const;
  void clear_error_asset_full();
  static const int kErrorAssetFullFieldNumber = 69;
  bool error_asset_full() const;
  void set_error_asset_full(bool value);

  // optional bool error_asset_original = 70;
  bool has_error_asset_original() const;
  void clear_error_asset_original();
  static const int kErrorAssetOriginalFieldNumber = 70;
  bool error_asset_original() const;
  void set_error_asset_original(bool value);

  // optional bool error_ui_thumbnail = 71;
  bool has_error_ui_thumbnail() const;
  void clear_error_ui_thumbnail();
  static const int kErrorUiThumbnailFieldNumber = 71;
  bool error_ui_thumbnail() const;
  void set_error_ui_thumbnail(bool value);

  // optional bool error_ui_full = 72;
  bool has_error_ui_full() const;
  void clear_error_ui_full();
  static const int kErrorUiFullFieldNumber = 72;
  bool error_ui_full() const;
  void set_error_ui_full(bool value);

  // optional bool error_ui_original = 74;
  bool has_error_ui_original() const;
  void clear_error_ui_original();
  static const int kErrorUiOriginalFieldNumber = 74;
  bool error_ui_original() const;
  void set_error_ui_original(bool value);

  // optional bool error_timestamp = 73;
  bool has_error_timestamp() const;
  void clear_error_timestamp();
  static const int kErrorTimestampFieldNumber = 73;
  bool error_timestamp() const;
  void set_error_timestamp(bool value);

  // optional bool error_timestamp_invalid = 76;
  bool has_error_timestamp_invalid() const;
  void clear_error_timestamp_invalid();
  static const int kErrorTimestampInvalidFieldNumber = 76;
  bool error_timestamp_invalid() const;
  void set_error_timestamp_invalid(bool value);

  // optional bool error_placemark_invalid = 78;
  bool has_error_placemark_invalid() const;
  void clear_error_placemark_invalid();
  static const int kErrorPlacemarkInvalidFieldNumber = 78;
  bool error_placemark_invalid() const;
  void set_error_placemark_invalid(bool value);

  // optional bool placemark_histogram = 90;
  bool has_placemark_histogram() const;
  void clear_placemark_histogram();
  static const int kPlacemarkHistogramFieldNumber = 90;
  bool placemark_histogram() const;
  void set_placemark_histogram(bool value);

  // @@protoc_insertion_point(class_scope:PhotoMetadata)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_episode_id();
  inline void clear_has_episode_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_sharing_user_id();
  inline void clear_has_sharing_user_id();
  inline void set_has_deprecated_orientation();
  inline void clear_has_deprecated_orientation();
  inline void set_has_aspect_ratio();
  inline void clear_has_aspect_ratio();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_placemark();
  inline void clear_has_placemark();
  inline void set_has_caption();
  inline void clear_has_caption();
  inline void set_has_link();
  inline void clear_has_link();
  inline void set_has_images();
  inline void clear_has_images();
  inline void set_has_queue();
  inline void clear_has_queue();
  inline void set_has_shared();
  inline void clear_has_shared();
  inline void set_has_deprecated_adjustment_xmp();
  inline void clear_has_deprecated_adjustment_xmp();
  inline void set_has_perceptual_fingerprint();
  inline void clear_has_perceptual_fingerprint();
  inline void set_has_label_removed();
  inline void clear_has_label_removed();
  inline void set_has_label_hidden();
  inline void clear_has_label_hidden();
  inline void set_has_label_unshared();
  inline void clear_has_label_unshared();
  inline void set_has_label_error();
  inline void clear_has_label_error();
  inline void set_has_update_metadata();
  inline void clear_has_update_metadata();
  inline void set_has_upload_metadata();
  inline void clear_has_upload_metadata();
  inline void set_has_upload_thumbnail();
  inline void clear_has_upload_thumbnail();
  inline void set_has_upload_medium();
  inline void clear_has_upload_medium();
  inline void set_has_upload_full();
  inline void clear_has_upload_full();
  inline void set_has_upload_original();
  inline void clear_has_upload_original();
  inline void set_has_download_thumbnail();
  inline void clear_has_download_thumbnail();
  inline void set_has_download_medium();
  inline void clear_has_download_medium();
  inline void set_has_download_full();
  inline void clear_has_download_full();
  inline void set_has_download_original();
  inline void clear_has_download_original();
  inline void set_has_error_update_metadata();
  inline void clear_has_error_update_metadata();
  inline void set_has_error_upload_metadata();
  inline void clear_has_error_upload_metadata();
  inline void set_has_error_upload_thumbnail();
  inline void clear_has_error_upload_thumbnail();
  inline void set_has_error_upload_medium();
  inline void clear_has_error_upload_medium();
  inline void set_has_error_upload_full();
  inline void clear_has_error_upload_full();
  inline void set_has_error_upload_original();
  inline void clear_has_error_upload_original();
  inline void set_has_error_download_thumbnail();
  inline void clear_has_error_download_thumbnail();
  inline void set_has_error_download_medium();
  inline void clear_has_error_download_medium();
  inline void set_has_error_download_full();
  inline void clear_has_error_download_full();
  inline void set_has_error_download_original();
  inline void clear_has_error_download_original();
  inline void set_has_error_asset_thumbnail();
  inline void clear_has_error_asset_thumbnail();
  inline void set_has_error_asset_full();
  inline void clear_has_error_asset_full();
  inline void set_has_error_asset_original();
  inline void clear_has_error_asset_original();
  inline void set_has_error_ui_thumbnail();
  inline void clear_has_error_ui_thumbnail();
  inline void set_has_error_ui_full();
  inline void clear_has_error_ui_full();
  inline void set_has_error_ui_original();
  inline void clear_has_error_ui_original();
  inline void set_has_error_timestamp();
  inline void clear_has_error_timestamp();
  inline void set_has_error_timestamp_invalid();
  inline void clear_has_error_timestamp_invalid();
  inline void set_has_error_placemark_invalid();
  inline void clear_has_error_placemark_invalid();
  inline void set_has_placemark_histogram();
  inline void clear_has_placemark_histogram();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> asset_keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> asset_fingerprints_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > candidate_duplicates_;
  ::google::protobuf::internal::ArenaStringPtr caption_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  ::google::protobuf::internal::ArenaStringPtr deprecated_adjustment_xmp_;
  ::PhotoId* id_;
  ::PhotoId* parent_id_;
  ::EpisodeId* episode_id_;
  ::Location* location_;
  ::Placemark* placemark_;
  ::PhotoMetadata_Images* images_;
  ::QueueMetadata* queue_;
  ::ImageFingerprint* perceptual_fingerprint_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int64 sharing_user_id_;
  double aspect_ratio_;
  double timestamp_;
  ::google::protobuf::int32 deprecated_orientation_;
  bool shared_;
  bool label_removed_;
  bool label_hidden_;
  bool label_unshared_;
  bool label_error_;
  bool update_metadata_;
  bool upload_metadata_;
  bool upload_thumbnail_;
  bool upload_medium_;
  bool upload_full_;
  bool upload_original_;
  bool download_thumbnail_;
  bool download_medium_;
  bool download_full_;
  bool download_original_;
  bool error_update_metadata_;
  bool error_upload_metadata_;
  bool error_upload_thumbnail_;
  bool error_upload_medium_;
  bool error_upload_full_;
  bool error_upload_original_;
  bool error_download_thumbnail_;
  bool error_download_medium_;
  bool error_download_full_;
  bool error_download_original_;
  bool error_asset_thumbnail_;
  bool error_asset_full_;
  bool error_asset_original_;
  bool error_ui_thumbnail_;
  bool error_ui_full_;
  bool error_ui_original_;
  bool error_timestamp_;
  bool error_timestamp_invalid_;
  bool error_placemark_invalid_;
  bool placemark_histogram_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_PhotoMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_PhotoMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_PhotoMetadata_2eproto();
  friend void protobuf_ShutdownFile_PhotoMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PhotoMetadata> PhotoMetadata_default_instance_;

// -------------------------------------------------------------------

class PhotoPathMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PhotoPathMetadata) */ {
 public:
  PhotoPathMetadata();
  virtual ~PhotoPathMetadata();

  PhotoPathMetadata(const PhotoPathMetadata& from);

  inline PhotoPathMetadata& operator=(const PhotoPathMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoPathMetadata& default_instance();

  static const PhotoPathMetadata* internal_default_instance();

  void Swap(PhotoPathMetadata* other);

  // implements Message ----------------------------------------------

  inline PhotoPathMetadata* New() const { return New(NULL); }

  PhotoPathMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoPathMetadata& from);
  void MergeFrom(const PhotoPathMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhotoPathMetadata* other);
  void UnsafeMergeFrom(const PhotoPathMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_id = 1;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // optional string md5 = 2;
  bool has_md5() const;
  void clear_md5();
  static const int kMd5FieldNumber = 2;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // optional uint32 access_time = 3;
  bool has_access_time() const;
  void clear_access_time();
  static const int kAccessTimeFieldNumber = 3;
  ::google::protobuf::uint32 access_time() const;
  void set_access_time(::google::protobuf::uint32 value);

  // optional int64 size = 4;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // optional int32 parent_size = 5;
  bool has_parent_size() const;
  void clear_parent_size();
  static const int kParentSizeFieldNumber = 5;
  ::google::protobuf::int32 parent_size() const;
  void set_parent_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PhotoPathMetadata)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_access_time();
  inline void clear_has_access_time();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_parent_size();
  inline void clear_has_parent_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::uint32 access_time_;
  ::google::protobuf::int32 parent_size_;
  friend void  protobuf_InitDefaults_PhotoMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_PhotoMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_PhotoMetadata_2eproto();
  friend void protobuf_ShutdownFile_PhotoMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PhotoPathMetadata> PhotoPathMetadata_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoMetadata_Image

// optional int32 size = 1;
inline bool PhotoMetadata_Image::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoMetadata_Image::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoMetadata_Image::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoMetadata_Image::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 PhotoMetadata_Image::size() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Image.size)
  return size_;
}
inline void PhotoMetadata_Image::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.Image.size)
}

// optional string md5 = 2;
inline bool PhotoMetadata_Image::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoMetadata_Image::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoMetadata_Image::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoMetadata_Image::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& PhotoMetadata_Image::md5() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Image.md5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoMetadata_Image::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.Image.md5)
}
inline void PhotoMetadata_Image::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.Image.md5)
}
inline void PhotoMetadata_Image::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.Image.md5)
}
inline ::std::string* PhotoMetadata_Image::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Image.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhotoMetadata_Image::release_md5() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Image.md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoMetadata_Image::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Image.md5)
}

inline const PhotoMetadata_Image* PhotoMetadata_Image::internal_default_instance() {
  return &PhotoMetadata_Image_default_instance_.get();
}
// -------------------------------------------------------------------

// PhotoMetadata_Images

// optional .PhotoMetadata.Image tn = 1;
inline bool PhotoMetadata_Images::has_tn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoMetadata_Images::set_has_tn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoMetadata_Images::clear_has_tn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoMetadata_Images::clear_tn() {
  if (tn_ != NULL) tn_->::PhotoMetadata_Image::Clear();
  clear_has_tn();
}
inline const ::PhotoMetadata_Image& PhotoMetadata_Images::tn() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Images.tn)
  return tn_ != NULL ? *tn_
                         : *::PhotoMetadata_Image::internal_default_instance();
}
inline ::PhotoMetadata_Image* PhotoMetadata_Images::mutable_tn() {
  set_has_tn();
  if (tn_ == NULL) {
    tn_ = new ::PhotoMetadata_Image;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Images.tn)
  return tn_;
}
inline ::PhotoMetadata_Image* PhotoMetadata_Images::release_tn() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Images.tn)
  clear_has_tn();
  ::PhotoMetadata_Image* temp = tn_;
  tn_ = NULL;
  return temp;
}
inline void PhotoMetadata_Images::set_allocated_tn(::PhotoMetadata_Image* tn) {
  delete tn_;
  tn_ = tn;
  if (tn) {
    set_has_tn();
  } else {
    clear_has_tn();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Images.tn)
}

// optional .PhotoMetadata.Image med = 2;
inline bool PhotoMetadata_Images::has_med() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoMetadata_Images::set_has_med() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoMetadata_Images::clear_has_med() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoMetadata_Images::clear_med() {
  if (med_ != NULL) med_->::PhotoMetadata_Image::Clear();
  clear_has_med();
}
inline const ::PhotoMetadata_Image& PhotoMetadata_Images::med() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Images.med)
  return med_ != NULL ? *med_
                         : *::PhotoMetadata_Image::internal_default_instance();
}
inline ::PhotoMetadata_Image* PhotoMetadata_Images::mutable_med() {
  set_has_med();
  if (med_ == NULL) {
    med_ = new ::PhotoMetadata_Image;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Images.med)
  return med_;
}
inline ::PhotoMetadata_Image* PhotoMetadata_Images::release_med() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Images.med)
  clear_has_med();
  ::PhotoMetadata_Image* temp = med_;
  med_ = NULL;
  return temp;
}
inline void PhotoMetadata_Images::set_allocated_med(::PhotoMetadata_Image* med) {
  delete med_;
  med_ = med;
  if (med) {
    set_has_med();
  } else {
    clear_has_med();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Images.med)
}

// optional .PhotoMetadata.Image full = 3;
inline bool PhotoMetadata_Images::has_full() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhotoMetadata_Images::set_has_full() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhotoMetadata_Images::clear_has_full() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhotoMetadata_Images::clear_full() {
  if (full_ != NULL) full_->::PhotoMetadata_Image::Clear();
  clear_has_full();
}
inline const ::PhotoMetadata_Image& PhotoMetadata_Images::full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Images.full)
  return full_ != NULL ? *full_
                         : *::PhotoMetadata_Image::internal_default_instance();
}
inline ::PhotoMetadata_Image* PhotoMetadata_Images::mutable_full() {
  set_has_full();
  if (full_ == NULL) {
    full_ = new ::PhotoMetadata_Image;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Images.full)
  return full_;
}
inline ::PhotoMetadata_Image* PhotoMetadata_Images::release_full() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Images.full)
  clear_has_full();
  ::PhotoMetadata_Image* temp = full_;
  full_ = NULL;
  return temp;
}
inline void PhotoMetadata_Images::set_allocated_full(::PhotoMetadata_Image* full) {
  delete full_;
  full_ = full;
  if (full) {
    set_has_full();
  } else {
    clear_has_full();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Images.full)
}

// optional .PhotoMetadata.Image orig = 4;
inline bool PhotoMetadata_Images::has_orig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhotoMetadata_Images::set_has_orig() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhotoMetadata_Images::clear_has_orig() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhotoMetadata_Images::clear_orig() {
  if (orig_ != NULL) orig_->::PhotoMetadata_Image::Clear();
  clear_has_orig();
}
inline const ::PhotoMetadata_Image& PhotoMetadata_Images::orig() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.Images.orig)
  return orig_ != NULL ? *orig_
                         : *::PhotoMetadata_Image::internal_default_instance();
}
inline ::PhotoMetadata_Image* PhotoMetadata_Images::mutable_orig() {
  set_has_orig();
  if (orig_ == NULL) {
    orig_ = new ::PhotoMetadata_Image;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.Images.orig)
  return orig_;
}
inline ::PhotoMetadata_Image* PhotoMetadata_Images::release_orig() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.Images.orig)
  clear_has_orig();
  ::PhotoMetadata_Image* temp = orig_;
  orig_ = NULL;
  return temp;
}
inline void PhotoMetadata_Images::set_allocated_orig(::PhotoMetadata_Image* orig) {
  delete orig_;
  orig_ = orig;
  if (orig) {
    set_has_orig();
  } else {
    clear_has_orig();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.Images.orig)
}

inline const PhotoMetadata_Images* PhotoMetadata_Images::internal_default_instance() {
  return &PhotoMetadata_Images_default_instance_.get();
}
// -------------------------------------------------------------------

// PhotoMetadata

// optional .PhotoId id = 1;
inline bool PhotoMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoMetadata::clear_id() {
  if (id_ != NULL) id_->::PhotoId::Clear();
  clear_has_id();
}
inline const ::PhotoId& PhotoMetadata::id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.id)
  return id_ != NULL ? *id_
                         : *::PhotoId::internal_default_instance();
}
inline ::PhotoId* PhotoMetadata::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.id)
  return id_;
}
inline ::PhotoId* PhotoMetadata::release_id() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.id)
  clear_has_id();
  ::PhotoId* temp = id_;
  id_ = NULL;
  return temp;
}
inline void PhotoMetadata::set_allocated_id(::PhotoId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.id)
}

// optional .PhotoId parent_id = 2;
inline bool PhotoMetadata::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoMetadata::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoMetadata::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoMetadata::clear_parent_id() {
  if (parent_id_ != NULL) parent_id_->::PhotoId::Clear();
  clear_has_parent_id();
}
inline const ::PhotoId& PhotoMetadata::parent_id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.parent_id)
  return parent_id_ != NULL ? *parent_id_
                         : *::PhotoId::internal_default_instance();
}
inline ::PhotoId* PhotoMetadata::mutable_parent_id() {
  set_has_parent_id();
  if (parent_id_ == NULL) {
    parent_id_ = new ::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.parent_id)
  return parent_id_;
}
inline ::PhotoId* PhotoMetadata::release_parent_id() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.parent_id)
  clear_has_parent_id();
  ::PhotoId* temp = parent_id_;
  parent_id_ = NULL;
  return temp;
}
inline void PhotoMetadata::set_allocated_parent_id(::PhotoId* parent_id) {
  delete parent_id_;
  parent_id_ = parent_id;
  if (parent_id) {
    set_has_parent_id();
  } else {
    clear_has_parent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.parent_id)
}

// optional .EpisodeId episode_id = 3;
inline bool PhotoMetadata::has_episode_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhotoMetadata::set_has_episode_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhotoMetadata::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhotoMetadata::clear_episode_id() {
  if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  clear_has_episode_id();
}
inline const ::EpisodeId& PhotoMetadata::episode_id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.episode_id)
  return episode_id_ != NULL ? *episode_id_
                         : *::EpisodeId::internal_default_instance();
}
inline ::EpisodeId* PhotoMetadata::mutable_episode_id() {
  set_has_episode_id();
  if (episode_id_ == NULL) {
    episode_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.episode_id)
  return episode_id_;
}
inline ::EpisodeId* PhotoMetadata::release_episode_id() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.episode_id)
  clear_has_episode_id();
  ::EpisodeId* temp = episode_id_;
  episode_id_ = NULL;
  return temp;
}
inline void PhotoMetadata::set_allocated_episode_id(::EpisodeId* episode_id) {
  delete episode_id_;
  episode_id_ = episode_id;
  if (episode_id) {
    set_has_episode_id();
  } else {
    clear_has_episode_id();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.episode_id)
}

// optional int64 user_id = 4;
inline bool PhotoMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhotoMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhotoMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhotoMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 PhotoMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.user_id)
  return user_id_;
}
inline void PhotoMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.user_id)
}

// optional int64 sharing_user_id = 5;
inline bool PhotoMetadata::has_sharing_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PhotoMetadata::set_has_sharing_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PhotoMetadata::clear_has_sharing_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PhotoMetadata::clear_sharing_user_id() {
  sharing_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_sharing_user_id();
}
inline ::google::protobuf::int64 PhotoMetadata::sharing_user_id() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.sharing_user_id)
  return sharing_user_id_;
}
inline void PhotoMetadata::set_sharing_user_id(::google::protobuf::int64 value) {
  set_has_sharing_user_id();
  sharing_user_id_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.sharing_user_id)
}

// optional int32 DEPRECATED_orientation = 6;
inline bool PhotoMetadata::has_deprecated_orientation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PhotoMetadata::set_has_deprecated_orientation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PhotoMetadata::clear_has_deprecated_orientation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PhotoMetadata::clear_deprecated_orientation() {
  deprecated_orientation_ = 0;
  clear_has_deprecated_orientation();
}
inline ::google::protobuf::int32 PhotoMetadata::deprecated_orientation() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.DEPRECATED_orientation)
  return deprecated_orientation_;
}
inline void PhotoMetadata::set_deprecated_orientation(::google::protobuf::int32 value) {
  set_has_deprecated_orientation();
  deprecated_orientation_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.DEPRECATED_orientation)
}

// optional double aspect_ratio = 7;
inline bool PhotoMetadata::has_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PhotoMetadata::set_has_aspect_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PhotoMetadata::clear_has_aspect_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PhotoMetadata::clear_aspect_ratio() {
  aspect_ratio_ = 0;
  clear_has_aspect_ratio();
}
inline double PhotoMetadata::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.aspect_ratio)
  return aspect_ratio_;
}
inline void PhotoMetadata::set_aspect_ratio(double value) {
  set_has_aspect_ratio();
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.aspect_ratio)
}

// optional double timestamp = 8;
inline bool PhotoMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PhotoMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PhotoMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PhotoMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double PhotoMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.timestamp)
  return timestamp_;
}
inline void PhotoMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.timestamp)
}

// optional .Location location = 9;
inline bool PhotoMetadata::has_location() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PhotoMetadata::set_has_location() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PhotoMetadata::clear_has_location() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PhotoMetadata::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
inline const ::Location& PhotoMetadata::location() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
inline ::Location* PhotoMetadata::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.location)
  return location_;
}
inline ::Location* PhotoMetadata::release_location() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void PhotoMetadata::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.location)
}

// optional .Placemark placemark = 10;
inline bool PhotoMetadata::has_placemark() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PhotoMetadata::set_has_placemark() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PhotoMetadata::clear_has_placemark() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PhotoMetadata::clear_placemark() {
  if (placemark_ != NULL) placemark_->::Placemark::Clear();
  clear_has_placemark();
}
inline const ::Placemark& PhotoMetadata::placemark() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.placemark)
  return placemark_ != NULL ? *placemark_
                         : *::Placemark::internal_default_instance();
}
inline ::Placemark* PhotoMetadata::mutable_placemark() {
  set_has_placemark();
  if (placemark_ == NULL) {
    placemark_ = new ::Placemark;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.placemark)
  return placemark_;
}
inline ::Placemark* PhotoMetadata::release_placemark() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.placemark)
  clear_has_placemark();
  ::Placemark* temp = placemark_;
  placemark_ = NULL;
  return temp;
}
inline void PhotoMetadata::set_allocated_placemark(::Placemark* placemark) {
  delete placemark_;
  placemark_ = placemark;
  if (placemark) {
    set_has_placemark();
  } else {
    clear_has_placemark();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.placemark)
}

// optional string caption = 11;
inline bool PhotoMetadata::has_caption() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PhotoMetadata::set_has_caption() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PhotoMetadata::clear_has_caption() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PhotoMetadata::clear_caption() {
  caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption();
}
inline const ::std::string& PhotoMetadata::caption() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.caption)
  return caption_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoMetadata::set_caption(const ::std::string& value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.caption)
}
inline void PhotoMetadata::set_caption(const char* value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.caption)
}
inline void PhotoMetadata::set_caption(const char* value, size_t size) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.caption)
}
inline ::std::string* PhotoMetadata::mutable_caption() {
  set_has_caption();
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.caption)
  return caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhotoMetadata::release_caption() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.caption)
  clear_has_caption();
  return caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoMetadata::set_allocated_caption(::std::string* caption) {
  if (caption != NULL) {
    set_has_caption();
  } else {
    clear_has_caption();
  }
  caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.caption)
}

// optional string link = 12;
inline bool PhotoMetadata::has_link() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PhotoMetadata::set_has_link() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PhotoMetadata::clear_has_link() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PhotoMetadata::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
inline const ::std::string& PhotoMetadata::link() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.link)
  return link_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoMetadata::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.link)
}
inline void PhotoMetadata::set_link(const char* value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.link)
}
inline void PhotoMetadata::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.link)
}
inline ::std::string* PhotoMetadata::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhotoMetadata::release_link() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.link)
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoMetadata::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.link)
}

// optional .PhotoMetadata.Images images = 14;
inline bool PhotoMetadata::has_images() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PhotoMetadata::set_has_images() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PhotoMetadata::clear_has_images() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PhotoMetadata::clear_images() {
  if (images_ != NULL) images_->::PhotoMetadata_Images::Clear();
  clear_has_images();
}
inline const ::PhotoMetadata_Images& PhotoMetadata::images() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.images)
  return images_ != NULL ? *images_
                         : *::PhotoMetadata_Images::internal_default_instance();
}
inline ::PhotoMetadata_Images* PhotoMetadata::mutable_images() {
  set_has_images();
  if (images_ == NULL) {
    images_ = new ::PhotoMetadata_Images;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.images)
  return images_;
}
inline ::PhotoMetadata_Images* PhotoMetadata::release_images() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.images)
  clear_has_images();
  ::PhotoMetadata_Images* temp = images_;
  images_ = NULL;
  return temp;
}
inline void PhotoMetadata::set_allocated_images(::PhotoMetadata_Images* images) {
  delete images_;
  images_ = images;
  if (images) {
    set_has_images();
  } else {
    clear_has_images();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.images)
}

// optional .QueueMetadata queue = 15;
inline bool PhotoMetadata::has_queue() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PhotoMetadata::set_has_queue() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PhotoMetadata::clear_has_queue() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PhotoMetadata::clear_queue() {
  if (queue_ != NULL) queue_->::QueueMetadata::Clear();
  clear_has_queue();
}
inline const ::QueueMetadata& PhotoMetadata::queue() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.queue)
  return queue_ != NULL ? *queue_
                         : *::QueueMetadata::internal_default_instance();
}
inline ::QueueMetadata* PhotoMetadata::mutable_queue() {
  set_has_queue();
  if (queue_ == NULL) {
    queue_ = new ::QueueMetadata;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.queue)
  return queue_;
}
inline ::QueueMetadata* PhotoMetadata::release_queue() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.queue)
  clear_has_queue();
  ::QueueMetadata* temp = queue_;
  queue_ = NULL;
  return temp;
}
inline void PhotoMetadata::set_allocated_queue(::QueueMetadata* queue) {
  delete queue_;
  queue_ = queue;
  if (queue) {
    set_has_queue();
  } else {
    clear_has_queue();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.queue)
}

// optional bool shared = 16;
inline bool PhotoMetadata::has_shared() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PhotoMetadata::set_has_shared() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PhotoMetadata::clear_has_shared() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PhotoMetadata::clear_shared() {
  shared_ = false;
  clear_has_shared();
}
inline bool PhotoMetadata::shared() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.shared)
  return shared_;
}
inline void PhotoMetadata::set_shared(bool value) {
  set_has_shared();
  shared_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.shared)
}

// optional string DEPRECATED_adjustment_xmp = 17;
inline bool PhotoMetadata::has_deprecated_adjustment_xmp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PhotoMetadata::set_has_deprecated_adjustment_xmp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PhotoMetadata::clear_has_deprecated_adjustment_xmp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PhotoMetadata::clear_deprecated_adjustment_xmp() {
  deprecated_adjustment_xmp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_adjustment_xmp();
}
inline const ::std::string& PhotoMetadata::deprecated_adjustment_xmp() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.DEPRECATED_adjustment_xmp)
  return deprecated_adjustment_xmp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoMetadata::set_deprecated_adjustment_xmp(const ::std::string& value) {
  set_has_deprecated_adjustment_xmp();
  deprecated_adjustment_xmp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.DEPRECATED_adjustment_xmp)
}
inline void PhotoMetadata::set_deprecated_adjustment_xmp(const char* value) {
  set_has_deprecated_adjustment_xmp();
  deprecated_adjustment_xmp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.DEPRECATED_adjustment_xmp)
}
inline void PhotoMetadata::set_deprecated_adjustment_xmp(const char* value, size_t size) {
  set_has_deprecated_adjustment_xmp();
  deprecated_adjustment_xmp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.DEPRECATED_adjustment_xmp)
}
inline ::std::string* PhotoMetadata::mutable_deprecated_adjustment_xmp() {
  set_has_deprecated_adjustment_xmp();
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.DEPRECATED_adjustment_xmp)
  return deprecated_adjustment_xmp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhotoMetadata::release_deprecated_adjustment_xmp() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.DEPRECATED_adjustment_xmp)
  clear_has_deprecated_adjustment_xmp();
  return deprecated_adjustment_xmp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoMetadata::set_allocated_deprecated_adjustment_xmp(::std::string* deprecated_adjustment_xmp) {
  if (deprecated_adjustment_xmp != NULL) {
    set_has_deprecated_adjustment_xmp();
  } else {
    clear_has_deprecated_adjustment_xmp();
  }
  deprecated_adjustment_xmp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_adjustment_xmp);
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.DEPRECATED_adjustment_xmp)
}

// repeated string asset_keys = 18;
inline int PhotoMetadata::asset_keys_size() const {
  return asset_keys_.size();
}
inline void PhotoMetadata::clear_asset_keys() {
  asset_keys_.Clear();
}
inline const ::std::string& PhotoMetadata::asset_keys(int index) const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.asset_keys)
  return asset_keys_.Get(index);
}
inline ::std::string* PhotoMetadata::mutable_asset_keys(int index) {
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.asset_keys)
  return asset_keys_.Mutable(index);
}
inline void PhotoMetadata::set_asset_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PhotoMetadata.asset_keys)
  asset_keys_.Mutable(index)->assign(value);
}
inline void PhotoMetadata::set_asset_keys(int index, const char* value) {
  asset_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.asset_keys)
}
inline void PhotoMetadata::set_asset_keys(int index, const char* value, size_t size) {
  asset_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.asset_keys)
}
inline ::std::string* PhotoMetadata::add_asset_keys() {
  // @@protoc_insertion_point(field_add_mutable:PhotoMetadata.asset_keys)
  return asset_keys_.Add();
}
inline void PhotoMetadata::add_asset_keys(const ::std::string& value) {
  asset_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PhotoMetadata.asset_keys)
}
inline void PhotoMetadata::add_asset_keys(const char* value) {
  asset_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PhotoMetadata.asset_keys)
}
inline void PhotoMetadata::add_asset_keys(const char* value, size_t size) {
  asset_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PhotoMetadata.asset_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PhotoMetadata::asset_keys() const {
  // @@protoc_insertion_point(field_list:PhotoMetadata.asset_keys)
  return asset_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PhotoMetadata::mutable_asset_keys() {
  // @@protoc_insertion_point(field_mutable_list:PhotoMetadata.asset_keys)
  return &asset_keys_;
}

// repeated string asset_fingerprints = 19;
inline int PhotoMetadata::asset_fingerprints_size() const {
  return asset_fingerprints_.size();
}
inline void PhotoMetadata::clear_asset_fingerprints() {
  asset_fingerprints_.Clear();
}
inline const ::std::string& PhotoMetadata::asset_fingerprints(int index) const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.asset_fingerprints)
  return asset_fingerprints_.Get(index);
}
inline ::std::string* PhotoMetadata::mutable_asset_fingerprints(int index) {
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.asset_fingerprints)
  return asset_fingerprints_.Mutable(index);
}
inline void PhotoMetadata::set_asset_fingerprints(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PhotoMetadata.asset_fingerprints)
  asset_fingerprints_.Mutable(index)->assign(value);
}
inline void PhotoMetadata::set_asset_fingerprints(int index, const char* value) {
  asset_fingerprints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PhotoMetadata.asset_fingerprints)
}
inline void PhotoMetadata::set_asset_fingerprints(int index, const char* value, size_t size) {
  asset_fingerprints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PhotoMetadata.asset_fingerprints)
}
inline ::std::string* PhotoMetadata::add_asset_fingerprints() {
  // @@protoc_insertion_point(field_add_mutable:PhotoMetadata.asset_fingerprints)
  return asset_fingerprints_.Add();
}
inline void PhotoMetadata::add_asset_fingerprints(const ::std::string& value) {
  asset_fingerprints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PhotoMetadata.asset_fingerprints)
}
inline void PhotoMetadata::add_asset_fingerprints(const char* value) {
  asset_fingerprints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PhotoMetadata.asset_fingerprints)
}
inline void PhotoMetadata::add_asset_fingerprints(const char* value, size_t size) {
  asset_fingerprints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PhotoMetadata.asset_fingerprints)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PhotoMetadata::asset_fingerprints() const {
  // @@protoc_insertion_point(field_list:PhotoMetadata.asset_fingerprints)
  return asset_fingerprints_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PhotoMetadata::mutable_asset_fingerprints() {
  // @@protoc_insertion_point(field_mutable_list:PhotoMetadata.asset_fingerprints)
  return &asset_fingerprints_;
}

// optional .ImageFingerprint perceptual_fingerprint = 24;
inline bool PhotoMetadata::has_perceptual_fingerprint() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PhotoMetadata::set_has_perceptual_fingerprint() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PhotoMetadata::clear_has_perceptual_fingerprint() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PhotoMetadata::clear_perceptual_fingerprint() {
  if (perceptual_fingerprint_ != NULL) perceptual_fingerprint_->::ImageFingerprint::Clear();
  clear_has_perceptual_fingerprint();
}
inline const ::ImageFingerprint& PhotoMetadata::perceptual_fingerprint() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.perceptual_fingerprint)
  return perceptual_fingerprint_ != NULL ? *perceptual_fingerprint_
                         : *::ImageFingerprint::internal_default_instance();
}
inline ::ImageFingerprint* PhotoMetadata::mutable_perceptual_fingerprint() {
  set_has_perceptual_fingerprint();
  if (perceptual_fingerprint_ == NULL) {
    perceptual_fingerprint_ = new ::ImageFingerprint;
  }
  // @@protoc_insertion_point(field_mutable:PhotoMetadata.perceptual_fingerprint)
  return perceptual_fingerprint_;
}
inline ::ImageFingerprint* PhotoMetadata::release_perceptual_fingerprint() {
  // @@protoc_insertion_point(field_release:PhotoMetadata.perceptual_fingerprint)
  clear_has_perceptual_fingerprint();
  ::ImageFingerprint* temp = perceptual_fingerprint_;
  perceptual_fingerprint_ = NULL;
  return temp;
}
inline void PhotoMetadata::set_allocated_perceptual_fingerprint(::ImageFingerprint* perceptual_fingerprint) {
  delete perceptual_fingerprint_;
  perceptual_fingerprint_ = perceptual_fingerprint;
  if (perceptual_fingerprint) {
    set_has_perceptual_fingerprint();
  } else {
    clear_has_perceptual_fingerprint();
  }
  // @@protoc_insertion_point(field_set_allocated:PhotoMetadata.perceptual_fingerprint)
}

// repeated int64 candidate_duplicates = 25;
inline int PhotoMetadata::candidate_duplicates_size() const {
  return candidate_duplicates_.size();
}
inline void PhotoMetadata::clear_candidate_duplicates() {
  candidate_duplicates_.Clear();
}
inline ::google::protobuf::int64 PhotoMetadata::candidate_duplicates(int index) const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.candidate_duplicates)
  return candidate_duplicates_.Get(index);
}
inline void PhotoMetadata::set_candidate_duplicates(int index, ::google::protobuf::int64 value) {
  candidate_duplicates_.Set(index, value);
  // @@protoc_insertion_point(field_set:PhotoMetadata.candidate_duplicates)
}
inline void PhotoMetadata::add_candidate_duplicates(::google::protobuf::int64 value) {
  candidate_duplicates_.Add(value);
  // @@protoc_insertion_point(field_add:PhotoMetadata.candidate_duplicates)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PhotoMetadata::candidate_duplicates() const {
  // @@protoc_insertion_point(field_list:PhotoMetadata.candidate_duplicates)
  return candidate_duplicates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PhotoMetadata::mutable_candidate_duplicates() {
  // @@protoc_insertion_point(field_mutable_list:PhotoMetadata.candidate_duplicates)
  return &candidate_duplicates_;
}

// optional bool label_removed = 20;
inline bool PhotoMetadata::has_label_removed() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PhotoMetadata::set_has_label_removed() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PhotoMetadata::clear_has_label_removed() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PhotoMetadata::clear_label_removed() {
  label_removed_ = false;
  clear_has_label_removed();
}
inline bool PhotoMetadata::label_removed() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.label_removed)
  return label_removed_;
}
inline void PhotoMetadata::set_label_removed(bool value) {
  set_has_label_removed();
  label_removed_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.label_removed)
}

// optional bool label_hidden = 23;
inline bool PhotoMetadata::has_label_hidden() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PhotoMetadata::set_has_label_hidden() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PhotoMetadata::clear_has_label_hidden() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PhotoMetadata::clear_label_hidden() {
  label_hidden_ = false;
  clear_has_label_hidden();
}
inline bool PhotoMetadata::label_hidden() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.label_hidden)
  return label_hidden_;
}
inline void PhotoMetadata::set_label_hidden(bool value) {
  set_has_label_hidden();
  label_hidden_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.label_hidden)
}

// optional bool label_unshared = 21;
inline bool PhotoMetadata::has_label_unshared() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PhotoMetadata::set_has_label_unshared() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PhotoMetadata::clear_has_label_unshared() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PhotoMetadata::clear_label_unshared() {
  label_unshared_ = false;
  clear_has_label_unshared();
}
inline bool PhotoMetadata::label_unshared() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.label_unshared)
  return label_unshared_;
}
inline void PhotoMetadata::set_label_unshared(bool value) {
  set_has_label_unshared();
  label_unshared_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.label_unshared)
}

// optional bool label_error = 22;
inline bool PhotoMetadata::has_label_error() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PhotoMetadata::set_has_label_error() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PhotoMetadata::clear_has_label_error() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PhotoMetadata::clear_label_error() {
  label_error_ = false;
  clear_has_label_error();
}
inline bool PhotoMetadata::label_error() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.label_error)
  return label_error_;
}
inline void PhotoMetadata::set_label_error(bool value) {
  set_has_label_error();
  label_error_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.label_error)
}

// optional bool update_metadata = 49;
inline bool PhotoMetadata::has_update_metadata() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PhotoMetadata::set_has_update_metadata() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PhotoMetadata::clear_has_update_metadata() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PhotoMetadata::clear_update_metadata() {
  update_metadata_ = false;
  clear_has_update_metadata();
}
inline bool PhotoMetadata::update_metadata() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.update_metadata)
  return update_metadata_;
}
inline void PhotoMetadata::set_update_metadata(bool value) {
  set_has_update_metadata();
  update_metadata_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.update_metadata)
}

// optional bool upload_metadata = 40;
inline bool PhotoMetadata::has_upload_metadata() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PhotoMetadata::set_has_upload_metadata() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PhotoMetadata::clear_has_upload_metadata() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PhotoMetadata::clear_upload_metadata() {
  upload_metadata_ = false;
  clear_has_upload_metadata();
}
inline bool PhotoMetadata::upload_metadata() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_metadata)
  return upload_metadata_;
}
inline void PhotoMetadata::set_upload_metadata(bool value) {
  set_has_upload_metadata();
  upload_metadata_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_metadata)
}

// optional bool upload_thumbnail = 41;
inline bool PhotoMetadata::has_upload_thumbnail() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PhotoMetadata::set_has_upload_thumbnail() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PhotoMetadata::clear_has_upload_thumbnail() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PhotoMetadata::clear_upload_thumbnail() {
  upload_thumbnail_ = false;
  clear_has_upload_thumbnail();
}
inline bool PhotoMetadata::upload_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_thumbnail)
  return upload_thumbnail_;
}
inline void PhotoMetadata::set_upload_thumbnail(bool value) {
  set_has_upload_thumbnail();
  upload_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_thumbnail)
}

// optional bool upload_medium = 42;
inline bool PhotoMetadata::has_upload_medium() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PhotoMetadata::set_has_upload_medium() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PhotoMetadata::clear_has_upload_medium() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PhotoMetadata::clear_upload_medium() {
  upload_medium_ = false;
  clear_has_upload_medium();
}
inline bool PhotoMetadata::upload_medium() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_medium)
  return upload_medium_;
}
inline void PhotoMetadata::set_upload_medium(bool value) {
  set_has_upload_medium();
  upload_medium_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_medium)
}

// optional bool upload_full = 43;
inline bool PhotoMetadata::has_upload_full() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PhotoMetadata::set_has_upload_full() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PhotoMetadata::clear_has_upload_full() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PhotoMetadata::clear_upload_full() {
  upload_full_ = false;
  clear_has_upload_full();
}
inline bool PhotoMetadata::upload_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_full)
  return upload_full_;
}
inline void PhotoMetadata::set_upload_full(bool value) {
  set_has_upload_full();
  upload_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_full)
}

// optional bool upload_original = 44;
inline bool PhotoMetadata::has_upload_original() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PhotoMetadata::set_has_upload_original() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PhotoMetadata::clear_has_upload_original() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PhotoMetadata::clear_upload_original() {
  upload_original_ = false;
  clear_has_upload_original();
}
inline bool PhotoMetadata::upload_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.upload_original)
  return upload_original_;
}
inline void PhotoMetadata::set_upload_original(bool value) {
  set_has_upload_original();
  upload_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.upload_original)
}

// optional bool download_thumbnail = 45;
inline bool PhotoMetadata::has_download_thumbnail() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PhotoMetadata::set_has_download_thumbnail() {
  _has_bits_[0] |= 0x40000000u;
}
inline void PhotoMetadata::clear_has_download_thumbnail() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void PhotoMetadata::clear_download_thumbnail() {
  download_thumbnail_ = false;
  clear_has_download_thumbnail();
}
inline bool PhotoMetadata::download_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.download_thumbnail)
  return download_thumbnail_;
}
inline void PhotoMetadata::set_download_thumbnail(bool value) {
  set_has_download_thumbnail();
  download_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.download_thumbnail)
}

// optional bool download_medium = 46;
inline bool PhotoMetadata::has_download_medium() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PhotoMetadata::set_has_download_medium() {
  _has_bits_[0] |= 0x80000000u;
}
inline void PhotoMetadata::clear_has_download_medium() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void PhotoMetadata::clear_download_medium() {
  download_medium_ = false;
  clear_has_download_medium();
}
inline bool PhotoMetadata::download_medium() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.download_medium)
  return download_medium_;
}
inline void PhotoMetadata::set_download_medium(bool value) {
  set_has_download_medium();
  download_medium_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.download_medium)
}

// optional bool download_full = 47;
inline bool PhotoMetadata::has_download_full() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PhotoMetadata::set_has_download_full() {
  _has_bits_[1] |= 0x00000001u;
}
inline void PhotoMetadata::clear_has_download_full() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void PhotoMetadata::clear_download_full() {
  download_full_ = false;
  clear_has_download_full();
}
inline bool PhotoMetadata::download_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.download_full)
  return download_full_;
}
inline void PhotoMetadata::set_download_full(bool value) {
  set_has_download_full();
  download_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.download_full)
}

// optional bool download_original = 48;
inline bool PhotoMetadata::has_download_original() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PhotoMetadata::set_has_download_original() {
  _has_bits_[1] |= 0x00000002u;
}
inline void PhotoMetadata::clear_has_download_original() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void PhotoMetadata::clear_download_original() {
  download_original_ = false;
  clear_has_download_original();
}
inline bool PhotoMetadata::download_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.download_original)
  return download_original_;
}
inline void PhotoMetadata::set_download_original(bool value) {
  set_has_download_original();
  download_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.download_original)
}

// optional bool error_update_metadata = 77;
inline bool PhotoMetadata::has_error_update_metadata() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PhotoMetadata::set_has_error_update_metadata() {
  _has_bits_[1] |= 0x00000004u;
}
inline void PhotoMetadata::clear_has_error_update_metadata() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void PhotoMetadata::clear_error_update_metadata() {
  error_update_metadata_ = false;
  clear_has_error_update_metadata();
}
inline bool PhotoMetadata::error_update_metadata() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_update_metadata)
  return error_update_metadata_;
}
inline void PhotoMetadata::set_error_update_metadata(bool value) {
  set_has_error_update_metadata();
  error_update_metadata_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_update_metadata)
}

// optional bool error_upload_metadata = 75;
inline bool PhotoMetadata::has_error_upload_metadata() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void PhotoMetadata::set_has_error_upload_metadata() {
  _has_bits_[1] |= 0x00000008u;
}
inline void PhotoMetadata::clear_has_error_upload_metadata() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void PhotoMetadata::clear_error_upload_metadata() {
  error_upload_metadata_ = false;
  clear_has_error_upload_metadata();
}
inline bool PhotoMetadata::error_upload_metadata() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_metadata)
  return error_upload_metadata_;
}
inline void PhotoMetadata::set_error_upload_metadata(bool value) {
  set_has_error_upload_metadata();
  error_upload_metadata_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_metadata)
}

// optional bool error_upload_thumbnail = 60;
inline bool PhotoMetadata::has_error_upload_thumbnail() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void PhotoMetadata::set_has_error_upload_thumbnail() {
  _has_bits_[1] |= 0x00000010u;
}
inline void PhotoMetadata::clear_has_error_upload_thumbnail() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void PhotoMetadata::clear_error_upload_thumbnail() {
  error_upload_thumbnail_ = false;
  clear_has_error_upload_thumbnail();
}
inline bool PhotoMetadata::error_upload_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_thumbnail)
  return error_upload_thumbnail_;
}
inline void PhotoMetadata::set_error_upload_thumbnail(bool value) {
  set_has_error_upload_thumbnail();
  error_upload_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_thumbnail)
}

// optional bool error_upload_medium = 61;
inline bool PhotoMetadata::has_error_upload_medium() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void PhotoMetadata::set_has_error_upload_medium() {
  _has_bits_[1] |= 0x00000020u;
}
inline void PhotoMetadata::clear_has_error_upload_medium() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void PhotoMetadata::clear_error_upload_medium() {
  error_upload_medium_ = false;
  clear_has_error_upload_medium();
}
inline bool PhotoMetadata::error_upload_medium() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_medium)
  return error_upload_medium_;
}
inline void PhotoMetadata::set_error_upload_medium(bool value) {
  set_has_error_upload_medium();
  error_upload_medium_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_medium)
}

// optional bool error_upload_full = 62;
inline bool PhotoMetadata::has_error_upload_full() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void PhotoMetadata::set_has_error_upload_full() {
  _has_bits_[1] |= 0x00000040u;
}
inline void PhotoMetadata::clear_has_error_upload_full() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void PhotoMetadata::clear_error_upload_full() {
  error_upload_full_ = false;
  clear_has_error_upload_full();
}
inline bool PhotoMetadata::error_upload_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_full)
  return error_upload_full_;
}
inline void PhotoMetadata::set_error_upload_full(bool value) {
  set_has_error_upload_full();
  error_upload_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_full)
}

// optional bool error_upload_original = 63;
inline bool PhotoMetadata::has_error_upload_original() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void PhotoMetadata::set_has_error_upload_original() {
  _has_bits_[1] |= 0x00000080u;
}
inline void PhotoMetadata::clear_has_error_upload_original() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void PhotoMetadata::clear_error_upload_original() {
  error_upload_original_ = false;
  clear_has_error_upload_original();
}
inline bool PhotoMetadata::error_upload_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_upload_original)
  return error_upload_original_;
}
inline void PhotoMetadata::set_error_upload_original(bool value) {
  set_has_error_upload_original();
  error_upload_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_upload_original)
}

// optional bool error_download_thumbnail = 64;
inline bool PhotoMetadata::has_error_download_thumbnail() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void PhotoMetadata::set_has_error_download_thumbnail() {
  _has_bits_[1] |= 0x00000100u;
}
inline void PhotoMetadata::clear_has_error_download_thumbnail() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void PhotoMetadata::clear_error_download_thumbnail() {
  error_download_thumbnail_ = false;
  clear_has_error_download_thumbnail();
}
inline bool PhotoMetadata::error_download_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_download_thumbnail)
  return error_download_thumbnail_;
}
inline void PhotoMetadata::set_error_download_thumbnail(bool value) {
  set_has_error_download_thumbnail();
  error_download_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_download_thumbnail)
}

// optional bool error_download_medium = 65;
inline bool PhotoMetadata::has_error_download_medium() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void PhotoMetadata::set_has_error_download_medium() {
  _has_bits_[1] |= 0x00000200u;
}
inline void PhotoMetadata::clear_has_error_download_medium() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void PhotoMetadata::clear_error_download_medium() {
  error_download_medium_ = false;
  clear_has_error_download_medium();
}
inline bool PhotoMetadata::error_download_medium() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_download_medium)
  return error_download_medium_;
}
inline void PhotoMetadata::set_error_download_medium(bool value) {
  set_has_error_download_medium();
  error_download_medium_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_download_medium)
}

// optional bool error_download_full = 66;
inline bool PhotoMetadata::has_error_download_full() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void PhotoMetadata::set_has_error_download_full() {
  _has_bits_[1] |= 0x00000400u;
}
inline void PhotoMetadata::clear_has_error_download_full() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void PhotoMetadata::clear_error_download_full() {
  error_download_full_ = false;
  clear_has_error_download_full();
}
inline bool PhotoMetadata::error_download_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_download_full)
  return error_download_full_;
}
inline void PhotoMetadata::set_error_download_full(bool value) {
  set_has_error_download_full();
  error_download_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_download_full)
}

// optional bool error_download_original = 67;
inline bool PhotoMetadata::has_error_download_original() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void PhotoMetadata::set_has_error_download_original() {
  _has_bits_[1] |= 0x00000800u;
}
inline void PhotoMetadata::clear_has_error_download_original() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void PhotoMetadata::clear_error_download_original() {
  error_download_original_ = false;
  clear_has_error_download_original();
}
inline bool PhotoMetadata::error_download_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_download_original)
  return error_download_original_;
}
inline void PhotoMetadata::set_error_download_original(bool value) {
  set_has_error_download_original();
  error_download_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_download_original)
}

// optional bool error_asset_thumbnail = 68;
inline bool PhotoMetadata::has_error_asset_thumbnail() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void PhotoMetadata::set_has_error_asset_thumbnail() {
  _has_bits_[1] |= 0x00001000u;
}
inline void PhotoMetadata::clear_has_error_asset_thumbnail() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void PhotoMetadata::clear_error_asset_thumbnail() {
  error_asset_thumbnail_ = false;
  clear_has_error_asset_thumbnail();
}
inline bool PhotoMetadata::error_asset_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_asset_thumbnail)
  return error_asset_thumbnail_;
}
inline void PhotoMetadata::set_error_asset_thumbnail(bool value) {
  set_has_error_asset_thumbnail();
  error_asset_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_asset_thumbnail)
}

// optional bool error_asset_full = 69;
inline bool PhotoMetadata::has_error_asset_full() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void PhotoMetadata::set_has_error_asset_full() {
  _has_bits_[1] |= 0x00002000u;
}
inline void PhotoMetadata::clear_has_error_asset_full() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void PhotoMetadata::clear_error_asset_full() {
  error_asset_full_ = false;
  clear_has_error_asset_full();
}
inline bool PhotoMetadata::error_asset_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_asset_full)
  return error_asset_full_;
}
inline void PhotoMetadata::set_error_asset_full(bool value) {
  set_has_error_asset_full();
  error_asset_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_asset_full)
}

// optional bool error_asset_original = 70;
inline bool PhotoMetadata::has_error_asset_original() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void PhotoMetadata::set_has_error_asset_original() {
  _has_bits_[1] |= 0x00004000u;
}
inline void PhotoMetadata::clear_has_error_asset_original() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void PhotoMetadata::clear_error_asset_original() {
  error_asset_original_ = false;
  clear_has_error_asset_original();
}
inline bool PhotoMetadata::error_asset_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_asset_original)
  return error_asset_original_;
}
inline void PhotoMetadata::set_error_asset_original(bool value) {
  set_has_error_asset_original();
  error_asset_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_asset_original)
}

// optional bool error_ui_thumbnail = 71;
inline bool PhotoMetadata::has_error_ui_thumbnail() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void PhotoMetadata::set_has_error_ui_thumbnail() {
  _has_bits_[1] |= 0x00008000u;
}
inline void PhotoMetadata::clear_has_error_ui_thumbnail() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void PhotoMetadata::clear_error_ui_thumbnail() {
  error_ui_thumbnail_ = false;
  clear_has_error_ui_thumbnail();
}
inline bool PhotoMetadata::error_ui_thumbnail() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_ui_thumbnail)
  return error_ui_thumbnail_;
}
inline void PhotoMetadata::set_error_ui_thumbnail(bool value) {
  set_has_error_ui_thumbnail();
  error_ui_thumbnail_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_ui_thumbnail)
}

// optional bool error_ui_full = 72;
inline bool PhotoMetadata::has_error_ui_full() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void PhotoMetadata::set_has_error_ui_full() {
  _has_bits_[1] |= 0x00010000u;
}
inline void PhotoMetadata::clear_has_error_ui_full() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void PhotoMetadata::clear_error_ui_full() {
  error_ui_full_ = false;
  clear_has_error_ui_full();
}
inline bool PhotoMetadata::error_ui_full() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_ui_full)
  return error_ui_full_;
}
inline void PhotoMetadata::set_error_ui_full(bool value) {
  set_has_error_ui_full();
  error_ui_full_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_ui_full)
}

// optional bool error_ui_original = 74;
inline bool PhotoMetadata::has_error_ui_original() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void PhotoMetadata::set_has_error_ui_original() {
  _has_bits_[1] |= 0x00020000u;
}
inline void PhotoMetadata::clear_has_error_ui_original() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void PhotoMetadata::clear_error_ui_original() {
  error_ui_original_ = false;
  clear_has_error_ui_original();
}
inline bool PhotoMetadata::error_ui_original() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_ui_original)
  return error_ui_original_;
}
inline void PhotoMetadata::set_error_ui_original(bool value) {
  set_has_error_ui_original();
  error_ui_original_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_ui_original)
}

// optional bool error_timestamp = 73;
inline bool PhotoMetadata::has_error_timestamp() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void PhotoMetadata::set_has_error_timestamp() {
  _has_bits_[1] |= 0x00040000u;
}
inline void PhotoMetadata::clear_has_error_timestamp() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void PhotoMetadata::clear_error_timestamp() {
  error_timestamp_ = false;
  clear_has_error_timestamp();
}
inline bool PhotoMetadata::error_timestamp() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_timestamp)
  return error_timestamp_;
}
inline void PhotoMetadata::set_error_timestamp(bool value) {
  set_has_error_timestamp();
  error_timestamp_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_timestamp)
}

// optional bool error_timestamp_invalid = 76;
inline bool PhotoMetadata::has_error_timestamp_invalid() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void PhotoMetadata::set_has_error_timestamp_invalid() {
  _has_bits_[1] |= 0x00080000u;
}
inline void PhotoMetadata::clear_has_error_timestamp_invalid() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void PhotoMetadata::clear_error_timestamp_invalid() {
  error_timestamp_invalid_ = false;
  clear_has_error_timestamp_invalid();
}
inline bool PhotoMetadata::error_timestamp_invalid() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_timestamp_invalid)
  return error_timestamp_invalid_;
}
inline void PhotoMetadata::set_error_timestamp_invalid(bool value) {
  set_has_error_timestamp_invalid();
  error_timestamp_invalid_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_timestamp_invalid)
}

// optional bool error_placemark_invalid = 78;
inline bool PhotoMetadata::has_error_placemark_invalid() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void PhotoMetadata::set_has_error_placemark_invalid() {
  _has_bits_[1] |= 0x00100000u;
}
inline void PhotoMetadata::clear_has_error_placemark_invalid() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void PhotoMetadata::clear_error_placemark_invalid() {
  error_placemark_invalid_ = false;
  clear_has_error_placemark_invalid();
}
inline bool PhotoMetadata::error_placemark_invalid() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.error_placemark_invalid)
  return error_placemark_invalid_;
}
inline void PhotoMetadata::set_error_placemark_invalid(bool value) {
  set_has_error_placemark_invalid();
  error_placemark_invalid_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.error_placemark_invalid)
}

// optional bool placemark_histogram = 90;
inline bool PhotoMetadata::has_placemark_histogram() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void PhotoMetadata::set_has_placemark_histogram() {
  _has_bits_[1] |= 0x00200000u;
}
inline void PhotoMetadata::clear_has_placemark_histogram() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void PhotoMetadata::clear_placemark_histogram() {
  placemark_histogram_ = false;
  clear_has_placemark_histogram();
}
inline bool PhotoMetadata::placemark_histogram() const {
  // @@protoc_insertion_point(field_get:PhotoMetadata.placemark_histogram)
  return placemark_histogram_;
}
inline void PhotoMetadata::set_placemark_histogram(bool value) {
  set_has_placemark_histogram();
  placemark_histogram_ = value;
  // @@protoc_insertion_point(field_set:PhotoMetadata.placemark_histogram)
}

inline const PhotoMetadata* PhotoMetadata::internal_default_instance() {
  return &PhotoMetadata_default_instance_.get();
}
// -------------------------------------------------------------------

// PhotoPathMetadata

// optional string server_id = 1;
inline bool PhotoPathMetadata::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoPathMetadata::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoPathMetadata::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoPathMetadata::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& PhotoPathMetadata::server_id() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoPathMetadata::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.server_id)
}
inline void PhotoPathMetadata::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoPathMetadata.server_id)
}
inline void PhotoPathMetadata::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoPathMetadata.server_id)
}
inline ::std::string* PhotoPathMetadata::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:PhotoPathMetadata.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhotoPathMetadata::release_server_id() {
  // @@protoc_insertion_point(field_release:PhotoPathMetadata.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoPathMetadata::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:PhotoPathMetadata.server_id)
}

// optional string md5 = 2;
inline bool PhotoPathMetadata::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoPathMetadata::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoPathMetadata::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoPathMetadata::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& PhotoPathMetadata::md5() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.md5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoPathMetadata::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.md5)
}
inline void PhotoPathMetadata::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoPathMetadata.md5)
}
inline void PhotoPathMetadata::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoPathMetadata.md5)
}
inline ::std::string* PhotoPathMetadata::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:PhotoPathMetadata.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhotoPathMetadata::release_md5() {
  // @@protoc_insertion_point(field_release:PhotoPathMetadata.md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoPathMetadata::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:PhotoPathMetadata.md5)
}

// optional uint32 access_time = 3;
inline bool PhotoPathMetadata::has_access_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhotoPathMetadata::set_has_access_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhotoPathMetadata::clear_has_access_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhotoPathMetadata::clear_access_time() {
  access_time_ = 0u;
  clear_has_access_time();
}
inline ::google::protobuf::uint32 PhotoPathMetadata::access_time() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.access_time)
  return access_time_;
}
inline void PhotoPathMetadata::set_access_time(::google::protobuf::uint32 value) {
  set_has_access_time();
  access_time_ = value;
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.access_time)
}

// optional int64 size = 4;
inline bool PhotoPathMetadata::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhotoPathMetadata::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhotoPathMetadata::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhotoPathMetadata::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 PhotoPathMetadata::size() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.size)
  return size_;
}
inline void PhotoPathMetadata::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.size)
}

// optional int32 parent_size = 5;
inline bool PhotoPathMetadata::has_parent_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PhotoPathMetadata::set_has_parent_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PhotoPathMetadata::clear_has_parent_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PhotoPathMetadata::clear_parent_size() {
  parent_size_ = 0;
  clear_has_parent_size();
}
inline ::google::protobuf::int32 PhotoPathMetadata::parent_size() const {
  // @@protoc_insertion_point(field_get:PhotoPathMetadata.parent_size)
  return parent_size_;
}
inline void PhotoPathMetadata::set_parent_size(::google::protobuf::int32 value) {
  set_has_parent_size();
  parent_size_ = value;
  // @@protoc_insertion_point(field_set:PhotoPathMetadata.parent_size)
}

inline const PhotoPathMetadata* PhotoPathMetadata::internal_default_instance() {
  return &PhotoPathMetadata_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PhotoMetadata_PhotoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PhotoMetadata_PhotoType>() {
  return ::PhotoMetadata_PhotoType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PhotoMetadata_2eproto__INCLUDED
