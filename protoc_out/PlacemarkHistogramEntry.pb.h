// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlacemarkHistogramEntry.proto

#ifndef PROTOBUF_PlacemarkHistogramEntry_2eproto__INCLUDED
#define PROTOBUF_PlacemarkHistogramEntry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Location.pb.h"
#include "Placemark.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PlacemarkHistogramEntry_2eproto();
void protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto();
void protobuf_AssignDesc_PlacemarkHistogramEntry_2eproto();
void protobuf_ShutdownFile_PlacemarkHistogramEntry_2eproto();

class PlacemarkHistogramEntry;
class PlacemarkHistogramEntry_Sublocality;

// ===================================================================

class PlacemarkHistogramEntry_Sublocality : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlacemarkHistogramEntry.Sublocality) */ {
 public:
  PlacemarkHistogramEntry_Sublocality();
  virtual ~PlacemarkHistogramEntry_Sublocality();

  PlacemarkHistogramEntry_Sublocality(const PlacemarkHistogramEntry_Sublocality& from);

  inline PlacemarkHistogramEntry_Sublocality& operator=(const PlacemarkHistogramEntry_Sublocality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlacemarkHistogramEntry_Sublocality& default_instance();

  static const PlacemarkHistogramEntry_Sublocality* internal_default_instance();

  void Swap(PlacemarkHistogramEntry_Sublocality* other);

  // implements Message ----------------------------------------------

  inline PlacemarkHistogramEntry_Sublocality* New() const { return New(NULL); }

  PlacemarkHistogramEntry_Sublocality* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlacemarkHistogramEntry_Sublocality& from);
  void MergeFrom(const PlacemarkHistogramEntry_Sublocality& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlacemarkHistogramEntry_Sublocality* other);
  void UnsafeMergeFrom(const PlacemarkHistogramEntry_Sublocality& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlacemarkHistogramEntry.Sublocality)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto_impl();
  friend void  protobuf_AddDesc_PlacemarkHistogramEntry_2eproto_impl();
  friend void protobuf_AssignDesc_PlacemarkHistogramEntry_2eproto();
  friend void protobuf_ShutdownFile_PlacemarkHistogramEntry_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PlacemarkHistogramEntry_Sublocality> PlacemarkHistogramEntry_Sublocality_default_instance_;

// -------------------------------------------------------------------

class PlacemarkHistogramEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlacemarkHistogramEntry) */ {
 public:
  PlacemarkHistogramEntry();
  virtual ~PlacemarkHistogramEntry();

  PlacemarkHistogramEntry(const PlacemarkHistogramEntry& from);

  inline PlacemarkHistogramEntry& operator=(const PlacemarkHistogramEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlacemarkHistogramEntry& default_instance();

  static const PlacemarkHistogramEntry* internal_default_instance();

  void Swap(PlacemarkHistogramEntry* other);

  // implements Message ----------------------------------------------

  inline PlacemarkHistogramEntry* New() const { return New(NULL); }

  PlacemarkHistogramEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlacemarkHistogramEntry& from);
  void MergeFrom(const PlacemarkHistogramEntry& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlacemarkHistogramEntry* other);
  void UnsafeMergeFrom(const PlacemarkHistogramEntry& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlacemarkHistogramEntry_Sublocality Sublocality;

  // accessors -------------------------------------------------------

  // optional .Placemark placemark = 1;
  bool has_placemark() const;
  void clear_placemark();
  static const int kPlacemarkFieldNumber = 1;
  const ::Placemark& placemark() const;
  ::Placemark* mutable_placemark();
  ::Placemark* release_placemark();
  void set_allocated_placemark(::Placemark* placemark);

  // optional .Location location_sum = 2;
  bool has_location_sum() const;
  void clear_location_sum();
  static const int kLocationSumFieldNumber = 2;
  const ::Location& location_sum() const;
  ::Location* mutable_location_sum();
  ::Location* release_location_sum();
  void set_allocated_location_sum(::Location* location_sum);

  // optional int32 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
  int sublocalities_size() const;
  void clear_sublocalities();
  static const int kSublocalitiesFieldNumber = 4;
  const ::PlacemarkHistogramEntry_Sublocality& sublocalities(int index) const;
  ::PlacemarkHistogramEntry_Sublocality* mutable_sublocalities(int index);
  ::PlacemarkHistogramEntry_Sublocality* add_sublocalities();
  ::google::protobuf::RepeatedPtrField< ::PlacemarkHistogramEntry_Sublocality >*
      mutable_sublocalities();
  const ::google::protobuf::RepeatedPtrField< ::PlacemarkHistogramEntry_Sublocality >&
      sublocalities() const;

  // @@protoc_insertion_point(class_scope:PlacemarkHistogramEntry)
 private:
  inline void set_has_placemark();
  inline void clear_has_placemark();
  inline void set_has_location_sum();
  inline void clear_has_location_sum();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PlacemarkHistogramEntry_Sublocality > sublocalities_;
  ::Placemark* placemark_;
  ::Location* location_sum_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto_impl();
  friend void  protobuf_AddDesc_PlacemarkHistogramEntry_2eproto_impl();
  friend void protobuf_AssignDesc_PlacemarkHistogramEntry_2eproto();
  friend void protobuf_ShutdownFile_PlacemarkHistogramEntry_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PlacemarkHistogramEntry> PlacemarkHistogramEntry_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PlacemarkHistogramEntry_Sublocality

// optional string name = 1;
inline bool PlacemarkHistogramEntry_Sublocality::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlacemarkHistogramEntry_Sublocality::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlacemarkHistogramEntry_Sublocality::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlacemarkHistogramEntry_Sublocality::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PlacemarkHistogramEntry_Sublocality::name() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.Sublocality.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlacemarkHistogramEntry_Sublocality::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlacemarkHistogramEntry.Sublocality.name)
}
inline void PlacemarkHistogramEntry_Sublocality::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlacemarkHistogramEntry.Sublocality.name)
}
inline void PlacemarkHistogramEntry_Sublocality::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlacemarkHistogramEntry.Sublocality.name)
}
inline ::std::string* PlacemarkHistogramEntry_Sublocality::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:PlacemarkHistogramEntry.Sublocality.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlacemarkHistogramEntry_Sublocality::release_name() {
  // @@protoc_insertion_point(field_release:PlacemarkHistogramEntry.Sublocality.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlacemarkHistogramEntry_Sublocality::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlacemarkHistogramEntry.Sublocality.name)
}

// optional int32 count = 2;
inline bool PlacemarkHistogramEntry_Sublocality::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlacemarkHistogramEntry_Sublocality::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlacemarkHistogramEntry_Sublocality::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlacemarkHistogramEntry_Sublocality::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PlacemarkHistogramEntry_Sublocality::count() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.Sublocality.count)
  return count_;
}
inline void PlacemarkHistogramEntry_Sublocality::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:PlacemarkHistogramEntry.Sublocality.count)
}

inline const PlacemarkHistogramEntry_Sublocality* PlacemarkHistogramEntry_Sublocality::internal_default_instance() {
  return &PlacemarkHistogramEntry_Sublocality_default_instance_.get();
}
// -------------------------------------------------------------------

// PlacemarkHistogramEntry

// optional .Placemark placemark = 1;
inline bool PlacemarkHistogramEntry::has_placemark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlacemarkHistogramEntry::set_has_placemark() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlacemarkHistogramEntry::clear_has_placemark() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlacemarkHistogramEntry::clear_placemark() {
  if (placemark_ != NULL) placemark_->::Placemark::Clear();
  clear_has_placemark();
}
inline const ::Placemark& PlacemarkHistogramEntry::placemark() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.placemark)
  return placemark_ != NULL ? *placemark_
                         : *::Placemark::internal_default_instance();
}
inline ::Placemark* PlacemarkHistogramEntry::mutable_placemark() {
  set_has_placemark();
  if (placemark_ == NULL) {
    placemark_ = new ::Placemark;
  }
  // @@protoc_insertion_point(field_mutable:PlacemarkHistogramEntry.placemark)
  return placemark_;
}
inline ::Placemark* PlacemarkHistogramEntry::release_placemark() {
  // @@protoc_insertion_point(field_release:PlacemarkHistogramEntry.placemark)
  clear_has_placemark();
  ::Placemark* temp = placemark_;
  placemark_ = NULL;
  return temp;
}
inline void PlacemarkHistogramEntry::set_allocated_placemark(::Placemark* placemark) {
  delete placemark_;
  placemark_ = placemark;
  if (placemark) {
    set_has_placemark();
  } else {
    clear_has_placemark();
  }
  // @@protoc_insertion_point(field_set_allocated:PlacemarkHistogramEntry.placemark)
}

// optional .Location location_sum = 2;
inline bool PlacemarkHistogramEntry::has_location_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlacemarkHistogramEntry::set_has_location_sum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlacemarkHistogramEntry::clear_has_location_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlacemarkHistogramEntry::clear_location_sum() {
  if (location_sum_ != NULL) location_sum_->::Location::Clear();
  clear_has_location_sum();
}
inline const ::Location& PlacemarkHistogramEntry::location_sum() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.location_sum)
  return location_sum_ != NULL ? *location_sum_
                         : *::Location::internal_default_instance();
}
inline ::Location* PlacemarkHistogramEntry::mutable_location_sum() {
  set_has_location_sum();
  if (location_sum_ == NULL) {
    location_sum_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:PlacemarkHistogramEntry.location_sum)
  return location_sum_;
}
inline ::Location* PlacemarkHistogramEntry::release_location_sum() {
  // @@protoc_insertion_point(field_release:PlacemarkHistogramEntry.location_sum)
  clear_has_location_sum();
  ::Location* temp = location_sum_;
  location_sum_ = NULL;
  return temp;
}
inline void PlacemarkHistogramEntry::set_allocated_location_sum(::Location* location_sum) {
  delete location_sum_;
  location_sum_ = location_sum;
  if (location_sum) {
    set_has_location_sum();
  } else {
    clear_has_location_sum();
  }
  // @@protoc_insertion_point(field_set_allocated:PlacemarkHistogramEntry.location_sum)
}

// optional int32 count = 3;
inline bool PlacemarkHistogramEntry::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlacemarkHistogramEntry::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlacemarkHistogramEntry::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlacemarkHistogramEntry::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PlacemarkHistogramEntry::count() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.count)
  return count_;
}
inline void PlacemarkHistogramEntry::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:PlacemarkHistogramEntry.count)
}

// repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
inline int PlacemarkHistogramEntry::sublocalities_size() const {
  return sublocalities_.size();
}
inline void PlacemarkHistogramEntry::clear_sublocalities() {
  sublocalities_.Clear();
}
inline const ::PlacemarkHistogramEntry_Sublocality& PlacemarkHistogramEntry::sublocalities(int index) const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.sublocalities)
  return sublocalities_.Get(index);
}
inline ::PlacemarkHistogramEntry_Sublocality* PlacemarkHistogramEntry::mutable_sublocalities(int index) {
  // @@protoc_insertion_point(field_mutable:PlacemarkHistogramEntry.sublocalities)
  return sublocalities_.Mutable(index);
}
inline ::PlacemarkHistogramEntry_Sublocality* PlacemarkHistogramEntry::add_sublocalities() {
  // @@protoc_insertion_point(field_add:PlacemarkHistogramEntry.sublocalities)
  return sublocalities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PlacemarkHistogramEntry_Sublocality >*
PlacemarkHistogramEntry::mutable_sublocalities() {
  // @@protoc_insertion_point(field_mutable_list:PlacemarkHistogramEntry.sublocalities)
  return &sublocalities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PlacemarkHistogramEntry_Sublocality >&
PlacemarkHistogramEntry::sublocalities() const {
  // @@protoc_insertion_point(field_list:PlacemarkHistogramEntry.sublocalities)
  return sublocalities_;
}

inline const PlacemarkHistogramEntry* PlacemarkHistogramEntry::internal_default_instance() {
  return &PlacemarkHistogramEntry_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlacemarkHistogramEntry_2eproto__INCLUDED
