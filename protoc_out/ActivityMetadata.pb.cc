// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ActivityMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_Episode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_Episode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_AddFollowers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_AddFollowers_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_MergeAccounts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_MergeAccounts_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_PostComment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_PostComment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_RemoveFollowers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_RemoveFollowers_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_SavePhotos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_SavePhotos_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_ShareNew_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_ShareNew_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_ShareExisting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_ShareExisting_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_Unshare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_Unshare_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_UpdateEpisode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_UpdateEpisode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_UpdateViewpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_UpdateViewpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMetadata_UploadEpisode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMetadata_UploadEpisode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ActivityMetadata_2eproto() {
  protobuf_AddDesc_ActivityMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  ActivityMetadata_descriptor_ = file->message_type(0);
  static const int ActivityMetadata_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, viewpoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, update_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, add_followers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, merge_accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, post_comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, remove_followers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, save_photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, share_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, share_existing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, unshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, update_episode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, update_viewpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, upload_episode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, label_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, provisional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, upload_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, viewed_timestamp_),
  };
  ActivityMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_descriptor_,
      ActivityMetadata::internal_default_instance(),
      ActivityMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata, _internal_metadata_));
  ActivityMetadata_Episode_descriptor_ = ActivityMetadata_descriptor_->nested_type(0);
  static const int ActivityMetadata_Episode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_Episode, episode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_Episode, photo_ids_),
  };
  ActivityMetadata_Episode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_Episode_descriptor_,
      ActivityMetadata_Episode::internal_default_instance(),
      ActivityMetadata_Episode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_Episode, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_Episode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_Episode, _internal_metadata_));
  ActivityMetadata_AddFollowers_descriptor_ = ActivityMetadata_descriptor_->nested_type(1);
  static const int ActivityMetadata_AddFollowers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_AddFollowers, contacts_),
  };
  ActivityMetadata_AddFollowers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_AddFollowers_descriptor_,
      ActivityMetadata_AddFollowers::internal_default_instance(),
      ActivityMetadata_AddFollowers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_AddFollowers, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_AddFollowers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_AddFollowers, _internal_metadata_));
  ActivityMetadata_MergeAccounts_descriptor_ = ActivityMetadata_descriptor_->nested_type(2);
  static const int ActivityMetadata_MergeAccounts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_MergeAccounts, source_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_MergeAccounts, target_user_id_),
  };
  ActivityMetadata_MergeAccounts_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_MergeAccounts_descriptor_,
      ActivityMetadata_MergeAccounts::internal_default_instance(),
      ActivityMetadata_MergeAccounts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_MergeAccounts, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_MergeAccounts),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_MergeAccounts, _internal_metadata_));
  ActivityMetadata_PostComment_descriptor_ = ActivityMetadata_descriptor_->nested_type(3);
  static const int ActivityMetadata_PostComment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_PostComment, comment_id_),
  };
  ActivityMetadata_PostComment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_PostComment_descriptor_,
      ActivityMetadata_PostComment::internal_default_instance(),
      ActivityMetadata_PostComment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_PostComment, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_PostComment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_PostComment, _internal_metadata_));
  ActivityMetadata_RemoveFollowers_descriptor_ = ActivityMetadata_descriptor_->nested_type(4);
  static const int ActivityMetadata_RemoveFollowers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_RemoveFollowers, user_ids_),
  };
  ActivityMetadata_RemoveFollowers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_RemoveFollowers_descriptor_,
      ActivityMetadata_RemoveFollowers::internal_default_instance(),
      ActivityMetadata_RemoveFollowers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_RemoveFollowers, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_RemoveFollowers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_RemoveFollowers, _internal_metadata_));
  ActivityMetadata_SavePhotos_descriptor_ = ActivityMetadata_descriptor_->nested_type(5);
  static const int ActivityMetadata_SavePhotos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_SavePhotos, episodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_SavePhotos, viewpoint_id_),
  };
  ActivityMetadata_SavePhotos_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_SavePhotos_descriptor_,
      ActivityMetadata_SavePhotos::internal_default_instance(),
      ActivityMetadata_SavePhotos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_SavePhotos, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_SavePhotos),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_SavePhotos, _internal_metadata_));
  ActivityMetadata_ShareNew_descriptor_ = ActivityMetadata_descriptor_->nested_type(6);
  static const int ActivityMetadata_ShareNew_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_ShareNew, episodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_ShareNew, contacts_),
  };
  ActivityMetadata_ShareNew_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_ShareNew_descriptor_,
      ActivityMetadata_ShareNew::internal_default_instance(),
      ActivityMetadata_ShareNew_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_ShareNew, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_ShareNew),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_ShareNew, _internal_metadata_));
  ActivityMetadata_ShareExisting_descriptor_ = ActivityMetadata_descriptor_->nested_type(7);
  static const int ActivityMetadata_ShareExisting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_ShareExisting, episodes_),
  };
  ActivityMetadata_ShareExisting_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_ShareExisting_descriptor_,
      ActivityMetadata_ShareExisting::internal_default_instance(),
      ActivityMetadata_ShareExisting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_ShareExisting, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_ShareExisting),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_ShareExisting, _internal_metadata_));
  ActivityMetadata_Unshare_descriptor_ = ActivityMetadata_descriptor_->nested_type(8);
  static const int ActivityMetadata_Unshare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_Unshare, episodes_),
  };
  ActivityMetadata_Unshare_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_Unshare_descriptor_,
      ActivityMetadata_Unshare::internal_default_instance(),
      ActivityMetadata_Unshare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_Unshare, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_Unshare),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_Unshare, _internal_metadata_));
  ActivityMetadata_UpdateEpisode_descriptor_ = ActivityMetadata_descriptor_->nested_type(9);
  static const int ActivityMetadata_UpdateEpisode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UpdateEpisode, episode_id_),
  };
  ActivityMetadata_UpdateEpisode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_UpdateEpisode_descriptor_,
      ActivityMetadata_UpdateEpisode::internal_default_instance(),
      ActivityMetadata_UpdateEpisode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UpdateEpisode, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_UpdateEpisode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UpdateEpisode, _internal_metadata_));
  ActivityMetadata_UpdateViewpoint_descriptor_ = ActivityMetadata_descriptor_->nested_type(10);
  static const int ActivityMetadata_UpdateViewpoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UpdateViewpoint, viewpoint_id_),
  };
  ActivityMetadata_UpdateViewpoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_UpdateViewpoint_descriptor_,
      ActivityMetadata_UpdateViewpoint::internal_default_instance(),
      ActivityMetadata_UpdateViewpoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UpdateViewpoint, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_UpdateViewpoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UpdateViewpoint, _internal_metadata_));
  ActivityMetadata_UploadEpisode_descriptor_ = ActivityMetadata_descriptor_->nested_type(11);
  static const int ActivityMetadata_UploadEpisode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UploadEpisode, episode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UploadEpisode, photo_ids_),
  };
  ActivityMetadata_UploadEpisode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActivityMetadata_UploadEpisode_descriptor_,
      ActivityMetadata_UploadEpisode::internal_default_instance(),
      ActivityMetadata_UploadEpisode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UploadEpisode, _has_bits_),
      -1,
      -1,
      sizeof(ActivityMetadata_UploadEpisode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMetadata_UploadEpisode, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_descriptor_, ActivityMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_Episode_descriptor_, ActivityMetadata_Episode::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_AddFollowers_descriptor_, ActivityMetadata_AddFollowers::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_MergeAccounts_descriptor_, ActivityMetadata_MergeAccounts::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_PostComment_descriptor_, ActivityMetadata_PostComment::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_RemoveFollowers_descriptor_, ActivityMetadata_RemoveFollowers::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_SavePhotos_descriptor_, ActivityMetadata_SavePhotos::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_ShareNew_descriptor_, ActivityMetadata_ShareNew::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_ShareExisting_descriptor_, ActivityMetadata_ShareExisting::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_Unshare_descriptor_, ActivityMetadata_Unshare::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_UpdateEpisode_descriptor_, ActivityMetadata_UpdateEpisode::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_UpdateViewpoint_descriptor_, ActivityMetadata_UpdateViewpoint::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActivityMetadata_UploadEpisode_descriptor_, ActivityMetadata_UploadEpisode::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityMetadata_2eproto() {
  ActivityMetadata_default_instance_.Shutdown();
  delete ActivityMetadata_reflection_;
  ActivityMetadata_Episode_default_instance_.Shutdown();
  delete ActivityMetadata_Episode_reflection_;
  ActivityMetadata_AddFollowers_default_instance_.Shutdown();
  delete ActivityMetadata_AddFollowers_reflection_;
  ActivityMetadata_MergeAccounts_default_instance_.Shutdown();
  delete ActivityMetadata_MergeAccounts_reflection_;
  ActivityMetadata_PostComment_default_instance_.Shutdown();
  delete ActivityMetadata_PostComment_reflection_;
  ActivityMetadata_RemoveFollowers_default_instance_.Shutdown();
  delete ActivityMetadata_RemoveFollowers_reflection_;
  ActivityMetadata_SavePhotos_default_instance_.Shutdown();
  delete ActivityMetadata_SavePhotos_reflection_;
  ActivityMetadata_ShareNew_default_instance_.Shutdown();
  delete ActivityMetadata_ShareNew_reflection_;
  ActivityMetadata_ShareExisting_default_instance_.Shutdown();
  delete ActivityMetadata_ShareExisting_reflection_;
  ActivityMetadata_Unshare_default_instance_.Shutdown();
  delete ActivityMetadata_Unshare_reflection_;
  ActivityMetadata_UpdateEpisode_default_instance_.Shutdown();
  delete ActivityMetadata_UpdateEpisode_reflection_;
  ActivityMetadata_UpdateViewpoint_default_instance_.Shutdown();
  delete ActivityMetadata_UpdateViewpoint_reflection_;
  ActivityMetadata_UploadEpisode_default_instance_.Shutdown();
  delete ActivityMetadata_UploadEpisode_reflection_;
}

void protobuf_InitDefaults_ActivityMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_ContentIds_2eproto();
  ::protobuf_InitDefaults_ContactMetadata_2eproto();
  ::protobuf_InitDefaults_QueueMetadata_2eproto();
  ActivityMetadata_default_instance_.DefaultConstruct();
  ActivityMetadata_Episode_default_instance_.DefaultConstruct();
  ActivityMetadata_AddFollowers_default_instance_.DefaultConstruct();
  ActivityMetadata_MergeAccounts_default_instance_.DefaultConstruct();
  ActivityMetadata_PostComment_default_instance_.DefaultConstruct();
  ActivityMetadata_RemoveFollowers_default_instance_.DefaultConstruct();
  ActivityMetadata_SavePhotos_default_instance_.DefaultConstruct();
  ActivityMetadata_ShareNew_default_instance_.DefaultConstruct();
  ActivityMetadata_ShareExisting_default_instance_.DefaultConstruct();
  ActivityMetadata_Unshare_default_instance_.DefaultConstruct();
  ActivityMetadata_UpdateEpisode_default_instance_.DefaultConstruct();
  ActivityMetadata_UpdateViewpoint_default_instance_.DefaultConstruct();
  ActivityMetadata_UploadEpisode_default_instance_.DefaultConstruct();
  ActivityMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_Episode_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_AddFollowers_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_MergeAccounts_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_PostComment_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_RemoveFollowers_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_SavePhotos_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_ShareNew_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_ShareExisting_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_Unshare_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_UpdateEpisode_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_UpdateViewpoint_default_instance_.get_mutable()->InitAsDefaultInstance();
  ActivityMetadata_UploadEpisode_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ActivityMetadata_2eproto_once_);
void protobuf_InitDefaults_ActivityMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ActivityMetadata_2eproto_once_,
                 &protobuf_InitDefaults_ActivityMetadata_2eproto_impl);
}
void protobuf_AddDesc_ActivityMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ActivityMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ActivityMetadata.proto\032\020ContentIds.pro"
    "to\032\025ContactMetadata.proto\032\023QueueMetadata"
    ".proto\"\335\014\n\020ActivityMetadata\022 \n\013activity_"
    "id\030\001 \001(\0132\013.ActivityId\022\"\n\014viewpoint_id\030\002 "
    "\001(\0132\014.ViewpointId\022\017\n\007user_id\030\003 \001(\003\022\021\n\tti"
    "mestamp\030\004 \001(\001\022\022\n\nupdate_seq\030\005 \001(\003\022\035\n\005que"
    "ue\030\006 \001(\0132\016.QueueMetadata\0225\n\radd_follower"
    "s\030\007 \001(\0132\036.ActivityMetadata.AddFollowers\022"
    "7\n\016merge_accounts\030\020 \001(\0132\037.ActivityMetada"
    "ta.MergeAccounts\0223\n\014post_comment\030\010 \001(\0132\035"
    ".ActivityMetadata.PostComment\022;\n\020remove_"
    "followers\030\021 \001(\0132!.ActivityMetadata.Remov"
    "eFollowers\0221\n\013save_photos\030\017 \001(\0132\034.Activi"
    "tyMetadata.SavePhotos\022-\n\tshare_new\030\t \001(\013"
    "2\032.ActivityMetadata.ShareNew\0227\n\016share_ex"
    "isting\030\n \001(\0132\037.ActivityMetadata.ShareExi"
    "sting\022*\n\007unshare\030\013 \001(\0132\031.ActivityMetadat"
    "a.Unshare\0227\n\016update_episode\030\014 \001(\0132\037.Acti"
    "vityMetadata.UpdateEpisode\022;\n\020update_vie"
    "wpoint\030\r \001(\0132!.ActivityMetadata.UpdateVi"
    "ewpoint\0227\n\016upload_episode\030\016 \001(\0132\037.Activi"
    "tyMetadata.UploadEpisode\022\023\n\013label_error\030"
    "\024 \001(\010\022\023\n\013provisional\030  \001(\010\022\027\n\017upload_act"
    "ivity\030\036 \001(\010\022\030\n\020viewed_timestamp\030\037 \001(\001\032F\n"
    "\007Episode\022\036\n\nepisode_id\030\001 \001(\0132\n.EpisodeId"
    "\022\033\n\tphoto_ids\030\002 \003(\0132\010.PhotoId\0322\n\014AddFoll"
    "owers\022\"\n\010contacts\030\001 \003(\0132\020.ContactMetadat"
    "a\032\?\n\rMergeAccounts\022\026\n\016source_user_id\030\001 \001"
    "(\003\022\026\n\016target_user_id\030\002 \001(\003\032-\n\013PostCommen"
    "t\022\036\n\ncomment_id\030\001 \001(\0132\n.CommentId\032#\n\017Rem"
    "oveFollowers\022\020\n\010user_ids\030\001 \003(\003\032]\n\nSavePh"
    "otos\022+\n\010episodes\030\001 \003(\0132\031.ActivityMetadat"
    "a.Episode\022\"\n\014viewpoint_id\030\002 \001(\0132\014.Viewpo"
    "intId\032[\n\010ShareNew\022+\n\010episodes\030\001 \003(\0132\031.Ac"
    "tivityMetadata.Episode\022\"\n\010contacts\030\002 \003(\013"
    "2\020.ContactMetadata\032<\n\rShareExisting\022+\n\010e"
    "pisodes\030\001 \003(\0132\031.ActivityMetadata.Episode"
    "\0326\n\007Unshare\022+\n\010episodes\030\001 \003(\0132\031.Activity"
    "Metadata.Episode\032/\n\rUpdateEpisode\022\036\n\nepi"
    "sode_id\030\001 \001(\0132\n.EpisodeId\0325\n\017UpdateViewp"
    "oint\022\"\n\014viewpoint_id\030\001 \001(\0132\014.ViewpointId"
    "\032L\n\rUploadEpisode\022\036\n\nepisode_id\030\001 \001(\0132\n."
    "EpisodeId\022\033\n\tphoto_ids\030\002 \003(\0132\010.PhotoIdB)"
    "\n\023co.viewfinder.protoB\022ActivityMetadataP"
    "B", 1761);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityMetadata.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_ContentIds_2eproto();
  ::protobuf_AddDesc_ContactMetadata_2eproto();
  ::protobuf_AddDesc_QueueMetadata_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ActivityMetadata_2eproto_once_);
void protobuf_AddDesc_ActivityMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ActivityMetadata_2eproto_once_,
                 &protobuf_AddDesc_ActivityMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityMetadata_2eproto {
  StaticDescriptorInitializer_ActivityMetadata_2eproto() {
    protobuf_AddDesc_ActivityMetadata_2eproto();
  }
} static_descriptor_initializer_ActivityMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_Episode::kEpisodeIdFieldNumber;
const int ActivityMetadata_Episode::kPhotoIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_Episode::ActivityMetadata_Episode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.Episode)
}

void ActivityMetadata_Episode::InitAsDefaultInstance() {
  episode_id_ = const_cast< ::EpisodeId*>(
      ::EpisodeId::internal_default_instance());
}

ActivityMetadata_Episode::ActivityMetadata_Episode(const ActivityMetadata_Episode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.Episode)
}

void ActivityMetadata_Episode::SharedCtor() {
  _cached_size_ = 0;
  episode_id_ = NULL;
}

ActivityMetadata_Episode::~ActivityMetadata_Episode() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.Episode)
  SharedDtor();
}

void ActivityMetadata_Episode::SharedDtor() {
  if (this != &ActivityMetadata_Episode_default_instance_.get()) {
    delete episode_id_;
  }
}

void ActivityMetadata_Episode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_Episode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_Episode_descriptor_;
}

const ActivityMetadata_Episode& ActivityMetadata_Episode::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_Episode> ActivityMetadata_Episode_default_instance_;

ActivityMetadata_Episode* ActivityMetadata_Episode::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_Episode* n = new ActivityMetadata_Episode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_Episode::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.Episode)
  if (has_episode_id()) {
    if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  }
  photo_ids_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_Episode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.Episode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EpisodeId episode_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_episode_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_photo_ids;
        break;
      }

      // repeated .PhotoId photo_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_photo_ids:
          DO_(input->IncrementRecursionDepth());
         parse_loop_photo_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_photo_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_photo_ids;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.Episode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.Episode)
  return false;
#undef DO_
}

void ActivityMetadata_Episode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.Episode)
  // optional .EpisodeId episode_id = 1;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->episode_id_, output);
  }

  // repeated .PhotoId photo_ids = 2;
  for (unsigned int i = 0, n = this->photo_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->photo_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.Episode)
}

::google::protobuf::uint8* ActivityMetadata_Episode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.Episode)
  // optional .EpisodeId episode_id = 1;
  if (has_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->episode_id_, false, target);
  }

  // repeated .PhotoId photo_ids = 2;
  for (unsigned int i = 0, n = this->photo_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->photo_ids(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.Episode)
  return target;
}

size_t ActivityMetadata_Episode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.Episode)
  size_t total_size = 0;

  // optional .EpisodeId episode_id = 1;
  if (has_episode_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->episode_id_);
  }

  // repeated .PhotoId photo_ids = 2;
  {
    unsigned int count = this->photo_ids_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photo_ids(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_Episode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.Episode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_Episode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_Episode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.Episode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.Episode)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_Episode::MergeFrom(const ActivityMetadata_Episode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.Episode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_Episode::UnsafeMergeFrom(const ActivityMetadata_Episode& from) {
  GOOGLE_DCHECK(&from != this);
  photo_ids_.MergeFrom(from.photo_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_episode_id()) {
      mutable_episode_id()->::EpisodeId::MergeFrom(from.episode_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_Episode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.Episode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_Episode::CopyFrom(const ActivityMetadata_Episode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.Episode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_Episode::IsInitialized() const {

  return true;
}

void ActivityMetadata_Episode::Swap(ActivityMetadata_Episode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_Episode::InternalSwap(ActivityMetadata_Episode* other) {
  std::swap(episode_id_, other->episode_id_);
  photo_ids_.UnsafeArenaSwap(&other->photo_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_Episode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_Episode_descriptor_;
  metadata.reflection = ActivityMetadata_Episode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_AddFollowers::kContactsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_AddFollowers::ActivityMetadata_AddFollowers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.AddFollowers)
}

void ActivityMetadata_AddFollowers::InitAsDefaultInstance() {
}

ActivityMetadata_AddFollowers::ActivityMetadata_AddFollowers(const ActivityMetadata_AddFollowers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.AddFollowers)
}

void ActivityMetadata_AddFollowers::SharedCtor() {
  _cached_size_ = 0;
}

ActivityMetadata_AddFollowers::~ActivityMetadata_AddFollowers() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.AddFollowers)
  SharedDtor();
}

void ActivityMetadata_AddFollowers::SharedDtor() {
}

void ActivityMetadata_AddFollowers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_AddFollowers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_AddFollowers_descriptor_;
}

const ActivityMetadata_AddFollowers& ActivityMetadata_AddFollowers::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_AddFollowers> ActivityMetadata_AddFollowers_default_instance_;

ActivityMetadata_AddFollowers* ActivityMetadata_AddFollowers::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_AddFollowers* n = new ActivityMetadata_AddFollowers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_AddFollowers::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.AddFollowers)
  contacts_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_AddFollowers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.AddFollowers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ContactMetadata contacts = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_contacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_contacts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.AddFollowers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.AddFollowers)
  return false;
#undef DO_
}

void ActivityMetadata_AddFollowers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.AddFollowers)
  // repeated .ContactMetadata contacts = 1;
  for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contacts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.AddFollowers)
}

::google::protobuf::uint8* ActivityMetadata_AddFollowers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.AddFollowers)
  // repeated .ContactMetadata contacts = 1;
  for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->contacts(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.AddFollowers)
  return target;
}

size_t ActivityMetadata_AddFollowers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.AddFollowers)
  size_t total_size = 0;

  // repeated .ContactMetadata contacts = 1;
  {
    unsigned int count = this->contacts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contacts(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_AddFollowers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.AddFollowers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_AddFollowers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_AddFollowers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.AddFollowers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.AddFollowers)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_AddFollowers::MergeFrom(const ActivityMetadata_AddFollowers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.AddFollowers)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_AddFollowers::UnsafeMergeFrom(const ActivityMetadata_AddFollowers& from) {
  GOOGLE_DCHECK(&from != this);
  contacts_.MergeFrom(from.contacts_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_AddFollowers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.AddFollowers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_AddFollowers::CopyFrom(const ActivityMetadata_AddFollowers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.AddFollowers)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_AddFollowers::IsInitialized() const {

  return true;
}

void ActivityMetadata_AddFollowers::Swap(ActivityMetadata_AddFollowers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_AddFollowers::InternalSwap(ActivityMetadata_AddFollowers* other) {
  contacts_.UnsafeArenaSwap(&other->contacts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_AddFollowers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_AddFollowers_descriptor_;
  metadata.reflection = ActivityMetadata_AddFollowers_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_MergeAccounts::kSourceUserIdFieldNumber;
const int ActivityMetadata_MergeAccounts::kTargetUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_MergeAccounts::ActivityMetadata_MergeAccounts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.MergeAccounts)
}

void ActivityMetadata_MergeAccounts::InitAsDefaultInstance() {
}

ActivityMetadata_MergeAccounts::ActivityMetadata_MergeAccounts(const ActivityMetadata_MergeAccounts& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.MergeAccounts)
}

void ActivityMetadata_MergeAccounts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_user_id_, 0, reinterpret_cast<char*>(&target_user_id_) -
    reinterpret_cast<char*>(&source_user_id_) + sizeof(target_user_id_));
}

ActivityMetadata_MergeAccounts::~ActivityMetadata_MergeAccounts() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.MergeAccounts)
  SharedDtor();
}

void ActivityMetadata_MergeAccounts::SharedDtor() {
}

void ActivityMetadata_MergeAccounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_MergeAccounts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_MergeAccounts_descriptor_;
}

const ActivityMetadata_MergeAccounts& ActivityMetadata_MergeAccounts::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_MergeAccounts> ActivityMetadata_MergeAccounts_default_instance_;

ActivityMetadata_MergeAccounts* ActivityMetadata_MergeAccounts::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_MergeAccounts* n = new ActivityMetadata_MergeAccounts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_MergeAccounts::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.MergeAccounts)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ActivityMetadata_MergeAccounts, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActivityMetadata_MergeAccounts*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(source_user_id_, target_user_id_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_MergeAccounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.MergeAccounts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 source_user_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_source_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_user_id;
        break;
      }

      // optional int64 target_user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_target_user_id:
          set_has_target_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.MergeAccounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.MergeAccounts)
  return false;
#undef DO_
}

void ActivityMetadata_MergeAccounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.MergeAccounts)
  // optional int64 source_user_id = 1;
  if (has_source_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_user_id(), output);
  }

  // optional int64 target_user_id = 2;
  if (has_target_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->target_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.MergeAccounts)
}

::google::protobuf::uint8* ActivityMetadata_MergeAccounts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.MergeAccounts)
  // optional int64 source_user_id = 1;
  if (has_source_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_user_id(), target);
  }

  // optional int64 target_user_id = 2;
  if (has_target_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->target_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.MergeAccounts)
  return target;
}

size_t ActivityMetadata_MergeAccounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.MergeAccounts)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 source_user_id = 1;
    if (has_source_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_user_id());
    }

    // optional int64 target_user_id = 2;
    if (has_target_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_user_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_MergeAccounts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.MergeAccounts)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_MergeAccounts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_MergeAccounts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.MergeAccounts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.MergeAccounts)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_MergeAccounts::MergeFrom(const ActivityMetadata_MergeAccounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.MergeAccounts)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_MergeAccounts::UnsafeMergeFrom(const ActivityMetadata_MergeAccounts& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_user_id()) {
      set_source_user_id(from.source_user_id());
    }
    if (from.has_target_user_id()) {
      set_target_user_id(from.target_user_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_MergeAccounts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.MergeAccounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_MergeAccounts::CopyFrom(const ActivityMetadata_MergeAccounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.MergeAccounts)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_MergeAccounts::IsInitialized() const {

  return true;
}

void ActivityMetadata_MergeAccounts::Swap(ActivityMetadata_MergeAccounts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_MergeAccounts::InternalSwap(ActivityMetadata_MergeAccounts* other) {
  std::swap(source_user_id_, other->source_user_id_);
  std::swap(target_user_id_, other->target_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_MergeAccounts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_MergeAccounts_descriptor_;
  metadata.reflection = ActivityMetadata_MergeAccounts_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_PostComment::kCommentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_PostComment::ActivityMetadata_PostComment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.PostComment)
}

void ActivityMetadata_PostComment::InitAsDefaultInstance() {
  comment_id_ = const_cast< ::CommentId*>(
      ::CommentId::internal_default_instance());
}

ActivityMetadata_PostComment::ActivityMetadata_PostComment(const ActivityMetadata_PostComment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.PostComment)
}

void ActivityMetadata_PostComment::SharedCtor() {
  _cached_size_ = 0;
  comment_id_ = NULL;
}

ActivityMetadata_PostComment::~ActivityMetadata_PostComment() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.PostComment)
  SharedDtor();
}

void ActivityMetadata_PostComment::SharedDtor() {
  if (this != &ActivityMetadata_PostComment_default_instance_.get()) {
    delete comment_id_;
  }
}

void ActivityMetadata_PostComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_PostComment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_PostComment_descriptor_;
}

const ActivityMetadata_PostComment& ActivityMetadata_PostComment::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_PostComment> ActivityMetadata_PostComment_default_instance_;

ActivityMetadata_PostComment* ActivityMetadata_PostComment::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_PostComment* n = new ActivityMetadata_PostComment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_PostComment::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.PostComment)
  if (has_comment_id()) {
    if (comment_id_ != NULL) comment_id_->::CommentId::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_PostComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.PostComment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CommentId comment_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.PostComment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.PostComment)
  return false;
#undef DO_
}

void ActivityMetadata_PostComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.PostComment)
  // optional .CommentId comment_id = 1;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->comment_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.PostComment)
}

::google::protobuf::uint8* ActivityMetadata_PostComment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.PostComment)
  // optional .CommentId comment_id = 1;
  if (has_comment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->comment_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.PostComment)
  return target;
}

size_t ActivityMetadata_PostComment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.PostComment)
  size_t total_size = 0;

  // optional .CommentId comment_id = 1;
  if (has_comment_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comment_id_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_PostComment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.PostComment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_PostComment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_PostComment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.PostComment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.PostComment)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_PostComment::MergeFrom(const ActivityMetadata_PostComment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.PostComment)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_PostComment::UnsafeMergeFrom(const ActivityMetadata_PostComment& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comment_id()) {
      mutable_comment_id()->::CommentId::MergeFrom(from.comment_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_PostComment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.PostComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_PostComment::CopyFrom(const ActivityMetadata_PostComment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.PostComment)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_PostComment::IsInitialized() const {

  return true;
}

void ActivityMetadata_PostComment::Swap(ActivityMetadata_PostComment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_PostComment::InternalSwap(ActivityMetadata_PostComment* other) {
  std::swap(comment_id_, other->comment_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_PostComment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_PostComment_descriptor_;
  metadata.reflection = ActivityMetadata_PostComment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_RemoveFollowers::kUserIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_RemoveFollowers::ActivityMetadata_RemoveFollowers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.RemoveFollowers)
}

void ActivityMetadata_RemoveFollowers::InitAsDefaultInstance() {
}

ActivityMetadata_RemoveFollowers::ActivityMetadata_RemoveFollowers(const ActivityMetadata_RemoveFollowers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.RemoveFollowers)
}

void ActivityMetadata_RemoveFollowers::SharedCtor() {
  _cached_size_ = 0;
}

ActivityMetadata_RemoveFollowers::~ActivityMetadata_RemoveFollowers() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.RemoveFollowers)
  SharedDtor();
}

void ActivityMetadata_RemoveFollowers::SharedDtor() {
}

void ActivityMetadata_RemoveFollowers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_RemoveFollowers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_RemoveFollowers_descriptor_;
}

const ActivityMetadata_RemoveFollowers& ActivityMetadata_RemoveFollowers::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_RemoveFollowers> ActivityMetadata_RemoveFollowers_default_instance_;

ActivityMetadata_RemoveFollowers* ActivityMetadata_RemoveFollowers::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_RemoveFollowers* n = new ActivityMetadata_RemoveFollowers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_RemoveFollowers::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.RemoveFollowers)
  user_ids_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_RemoveFollowers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.RemoveFollowers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 user_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_user_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_user_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_user_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.RemoveFollowers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.RemoveFollowers)
  return false;
#undef DO_
}

void ActivityMetadata_RemoveFollowers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.RemoveFollowers)
  // repeated int64 user_ids = 1;
  for (int i = 0; i < this->user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->user_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.RemoveFollowers)
}

::google::protobuf::uint8* ActivityMetadata_RemoveFollowers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.RemoveFollowers)
  // repeated int64 user_ids = 1;
  for (int i = 0; i < this->user_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->user_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.RemoveFollowers)
  return target;
}

size_t ActivityMetadata_RemoveFollowers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.RemoveFollowers)
  size_t total_size = 0;

  // repeated int64 user_ids = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->user_ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_ids(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->user_ids_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_RemoveFollowers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.RemoveFollowers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_RemoveFollowers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_RemoveFollowers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.RemoveFollowers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.RemoveFollowers)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_RemoveFollowers::MergeFrom(const ActivityMetadata_RemoveFollowers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.RemoveFollowers)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_RemoveFollowers::UnsafeMergeFrom(const ActivityMetadata_RemoveFollowers& from) {
  GOOGLE_DCHECK(&from != this);
  user_ids_.UnsafeMergeFrom(from.user_ids_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_RemoveFollowers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.RemoveFollowers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_RemoveFollowers::CopyFrom(const ActivityMetadata_RemoveFollowers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.RemoveFollowers)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_RemoveFollowers::IsInitialized() const {

  return true;
}

void ActivityMetadata_RemoveFollowers::Swap(ActivityMetadata_RemoveFollowers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_RemoveFollowers::InternalSwap(ActivityMetadata_RemoveFollowers* other) {
  user_ids_.UnsafeArenaSwap(&other->user_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_RemoveFollowers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_RemoveFollowers_descriptor_;
  metadata.reflection = ActivityMetadata_RemoveFollowers_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_SavePhotos::kEpisodesFieldNumber;
const int ActivityMetadata_SavePhotos::kViewpointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_SavePhotos::ActivityMetadata_SavePhotos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.SavePhotos)
}

void ActivityMetadata_SavePhotos::InitAsDefaultInstance() {
  viewpoint_id_ = const_cast< ::ViewpointId*>(
      ::ViewpointId::internal_default_instance());
}

ActivityMetadata_SavePhotos::ActivityMetadata_SavePhotos(const ActivityMetadata_SavePhotos& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.SavePhotos)
}

void ActivityMetadata_SavePhotos::SharedCtor() {
  _cached_size_ = 0;
  viewpoint_id_ = NULL;
}

ActivityMetadata_SavePhotos::~ActivityMetadata_SavePhotos() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.SavePhotos)
  SharedDtor();
}

void ActivityMetadata_SavePhotos::SharedDtor() {
  if (this != &ActivityMetadata_SavePhotos_default_instance_.get()) {
    delete viewpoint_id_;
  }
}

void ActivityMetadata_SavePhotos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_SavePhotos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_SavePhotos_descriptor_;
}

const ActivityMetadata_SavePhotos& ActivityMetadata_SavePhotos::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_SavePhotos> ActivityMetadata_SavePhotos_default_instance_;

ActivityMetadata_SavePhotos* ActivityMetadata_SavePhotos::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_SavePhotos* n = new ActivityMetadata_SavePhotos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_SavePhotos::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.SavePhotos)
  if (has_viewpoint_id()) {
    if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
  }
  episodes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_SavePhotos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.SavePhotos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityMetadata.Episode episodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_episodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_episodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_episodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_viewpoint_id;
        break;
      }

      // optional .ViewpointId viewpoint_id = 2;
      case 2: {
        if (tag == 18) {
         parse_viewpoint_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewpoint_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.SavePhotos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.SavePhotos)
  return false;
#undef DO_
}

void ActivityMetadata_SavePhotos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.SavePhotos)
  // repeated .ActivityMetadata.Episode episodes = 1;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->episodes(i), output);
  }

  // optional .ViewpointId viewpoint_id = 2;
  if (has_viewpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->viewpoint_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.SavePhotos)
}

::google::protobuf::uint8* ActivityMetadata_SavePhotos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.SavePhotos)
  // repeated .ActivityMetadata.Episode episodes = 1;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->episodes(i), false, target);
  }

  // optional .ViewpointId viewpoint_id = 2;
  if (has_viewpoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->viewpoint_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.SavePhotos)
  return target;
}

size_t ActivityMetadata_SavePhotos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.SavePhotos)
  size_t total_size = 0;

  // optional .ViewpointId viewpoint_id = 2;
  if (has_viewpoint_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->viewpoint_id_);
  }

  // repeated .ActivityMetadata.Episode episodes = 1;
  {
    unsigned int count = this->episodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->episodes(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_SavePhotos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.SavePhotos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_SavePhotos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_SavePhotos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.SavePhotos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.SavePhotos)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_SavePhotos::MergeFrom(const ActivityMetadata_SavePhotos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.SavePhotos)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_SavePhotos::UnsafeMergeFrom(const ActivityMetadata_SavePhotos& from) {
  GOOGLE_DCHECK(&from != this);
  episodes_.MergeFrom(from.episodes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_viewpoint_id()) {
      mutable_viewpoint_id()->::ViewpointId::MergeFrom(from.viewpoint_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_SavePhotos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.SavePhotos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_SavePhotos::CopyFrom(const ActivityMetadata_SavePhotos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.SavePhotos)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_SavePhotos::IsInitialized() const {

  return true;
}

void ActivityMetadata_SavePhotos::Swap(ActivityMetadata_SavePhotos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_SavePhotos::InternalSwap(ActivityMetadata_SavePhotos* other) {
  episodes_.UnsafeArenaSwap(&other->episodes_);
  std::swap(viewpoint_id_, other->viewpoint_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_SavePhotos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_SavePhotos_descriptor_;
  metadata.reflection = ActivityMetadata_SavePhotos_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_ShareNew::kEpisodesFieldNumber;
const int ActivityMetadata_ShareNew::kContactsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_ShareNew::ActivityMetadata_ShareNew()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.ShareNew)
}

void ActivityMetadata_ShareNew::InitAsDefaultInstance() {
}

ActivityMetadata_ShareNew::ActivityMetadata_ShareNew(const ActivityMetadata_ShareNew& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.ShareNew)
}

void ActivityMetadata_ShareNew::SharedCtor() {
  _cached_size_ = 0;
}

ActivityMetadata_ShareNew::~ActivityMetadata_ShareNew() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.ShareNew)
  SharedDtor();
}

void ActivityMetadata_ShareNew::SharedDtor() {
}

void ActivityMetadata_ShareNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_ShareNew::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_ShareNew_descriptor_;
}

const ActivityMetadata_ShareNew& ActivityMetadata_ShareNew::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_ShareNew> ActivityMetadata_ShareNew_default_instance_;

ActivityMetadata_ShareNew* ActivityMetadata_ShareNew::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_ShareNew* n = new ActivityMetadata_ShareNew;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_ShareNew::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.ShareNew)
  episodes_.Clear();
  contacts_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_ShareNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.ShareNew)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityMetadata.Episode episodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_episodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_episodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_episodes;
        if (input->ExpectTag(18)) goto parse_loop_contacts;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ContactMetadata contacts = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_contacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_contacts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.ShareNew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.ShareNew)
  return false;
#undef DO_
}

void ActivityMetadata_ShareNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.ShareNew)
  // repeated .ActivityMetadata.Episode episodes = 1;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->episodes(i), output);
  }

  // repeated .ContactMetadata contacts = 2;
  for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contacts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.ShareNew)
}

::google::protobuf::uint8* ActivityMetadata_ShareNew::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.ShareNew)
  // repeated .ActivityMetadata.Episode episodes = 1;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->episodes(i), false, target);
  }

  // repeated .ContactMetadata contacts = 2;
  for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->contacts(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.ShareNew)
  return target;
}

size_t ActivityMetadata_ShareNew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.ShareNew)
  size_t total_size = 0;

  // repeated .ActivityMetadata.Episode episodes = 1;
  {
    unsigned int count = this->episodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->episodes(i));
    }
  }

  // repeated .ContactMetadata contacts = 2;
  {
    unsigned int count = this->contacts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contacts(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_ShareNew::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.ShareNew)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_ShareNew* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_ShareNew>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.ShareNew)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.ShareNew)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_ShareNew::MergeFrom(const ActivityMetadata_ShareNew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.ShareNew)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_ShareNew::UnsafeMergeFrom(const ActivityMetadata_ShareNew& from) {
  GOOGLE_DCHECK(&from != this);
  episodes_.MergeFrom(from.episodes_);
  contacts_.MergeFrom(from.contacts_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_ShareNew::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.ShareNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_ShareNew::CopyFrom(const ActivityMetadata_ShareNew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.ShareNew)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_ShareNew::IsInitialized() const {

  return true;
}

void ActivityMetadata_ShareNew::Swap(ActivityMetadata_ShareNew* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_ShareNew::InternalSwap(ActivityMetadata_ShareNew* other) {
  episodes_.UnsafeArenaSwap(&other->episodes_);
  contacts_.UnsafeArenaSwap(&other->contacts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_ShareNew::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_ShareNew_descriptor_;
  metadata.reflection = ActivityMetadata_ShareNew_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_ShareExisting::kEpisodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_ShareExisting::ActivityMetadata_ShareExisting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.ShareExisting)
}

void ActivityMetadata_ShareExisting::InitAsDefaultInstance() {
}

ActivityMetadata_ShareExisting::ActivityMetadata_ShareExisting(const ActivityMetadata_ShareExisting& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.ShareExisting)
}

void ActivityMetadata_ShareExisting::SharedCtor() {
  _cached_size_ = 0;
}

ActivityMetadata_ShareExisting::~ActivityMetadata_ShareExisting() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.ShareExisting)
  SharedDtor();
}

void ActivityMetadata_ShareExisting::SharedDtor() {
}

void ActivityMetadata_ShareExisting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_ShareExisting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_ShareExisting_descriptor_;
}

const ActivityMetadata_ShareExisting& ActivityMetadata_ShareExisting::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_ShareExisting> ActivityMetadata_ShareExisting_default_instance_;

ActivityMetadata_ShareExisting* ActivityMetadata_ShareExisting::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_ShareExisting* n = new ActivityMetadata_ShareExisting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_ShareExisting::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.ShareExisting)
  episodes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_ShareExisting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.ShareExisting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityMetadata.Episode episodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_episodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_episodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_episodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.ShareExisting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.ShareExisting)
  return false;
#undef DO_
}

void ActivityMetadata_ShareExisting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.ShareExisting)
  // repeated .ActivityMetadata.Episode episodes = 1;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->episodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.ShareExisting)
}

::google::protobuf::uint8* ActivityMetadata_ShareExisting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.ShareExisting)
  // repeated .ActivityMetadata.Episode episodes = 1;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->episodes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.ShareExisting)
  return target;
}

size_t ActivityMetadata_ShareExisting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.ShareExisting)
  size_t total_size = 0;

  // repeated .ActivityMetadata.Episode episodes = 1;
  {
    unsigned int count = this->episodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->episodes(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_ShareExisting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.ShareExisting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_ShareExisting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_ShareExisting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.ShareExisting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.ShareExisting)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_ShareExisting::MergeFrom(const ActivityMetadata_ShareExisting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.ShareExisting)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_ShareExisting::UnsafeMergeFrom(const ActivityMetadata_ShareExisting& from) {
  GOOGLE_DCHECK(&from != this);
  episodes_.MergeFrom(from.episodes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_ShareExisting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.ShareExisting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_ShareExisting::CopyFrom(const ActivityMetadata_ShareExisting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.ShareExisting)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_ShareExisting::IsInitialized() const {

  return true;
}

void ActivityMetadata_ShareExisting::Swap(ActivityMetadata_ShareExisting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_ShareExisting::InternalSwap(ActivityMetadata_ShareExisting* other) {
  episodes_.UnsafeArenaSwap(&other->episodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_ShareExisting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_ShareExisting_descriptor_;
  metadata.reflection = ActivityMetadata_ShareExisting_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_Unshare::kEpisodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_Unshare::ActivityMetadata_Unshare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.Unshare)
}

void ActivityMetadata_Unshare::InitAsDefaultInstance() {
}

ActivityMetadata_Unshare::ActivityMetadata_Unshare(const ActivityMetadata_Unshare& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.Unshare)
}

void ActivityMetadata_Unshare::SharedCtor() {
  _cached_size_ = 0;
}

ActivityMetadata_Unshare::~ActivityMetadata_Unshare() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.Unshare)
  SharedDtor();
}

void ActivityMetadata_Unshare::SharedDtor() {
}

void ActivityMetadata_Unshare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_Unshare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_Unshare_descriptor_;
}

const ActivityMetadata_Unshare& ActivityMetadata_Unshare::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_Unshare> ActivityMetadata_Unshare_default_instance_;

ActivityMetadata_Unshare* ActivityMetadata_Unshare::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_Unshare* n = new ActivityMetadata_Unshare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_Unshare::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.Unshare)
  episodes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_Unshare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.Unshare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityMetadata.Episode episodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_episodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_episodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_episodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.Unshare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.Unshare)
  return false;
#undef DO_
}

void ActivityMetadata_Unshare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.Unshare)
  // repeated .ActivityMetadata.Episode episodes = 1;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->episodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.Unshare)
}

::google::protobuf::uint8* ActivityMetadata_Unshare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.Unshare)
  // repeated .ActivityMetadata.Episode episodes = 1;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->episodes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.Unshare)
  return target;
}

size_t ActivityMetadata_Unshare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.Unshare)
  size_t total_size = 0;

  // repeated .ActivityMetadata.Episode episodes = 1;
  {
    unsigned int count = this->episodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->episodes(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_Unshare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.Unshare)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_Unshare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_Unshare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.Unshare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.Unshare)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_Unshare::MergeFrom(const ActivityMetadata_Unshare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.Unshare)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_Unshare::UnsafeMergeFrom(const ActivityMetadata_Unshare& from) {
  GOOGLE_DCHECK(&from != this);
  episodes_.MergeFrom(from.episodes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_Unshare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.Unshare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_Unshare::CopyFrom(const ActivityMetadata_Unshare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.Unshare)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_Unshare::IsInitialized() const {

  return true;
}

void ActivityMetadata_Unshare::Swap(ActivityMetadata_Unshare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_Unshare::InternalSwap(ActivityMetadata_Unshare* other) {
  episodes_.UnsafeArenaSwap(&other->episodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_Unshare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_Unshare_descriptor_;
  metadata.reflection = ActivityMetadata_Unshare_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_UpdateEpisode::kEpisodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_UpdateEpisode::ActivityMetadata_UpdateEpisode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.UpdateEpisode)
}

void ActivityMetadata_UpdateEpisode::InitAsDefaultInstance() {
  episode_id_ = const_cast< ::EpisodeId*>(
      ::EpisodeId::internal_default_instance());
}

ActivityMetadata_UpdateEpisode::ActivityMetadata_UpdateEpisode(const ActivityMetadata_UpdateEpisode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.UpdateEpisode)
}

void ActivityMetadata_UpdateEpisode::SharedCtor() {
  _cached_size_ = 0;
  episode_id_ = NULL;
}

ActivityMetadata_UpdateEpisode::~ActivityMetadata_UpdateEpisode() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.UpdateEpisode)
  SharedDtor();
}

void ActivityMetadata_UpdateEpisode::SharedDtor() {
  if (this != &ActivityMetadata_UpdateEpisode_default_instance_.get()) {
    delete episode_id_;
  }
}

void ActivityMetadata_UpdateEpisode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_UpdateEpisode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_UpdateEpisode_descriptor_;
}

const ActivityMetadata_UpdateEpisode& ActivityMetadata_UpdateEpisode::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_UpdateEpisode> ActivityMetadata_UpdateEpisode_default_instance_;

ActivityMetadata_UpdateEpisode* ActivityMetadata_UpdateEpisode::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_UpdateEpisode* n = new ActivityMetadata_UpdateEpisode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_UpdateEpisode::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.UpdateEpisode)
  if (has_episode_id()) {
    if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_UpdateEpisode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.UpdateEpisode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EpisodeId episode_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_episode_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.UpdateEpisode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.UpdateEpisode)
  return false;
#undef DO_
}

void ActivityMetadata_UpdateEpisode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.UpdateEpisode)
  // optional .EpisodeId episode_id = 1;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->episode_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.UpdateEpisode)
}

::google::protobuf::uint8* ActivityMetadata_UpdateEpisode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.UpdateEpisode)
  // optional .EpisodeId episode_id = 1;
  if (has_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->episode_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.UpdateEpisode)
  return target;
}

size_t ActivityMetadata_UpdateEpisode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.UpdateEpisode)
  size_t total_size = 0;

  // optional .EpisodeId episode_id = 1;
  if (has_episode_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->episode_id_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_UpdateEpisode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.UpdateEpisode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_UpdateEpisode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_UpdateEpisode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.UpdateEpisode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.UpdateEpisode)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_UpdateEpisode::MergeFrom(const ActivityMetadata_UpdateEpisode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.UpdateEpisode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_UpdateEpisode::UnsafeMergeFrom(const ActivityMetadata_UpdateEpisode& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_episode_id()) {
      mutable_episode_id()->::EpisodeId::MergeFrom(from.episode_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_UpdateEpisode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.UpdateEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_UpdateEpisode::CopyFrom(const ActivityMetadata_UpdateEpisode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.UpdateEpisode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_UpdateEpisode::IsInitialized() const {

  return true;
}

void ActivityMetadata_UpdateEpisode::Swap(ActivityMetadata_UpdateEpisode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_UpdateEpisode::InternalSwap(ActivityMetadata_UpdateEpisode* other) {
  std::swap(episode_id_, other->episode_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_UpdateEpisode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_UpdateEpisode_descriptor_;
  metadata.reflection = ActivityMetadata_UpdateEpisode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_UpdateViewpoint::kViewpointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_UpdateViewpoint::ActivityMetadata_UpdateViewpoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.UpdateViewpoint)
}

void ActivityMetadata_UpdateViewpoint::InitAsDefaultInstance() {
  viewpoint_id_ = const_cast< ::ViewpointId*>(
      ::ViewpointId::internal_default_instance());
}

ActivityMetadata_UpdateViewpoint::ActivityMetadata_UpdateViewpoint(const ActivityMetadata_UpdateViewpoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.UpdateViewpoint)
}

void ActivityMetadata_UpdateViewpoint::SharedCtor() {
  _cached_size_ = 0;
  viewpoint_id_ = NULL;
}

ActivityMetadata_UpdateViewpoint::~ActivityMetadata_UpdateViewpoint() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.UpdateViewpoint)
  SharedDtor();
}

void ActivityMetadata_UpdateViewpoint::SharedDtor() {
  if (this != &ActivityMetadata_UpdateViewpoint_default_instance_.get()) {
    delete viewpoint_id_;
  }
}

void ActivityMetadata_UpdateViewpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_UpdateViewpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_UpdateViewpoint_descriptor_;
}

const ActivityMetadata_UpdateViewpoint& ActivityMetadata_UpdateViewpoint::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_UpdateViewpoint> ActivityMetadata_UpdateViewpoint_default_instance_;

ActivityMetadata_UpdateViewpoint* ActivityMetadata_UpdateViewpoint::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_UpdateViewpoint* n = new ActivityMetadata_UpdateViewpoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_UpdateViewpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.UpdateViewpoint)
  if (has_viewpoint_id()) {
    if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_UpdateViewpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.UpdateViewpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ViewpointId viewpoint_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewpoint_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.UpdateViewpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.UpdateViewpoint)
  return false;
#undef DO_
}

void ActivityMetadata_UpdateViewpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.UpdateViewpoint)
  // optional .ViewpointId viewpoint_id = 1;
  if (has_viewpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->viewpoint_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.UpdateViewpoint)
}

::google::protobuf::uint8* ActivityMetadata_UpdateViewpoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.UpdateViewpoint)
  // optional .ViewpointId viewpoint_id = 1;
  if (has_viewpoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->viewpoint_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.UpdateViewpoint)
  return target;
}

size_t ActivityMetadata_UpdateViewpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.UpdateViewpoint)
  size_t total_size = 0;

  // optional .ViewpointId viewpoint_id = 1;
  if (has_viewpoint_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->viewpoint_id_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_UpdateViewpoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.UpdateViewpoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_UpdateViewpoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_UpdateViewpoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.UpdateViewpoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.UpdateViewpoint)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_UpdateViewpoint::MergeFrom(const ActivityMetadata_UpdateViewpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.UpdateViewpoint)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_UpdateViewpoint::UnsafeMergeFrom(const ActivityMetadata_UpdateViewpoint& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewpoint_id()) {
      mutable_viewpoint_id()->::ViewpointId::MergeFrom(from.viewpoint_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_UpdateViewpoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.UpdateViewpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_UpdateViewpoint::CopyFrom(const ActivityMetadata_UpdateViewpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.UpdateViewpoint)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_UpdateViewpoint::IsInitialized() const {

  return true;
}

void ActivityMetadata_UpdateViewpoint::Swap(ActivityMetadata_UpdateViewpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_UpdateViewpoint::InternalSwap(ActivityMetadata_UpdateViewpoint* other) {
  std::swap(viewpoint_id_, other->viewpoint_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_UpdateViewpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_UpdateViewpoint_descriptor_;
  metadata.reflection = ActivityMetadata_UpdateViewpoint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata_UploadEpisode::kEpisodeIdFieldNumber;
const int ActivityMetadata_UploadEpisode::kPhotoIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata_UploadEpisode::ActivityMetadata_UploadEpisode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata.UploadEpisode)
}

void ActivityMetadata_UploadEpisode::InitAsDefaultInstance() {
  episode_id_ = const_cast< ::EpisodeId*>(
      ::EpisodeId::internal_default_instance());
}

ActivityMetadata_UploadEpisode::ActivityMetadata_UploadEpisode(const ActivityMetadata_UploadEpisode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata.UploadEpisode)
}

void ActivityMetadata_UploadEpisode::SharedCtor() {
  _cached_size_ = 0;
  episode_id_ = NULL;
}

ActivityMetadata_UploadEpisode::~ActivityMetadata_UploadEpisode() {
  // @@protoc_insertion_point(destructor:ActivityMetadata.UploadEpisode)
  SharedDtor();
}

void ActivityMetadata_UploadEpisode::SharedDtor() {
  if (this != &ActivityMetadata_UploadEpisode_default_instance_.get()) {
    delete episode_id_;
  }
}

void ActivityMetadata_UploadEpisode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata_UploadEpisode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_UploadEpisode_descriptor_;
}

const ActivityMetadata_UploadEpisode& ActivityMetadata_UploadEpisode::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata_UploadEpisode> ActivityMetadata_UploadEpisode_default_instance_;

ActivityMetadata_UploadEpisode* ActivityMetadata_UploadEpisode::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata_UploadEpisode* n = new ActivityMetadata_UploadEpisode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata_UploadEpisode::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata.UploadEpisode)
  if (has_episode_id()) {
    if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  }
  photo_ids_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata_UploadEpisode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata.UploadEpisode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EpisodeId episode_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_episode_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_photo_ids;
        break;
      }

      // repeated .PhotoId photo_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_photo_ids:
          DO_(input->IncrementRecursionDepth());
         parse_loop_photo_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_photo_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_photo_ids;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata.UploadEpisode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata.UploadEpisode)
  return false;
#undef DO_
}

void ActivityMetadata_UploadEpisode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata.UploadEpisode)
  // optional .EpisodeId episode_id = 1;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->episode_id_, output);
  }

  // repeated .PhotoId photo_ids = 2;
  for (unsigned int i = 0, n = this->photo_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->photo_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata.UploadEpisode)
}

::google::protobuf::uint8* ActivityMetadata_UploadEpisode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata.UploadEpisode)
  // optional .EpisodeId episode_id = 1;
  if (has_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->episode_id_, false, target);
  }

  // repeated .PhotoId photo_ids = 2;
  for (unsigned int i = 0, n = this->photo_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->photo_ids(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata.UploadEpisode)
  return target;
}

size_t ActivityMetadata_UploadEpisode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata.UploadEpisode)
  size_t total_size = 0;

  // optional .EpisodeId episode_id = 1;
  if (has_episode_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->episode_id_);
  }

  // repeated .PhotoId photo_ids = 2;
  {
    unsigned int count = this->photo_ids_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photo_ids(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata_UploadEpisode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata.UploadEpisode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata_UploadEpisode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata_UploadEpisode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata.UploadEpisode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata.UploadEpisode)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata_UploadEpisode::MergeFrom(const ActivityMetadata_UploadEpisode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata.UploadEpisode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata_UploadEpisode::UnsafeMergeFrom(const ActivityMetadata_UploadEpisode& from) {
  GOOGLE_DCHECK(&from != this);
  photo_ids_.MergeFrom(from.photo_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_episode_id()) {
      mutable_episode_id()->::EpisodeId::MergeFrom(from.episode_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata_UploadEpisode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata.UploadEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata_UploadEpisode::CopyFrom(const ActivityMetadata_UploadEpisode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata.UploadEpisode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata_UploadEpisode::IsInitialized() const {

  return true;
}

void ActivityMetadata_UploadEpisode::Swap(ActivityMetadata_UploadEpisode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata_UploadEpisode::InternalSwap(ActivityMetadata_UploadEpisode* other) {
  std::swap(episode_id_, other->episode_id_);
  photo_ids_.UnsafeArenaSwap(&other->photo_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata_UploadEpisode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_UploadEpisode_descriptor_;
  metadata.reflection = ActivityMetadata_UploadEpisode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityMetadata::kActivityIdFieldNumber;
const int ActivityMetadata::kViewpointIdFieldNumber;
const int ActivityMetadata::kUserIdFieldNumber;
const int ActivityMetadata::kTimestampFieldNumber;
const int ActivityMetadata::kUpdateSeqFieldNumber;
const int ActivityMetadata::kQueueFieldNumber;
const int ActivityMetadata::kAddFollowersFieldNumber;
const int ActivityMetadata::kMergeAccountsFieldNumber;
const int ActivityMetadata::kPostCommentFieldNumber;
const int ActivityMetadata::kRemoveFollowersFieldNumber;
const int ActivityMetadata::kSavePhotosFieldNumber;
const int ActivityMetadata::kShareNewFieldNumber;
const int ActivityMetadata::kShareExistingFieldNumber;
const int ActivityMetadata::kUnshareFieldNumber;
const int ActivityMetadata::kUpdateEpisodeFieldNumber;
const int ActivityMetadata::kUpdateViewpointFieldNumber;
const int ActivityMetadata::kUploadEpisodeFieldNumber;
const int ActivityMetadata::kLabelErrorFieldNumber;
const int ActivityMetadata::kProvisionalFieldNumber;
const int ActivityMetadata::kUploadActivityFieldNumber;
const int ActivityMetadata::kViewedTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityMetadata::ActivityMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ActivityMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityMetadata)
}

void ActivityMetadata::InitAsDefaultInstance() {
  activity_id_ = const_cast< ::ActivityId*>(
      ::ActivityId::internal_default_instance());
  viewpoint_id_ = const_cast< ::ViewpointId*>(
      ::ViewpointId::internal_default_instance());
  queue_ = const_cast< ::QueueMetadata*>(
      ::QueueMetadata::internal_default_instance());
  add_followers_ = const_cast< ::ActivityMetadata_AddFollowers*>(
      ::ActivityMetadata_AddFollowers::internal_default_instance());
  merge_accounts_ = const_cast< ::ActivityMetadata_MergeAccounts*>(
      ::ActivityMetadata_MergeAccounts::internal_default_instance());
  post_comment_ = const_cast< ::ActivityMetadata_PostComment*>(
      ::ActivityMetadata_PostComment::internal_default_instance());
  remove_followers_ = const_cast< ::ActivityMetadata_RemoveFollowers*>(
      ::ActivityMetadata_RemoveFollowers::internal_default_instance());
  save_photos_ = const_cast< ::ActivityMetadata_SavePhotos*>(
      ::ActivityMetadata_SavePhotos::internal_default_instance());
  share_new_ = const_cast< ::ActivityMetadata_ShareNew*>(
      ::ActivityMetadata_ShareNew::internal_default_instance());
  share_existing_ = const_cast< ::ActivityMetadata_ShareExisting*>(
      ::ActivityMetadata_ShareExisting::internal_default_instance());
  unshare_ = const_cast< ::ActivityMetadata_Unshare*>(
      ::ActivityMetadata_Unshare::internal_default_instance());
  update_episode_ = const_cast< ::ActivityMetadata_UpdateEpisode*>(
      ::ActivityMetadata_UpdateEpisode::internal_default_instance());
  update_viewpoint_ = const_cast< ::ActivityMetadata_UpdateViewpoint*>(
      ::ActivityMetadata_UpdateViewpoint::internal_default_instance());
  upload_episode_ = const_cast< ::ActivityMetadata_UploadEpisode*>(
      ::ActivityMetadata_UploadEpisode::internal_default_instance());
}

ActivityMetadata::ActivityMetadata(const ActivityMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityMetadata)
}

void ActivityMetadata::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = NULL;
  viewpoint_id_ = NULL;
  queue_ = NULL;
  add_followers_ = NULL;
  merge_accounts_ = NULL;
  post_comment_ = NULL;
  remove_followers_ = NULL;
  save_photos_ = NULL;
  share_new_ = NULL;
  share_existing_ = NULL;
  unshare_ = NULL;
  update_episode_ = NULL;
  update_viewpoint_ = NULL;
  upload_episode_ = NULL;
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&upload_activity_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(upload_activity_));
}

ActivityMetadata::~ActivityMetadata() {
  // @@protoc_insertion_point(destructor:ActivityMetadata)
  SharedDtor();
}

void ActivityMetadata::SharedDtor() {
  if (this != &ActivityMetadata_default_instance_.get()) {
    delete activity_id_;
    delete viewpoint_id_;
    delete queue_;
    delete add_followers_;
    delete merge_accounts_;
    delete post_comment_;
    delete remove_followers_;
    delete save_photos_;
    delete share_new_;
    delete share_existing_;
    delete unshare_;
    delete update_episode_;
    delete update_viewpoint_;
    delete upload_episode_;
  }
}

void ActivityMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMetadata_descriptor_;
}

const ActivityMetadata& ActivityMetadata::default_instance() {
  protobuf_InitDefaults_ActivityMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ActivityMetadata> ActivityMetadata_default_instance_;

ActivityMetadata* ActivityMetadata::New(::google::protobuf::Arena* arena) const {
  ActivityMetadata* n = new ActivityMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivityMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ActivityMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActivityMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(user_id_, update_seq_);
    if (has_activity_id()) {
      if (activity_id_ != NULL) activity_id_->::ActivityId::Clear();
    }
    if (has_viewpoint_id()) {
      if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
    }
    if (has_queue()) {
      if (queue_ != NULL) queue_->::QueueMetadata::Clear();
    }
    if (has_add_followers()) {
      if (add_followers_ != NULL) add_followers_->::ActivityMetadata_AddFollowers::Clear();
    }
    if (has_merge_accounts()) {
      if (merge_accounts_ != NULL) merge_accounts_->::ActivityMetadata_MergeAccounts::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_post_comment()) {
      if (post_comment_ != NULL) post_comment_->::ActivityMetadata_PostComment::Clear();
    }
    if (has_remove_followers()) {
      if (remove_followers_ != NULL) remove_followers_->::ActivityMetadata_RemoveFollowers::Clear();
    }
    if (has_save_photos()) {
      if (save_photos_ != NULL) save_photos_->::ActivityMetadata_SavePhotos::Clear();
    }
    if (has_share_new()) {
      if (share_new_ != NULL) share_new_->::ActivityMetadata_ShareNew::Clear();
    }
    if (has_share_existing()) {
      if (share_existing_ != NULL) share_existing_->::ActivityMetadata_ShareExisting::Clear();
    }
    if (has_unshare()) {
      if (unshare_ != NULL) unshare_->::ActivityMetadata_Unshare::Clear();
    }
    if (has_update_episode()) {
      if (update_episode_ != NULL) update_episode_->::ActivityMetadata_UpdateEpisode::Clear();
    }
    if (has_update_viewpoint()) {
      if (update_viewpoint_ != NULL) update_viewpoint_->::ActivityMetadata_UpdateViewpoint::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(viewed_timestamp_, upload_activity_);
    if (has_upload_episode()) {
      if (upload_episode_ != NULL) upload_episode_->::ActivityMetadata_UploadEpisode::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActivityMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ActivityId activity_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_viewpoint_id;
        break;
      }

      // optional .ViewpointId viewpoint_id = 2;
      case 2: {
        if (tag == 18) {
         parse_viewpoint_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewpoint_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 4;
      case 4: {
        if (tag == 33) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_update_seq;
        break;
      }

      // optional int64 update_seq = 5;
      case 5: {
        if (tag == 40) {
         parse_update_seq:
          set_has_update_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_seq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_queue;
        break;
      }

      // optional .QueueMetadata queue = 6;
      case 6: {
        if (tag == 50) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_add_followers;
        break;
      }

      // optional .ActivityMetadata.AddFollowers add_followers = 7;
      case 7: {
        if (tag == 58) {
         parse_add_followers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_followers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_post_comment;
        break;
      }

      // optional .ActivityMetadata.PostComment post_comment = 8;
      case 8: {
        if (tag == 66) {
         parse_post_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_share_new;
        break;
      }

      // optional .ActivityMetadata.ShareNew share_new = 9;
      case 9: {
        if (tag == 74) {
         parse_share_new:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share_new()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_share_existing;
        break;
      }

      // optional .ActivityMetadata.ShareExisting share_existing = 10;
      case 10: {
        if (tag == 82) {
         parse_share_existing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share_existing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_unshare;
        break;
      }

      // optional .ActivityMetadata.Unshare unshare = 11;
      case 11: {
        if (tag == 90) {
         parse_unshare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unshare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_update_episode;
        break;
      }

      // optional .ActivityMetadata.UpdateEpisode update_episode = 12;
      case 12: {
        if (tag == 98) {
         parse_update_episode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_episode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_update_viewpoint;
        break;
      }

      // optional .ActivityMetadata.UpdateViewpoint update_viewpoint = 13;
      case 13: {
        if (tag == 106) {
         parse_update_viewpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_viewpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_upload_episode;
        break;
      }

      // optional .ActivityMetadata.UploadEpisode upload_episode = 14;
      case 14: {
        if (tag == 114) {
         parse_upload_episode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_episode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_save_photos;
        break;
      }

      // optional .ActivityMetadata.SavePhotos save_photos = 15;
      case 15: {
        if (tag == 122) {
         parse_save_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_merge_accounts;
        break;
      }

      // optional .ActivityMetadata.MergeAccounts merge_accounts = 16;
      case 16: {
        if (tag == 130) {
         parse_merge_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_accounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_remove_followers;
        break;
      }

      // optional .ActivityMetadata.RemoveFollowers remove_followers = 17;
      case 17: {
        if (tag == 138) {
         parse_remove_followers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_followers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_label_error;
        break;
      }

      // optional bool label_error = 20;
      case 20: {
        if (tag == 160) {
         parse_label_error:
          set_has_label_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_upload_activity;
        break;
      }

      // optional bool upload_activity = 30;
      case 30: {
        if (tag == 240) {
         parse_upload_activity:
          set_has_upload_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_activity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_viewed_timestamp;
        break;
      }

      // optional double viewed_timestamp = 31;
      case 31: {
        if (tag == 249) {
         parse_viewed_timestamp:
          set_has_viewed_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &viewed_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_provisional;
        break;
      }

      // optional bool provisional = 32;
      case 32: {
        if (tag == 256) {
         parse_provisional:
          set_has_provisional();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provisional_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityMetadata)
  return false;
#undef DO_
}

void ActivityMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityMetadata)
  // optional .ActivityId activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->activity_id_, output);
  }

  // optional .ViewpointId viewpoint_id = 2;
  if (has_viewpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->viewpoint_id_, output);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_id(), output);
  }

  // optional double timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timestamp(), output);
  }

  // optional int64 update_seq = 5;
  if (has_update_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->update_seq(), output);
  }

  // optional .QueueMetadata queue = 6;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->queue_, output);
  }

  // optional .ActivityMetadata.AddFollowers add_followers = 7;
  if (has_add_followers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->add_followers_, output);
  }

  // optional .ActivityMetadata.PostComment post_comment = 8;
  if (has_post_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->post_comment_, output);
  }

  // optional .ActivityMetadata.ShareNew share_new = 9;
  if (has_share_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->share_new_, output);
  }

  // optional .ActivityMetadata.ShareExisting share_existing = 10;
  if (has_share_existing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->share_existing_, output);
  }

  // optional .ActivityMetadata.Unshare unshare = 11;
  if (has_unshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->unshare_, output);
  }

  // optional .ActivityMetadata.UpdateEpisode update_episode = 12;
  if (has_update_episode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->update_episode_, output);
  }

  // optional .ActivityMetadata.UpdateViewpoint update_viewpoint = 13;
  if (has_update_viewpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->update_viewpoint_, output);
  }

  // optional .ActivityMetadata.UploadEpisode upload_episode = 14;
  if (has_upload_episode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->upload_episode_, output);
  }

  // optional .ActivityMetadata.SavePhotos save_photos = 15;
  if (has_save_photos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->save_photos_, output);
  }

  // optional .ActivityMetadata.MergeAccounts merge_accounts = 16;
  if (has_merge_accounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->merge_accounts_, output);
  }

  // optional .ActivityMetadata.RemoveFollowers remove_followers = 17;
  if (has_remove_followers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->remove_followers_, output);
  }

  // optional bool label_error = 20;
  if (has_label_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->label_error(), output);
  }

  // optional bool upload_activity = 30;
  if (has_upload_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->upload_activity(), output);
  }

  // optional double viewed_timestamp = 31;
  if (has_viewed_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->viewed_timestamp(), output);
  }

  // optional bool provisional = 32;
  if (has_provisional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->provisional(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityMetadata)
}

::google::protobuf::uint8* ActivityMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ActivityMetadata)
  // optional .ActivityId activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->activity_id_, false, target);
  }

  // optional .ViewpointId viewpoint_id = 2;
  if (has_viewpoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->viewpoint_id_, false, target);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_id(), target);
  }

  // optional double timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timestamp(), target);
  }

  // optional int64 update_seq = 5;
  if (has_update_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->update_seq(), target);
  }

  // optional .QueueMetadata queue = 6;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->queue_, false, target);
  }

  // optional .ActivityMetadata.AddFollowers add_followers = 7;
  if (has_add_followers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->add_followers_, false, target);
  }

  // optional .ActivityMetadata.PostComment post_comment = 8;
  if (has_post_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->post_comment_, false, target);
  }

  // optional .ActivityMetadata.ShareNew share_new = 9;
  if (has_share_new()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->share_new_, false, target);
  }

  // optional .ActivityMetadata.ShareExisting share_existing = 10;
  if (has_share_existing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->share_existing_, false, target);
  }

  // optional .ActivityMetadata.Unshare unshare = 11;
  if (has_unshare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->unshare_, false, target);
  }

  // optional .ActivityMetadata.UpdateEpisode update_episode = 12;
  if (has_update_episode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->update_episode_, false, target);
  }

  // optional .ActivityMetadata.UpdateViewpoint update_viewpoint = 13;
  if (has_update_viewpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->update_viewpoint_, false, target);
  }

  // optional .ActivityMetadata.UploadEpisode upload_episode = 14;
  if (has_upload_episode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->upload_episode_, false, target);
  }

  // optional .ActivityMetadata.SavePhotos save_photos = 15;
  if (has_save_photos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->save_photos_, false, target);
  }

  // optional .ActivityMetadata.MergeAccounts merge_accounts = 16;
  if (has_merge_accounts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->merge_accounts_, false, target);
  }

  // optional .ActivityMetadata.RemoveFollowers remove_followers = 17;
  if (has_remove_followers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->remove_followers_, false, target);
  }

  // optional bool label_error = 20;
  if (has_label_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->label_error(), target);
  }

  // optional bool upload_activity = 30;
  if (has_upload_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->upload_activity(), target);
  }

  // optional double viewed_timestamp = 31;
  if (has_viewed_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->viewed_timestamp(), target);
  }

  // optional bool provisional = 32;
  if (has_provisional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->provisional(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityMetadata)
  return target;
}

size_t ActivityMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivityMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .ActivityId activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->activity_id_);
    }

    // optional .ViewpointId viewpoint_id = 2;
    if (has_viewpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->viewpoint_id_);
    }

    // optional int64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional double timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int64 update_seq = 5;
    if (has_update_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_seq());
    }

    // optional .QueueMetadata queue = 6;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->queue_);
    }

    // optional .ActivityMetadata.AddFollowers add_followers = 7;
    if (has_add_followers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->add_followers_);
    }

    // optional .ActivityMetadata.MergeAccounts merge_accounts = 16;
    if (has_merge_accounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->merge_accounts_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .ActivityMetadata.PostComment post_comment = 8;
    if (has_post_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->post_comment_);
    }

    // optional .ActivityMetadata.RemoveFollowers remove_followers = 17;
    if (has_remove_followers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->remove_followers_);
    }

    // optional .ActivityMetadata.SavePhotos save_photos = 15;
    if (has_save_photos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->save_photos_);
    }

    // optional .ActivityMetadata.ShareNew share_new = 9;
    if (has_share_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->share_new_);
    }

    // optional .ActivityMetadata.ShareExisting share_existing = 10;
    if (has_share_existing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->share_existing_);
    }

    // optional .ActivityMetadata.Unshare unshare = 11;
    if (has_unshare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unshare_);
    }

    // optional .ActivityMetadata.UpdateEpisode update_episode = 12;
    if (has_update_episode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_episode_);
    }

    // optional .ActivityMetadata.UpdateViewpoint update_viewpoint = 13;
    if (has_update_viewpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_viewpoint_);
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional .ActivityMetadata.UploadEpisode upload_episode = 14;
    if (has_upload_episode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upload_episode_);
    }

    // optional bool label_error = 20;
    if (has_label_error()) {
      total_size += 2 + 1;
    }

    // optional bool provisional = 32;
    if (has_provisional()) {
      total_size += 2 + 1;
    }

    // optional bool upload_activity = 30;
    if (has_upload_activity()) {
      total_size += 2 + 1;
    }

    // optional double viewed_timestamp = 31;
    if (has_viewed_timestamp()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivityMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActivityMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivityMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivityMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivityMetadata)
    UnsafeMergeFrom(*source);
  }
}

void ActivityMetadata::MergeFrom(const ActivityMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivityMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ActivityMetadata::UnsafeMergeFrom(const ActivityMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      mutable_activity_id()->::ActivityId::MergeFrom(from.activity_id());
    }
    if (from.has_viewpoint_id()) {
      mutable_viewpoint_id()->::ViewpointId::MergeFrom(from.viewpoint_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_update_seq()) {
      set_update_seq(from.update_seq());
    }
    if (from.has_queue()) {
      mutable_queue()->::QueueMetadata::MergeFrom(from.queue());
    }
    if (from.has_add_followers()) {
      mutable_add_followers()->::ActivityMetadata_AddFollowers::MergeFrom(from.add_followers());
    }
    if (from.has_merge_accounts()) {
      mutable_merge_accounts()->::ActivityMetadata_MergeAccounts::MergeFrom(from.merge_accounts());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_post_comment()) {
      mutable_post_comment()->::ActivityMetadata_PostComment::MergeFrom(from.post_comment());
    }
    if (from.has_remove_followers()) {
      mutable_remove_followers()->::ActivityMetadata_RemoveFollowers::MergeFrom(from.remove_followers());
    }
    if (from.has_save_photos()) {
      mutable_save_photos()->::ActivityMetadata_SavePhotos::MergeFrom(from.save_photos());
    }
    if (from.has_share_new()) {
      mutable_share_new()->::ActivityMetadata_ShareNew::MergeFrom(from.share_new());
    }
    if (from.has_share_existing()) {
      mutable_share_existing()->::ActivityMetadata_ShareExisting::MergeFrom(from.share_existing());
    }
    if (from.has_unshare()) {
      mutable_unshare()->::ActivityMetadata_Unshare::MergeFrom(from.unshare());
    }
    if (from.has_update_episode()) {
      mutable_update_episode()->::ActivityMetadata_UpdateEpisode::MergeFrom(from.update_episode());
    }
    if (from.has_update_viewpoint()) {
      mutable_update_viewpoint()->::ActivityMetadata_UpdateViewpoint::MergeFrom(from.update_viewpoint());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_upload_episode()) {
      mutable_upload_episode()->::ActivityMetadata_UploadEpisode::MergeFrom(from.upload_episode());
    }
    if (from.has_label_error()) {
      set_label_error(from.label_error());
    }
    if (from.has_provisional()) {
      set_provisional(from.provisional());
    }
    if (from.has_upload_activity()) {
      set_upload_activity(from.upload_activity());
    }
    if (from.has_viewed_timestamp()) {
      set_viewed_timestamp(from.viewed_timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ActivityMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivityMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMetadata::CopyFrom(const ActivityMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivityMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ActivityMetadata::IsInitialized() const {

  return true;
}

void ActivityMetadata::Swap(ActivityMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityMetadata::InternalSwap(ActivityMetadata* other) {
  std::swap(activity_id_, other->activity_id_);
  std::swap(viewpoint_id_, other->viewpoint_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(update_seq_, other->update_seq_);
  std::swap(queue_, other->queue_);
  std::swap(add_followers_, other->add_followers_);
  std::swap(merge_accounts_, other->merge_accounts_);
  std::swap(post_comment_, other->post_comment_);
  std::swap(remove_followers_, other->remove_followers_);
  std::swap(save_photos_, other->save_photos_);
  std::swap(share_new_, other->share_new_);
  std::swap(share_existing_, other->share_existing_);
  std::swap(unshare_, other->unshare_);
  std::swap(update_episode_, other->update_episode_);
  std::swap(update_viewpoint_, other->update_viewpoint_);
  std::swap(upload_episode_, other->upload_episode_);
  std::swap(label_error_, other->label_error_);
  std::swap(provisional_, other->provisional_);
  std::swap(upload_activity_, other->upload_activity_);
  std::swap(viewed_timestamp_, other->viewed_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivityMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMetadata_descriptor_;
  metadata.reflection = ActivityMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityMetadata_Episode

// optional .EpisodeId episode_id = 1;
bool ActivityMetadata_Episode::has_episode_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivityMetadata_Episode::set_has_episode_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivityMetadata_Episode::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivityMetadata_Episode::clear_episode_id() {
  if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  clear_has_episode_id();
}
const ::EpisodeId& ActivityMetadata_Episode::episode_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.Episode.episode_id)
  return episode_id_ != NULL ? *episode_id_
                         : *::EpisodeId::internal_default_instance();
}
::EpisodeId* ActivityMetadata_Episode::mutable_episode_id() {
  set_has_episode_id();
  if (episode_id_ == NULL) {
    episode_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.Episode.episode_id)
  return episode_id_;
}
::EpisodeId* ActivityMetadata_Episode::release_episode_id() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.Episode.episode_id)
  clear_has_episode_id();
  ::EpisodeId* temp = episode_id_;
  episode_id_ = NULL;
  return temp;
}
void ActivityMetadata_Episode::set_allocated_episode_id(::EpisodeId* episode_id) {
  delete episode_id_;
  episode_id_ = episode_id;
  if (episode_id) {
    set_has_episode_id();
  } else {
    clear_has_episode_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.Episode.episode_id)
}

// repeated .PhotoId photo_ids = 2;
int ActivityMetadata_Episode::photo_ids_size() const {
  return photo_ids_.size();
}
void ActivityMetadata_Episode::clear_photo_ids() {
  photo_ids_.Clear();
}
const ::PhotoId& ActivityMetadata_Episode::photo_ids(int index) const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.Episode.photo_ids)
  return photo_ids_.Get(index);
}
::PhotoId* ActivityMetadata_Episode::mutable_photo_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.Episode.photo_ids)
  return photo_ids_.Mutable(index);
}
::PhotoId* ActivityMetadata_Episode::add_photo_ids() {
  // @@protoc_insertion_point(field_add:ActivityMetadata.Episode.photo_ids)
  return photo_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::PhotoId >*
ActivityMetadata_Episode::mutable_photo_ids() {
  // @@protoc_insertion_point(field_mutable_list:ActivityMetadata.Episode.photo_ids)
  return &photo_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::PhotoId >&
ActivityMetadata_Episode::photo_ids() const {
  // @@protoc_insertion_point(field_list:ActivityMetadata.Episode.photo_ids)
  return photo_ids_;
}

inline const ActivityMetadata_Episode* ActivityMetadata_Episode::internal_default_instance() {
  return &ActivityMetadata_Episode_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_AddFollowers

// repeated .ContactMetadata contacts = 1;
int ActivityMetadata_AddFollowers::contacts_size() const {
  return contacts_.size();
}
void ActivityMetadata_AddFollowers::clear_contacts() {
  contacts_.Clear();
}
const ::ContactMetadata& ActivityMetadata_AddFollowers::contacts(int index) const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.AddFollowers.contacts)
  return contacts_.Get(index);
}
::ContactMetadata* ActivityMetadata_AddFollowers::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.AddFollowers.contacts)
  return contacts_.Mutable(index);
}
::ContactMetadata* ActivityMetadata_AddFollowers::add_contacts() {
  // @@protoc_insertion_point(field_add:ActivityMetadata.AddFollowers.contacts)
  return contacts_.Add();
}
::google::protobuf::RepeatedPtrField< ::ContactMetadata >*
ActivityMetadata_AddFollowers::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:ActivityMetadata.AddFollowers.contacts)
  return &contacts_;
}
const ::google::protobuf::RepeatedPtrField< ::ContactMetadata >&
ActivityMetadata_AddFollowers::contacts() const {
  // @@protoc_insertion_point(field_list:ActivityMetadata.AddFollowers.contacts)
  return contacts_;
}

inline const ActivityMetadata_AddFollowers* ActivityMetadata_AddFollowers::internal_default_instance() {
  return &ActivityMetadata_AddFollowers_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_MergeAccounts

// optional int64 source_user_id = 1;
bool ActivityMetadata_MergeAccounts::has_source_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivityMetadata_MergeAccounts::set_has_source_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivityMetadata_MergeAccounts::clear_has_source_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivityMetadata_MergeAccounts::clear_source_user_id() {
  source_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_user_id();
}
::google::protobuf::int64 ActivityMetadata_MergeAccounts::source_user_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.MergeAccounts.source_user_id)
  return source_user_id_;
}
void ActivityMetadata_MergeAccounts::set_source_user_id(::google::protobuf::int64 value) {
  set_has_source_user_id();
  source_user_id_ = value;
  // @@protoc_insertion_point(field_set:ActivityMetadata.MergeAccounts.source_user_id)
}

// optional int64 target_user_id = 2;
bool ActivityMetadata_MergeAccounts::has_target_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActivityMetadata_MergeAccounts::set_has_target_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ActivityMetadata_MergeAccounts::clear_has_target_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActivityMetadata_MergeAccounts::clear_target_user_id() {
  target_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_target_user_id();
}
::google::protobuf::int64 ActivityMetadata_MergeAccounts::target_user_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.MergeAccounts.target_user_id)
  return target_user_id_;
}
void ActivityMetadata_MergeAccounts::set_target_user_id(::google::protobuf::int64 value) {
  set_has_target_user_id();
  target_user_id_ = value;
  // @@protoc_insertion_point(field_set:ActivityMetadata.MergeAccounts.target_user_id)
}

inline const ActivityMetadata_MergeAccounts* ActivityMetadata_MergeAccounts::internal_default_instance() {
  return &ActivityMetadata_MergeAccounts_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_PostComment

// optional .CommentId comment_id = 1;
bool ActivityMetadata_PostComment::has_comment_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivityMetadata_PostComment::set_has_comment_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivityMetadata_PostComment::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivityMetadata_PostComment::clear_comment_id() {
  if (comment_id_ != NULL) comment_id_->::CommentId::Clear();
  clear_has_comment_id();
}
const ::CommentId& ActivityMetadata_PostComment::comment_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.PostComment.comment_id)
  return comment_id_ != NULL ? *comment_id_
                         : *::CommentId::internal_default_instance();
}
::CommentId* ActivityMetadata_PostComment::mutable_comment_id() {
  set_has_comment_id();
  if (comment_id_ == NULL) {
    comment_id_ = new ::CommentId;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.PostComment.comment_id)
  return comment_id_;
}
::CommentId* ActivityMetadata_PostComment::release_comment_id() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.PostComment.comment_id)
  clear_has_comment_id();
  ::CommentId* temp = comment_id_;
  comment_id_ = NULL;
  return temp;
}
void ActivityMetadata_PostComment::set_allocated_comment_id(::CommentId* comment_id) {
  delete comment_id_;
  comment_id_ = comment_id;
  if (comment_id) {
    set_has_comment_id();
  } else {
    clear_has_comment_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.PostComment.comment_id)
}

inline const ActivityMetadata_PostComment* ActivityMetadata_PostComment::internal_default_instance() {
  return &ActivityMetadata_PostComment_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_RemoveFollowers

// repeated int64 user_ids = 1;
int ActivityMetadata_RemoveFollowers::user_ids_size() const {
  return user_ids_.size();
}
void ActivityMetadata_RemoveFollowers::clear_user_ids() {
  user_ids_.Clear();
}
::google::protobuf::int64 ActivityMetadata_RemoveFollowers::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.RemoveFollowers.user_ids)
  return user_ids_.Get(index);
}
void ActivityMetadata_RemoveFollowers::set_user_ids(int index, ::google::protobuf::int64 value) {
  user_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ActivityMetadata.RemoveFollowers.user_ids)
}
void ActivityMetadata_RemoveFollowers::add_user_ids(::google::protobuf::int64 value) {
  user_ids_.Add(value);
  // @@protoc_insertion_point(field_add:ActivityMetadata.RemoveFollowers.user_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ActivityMetadata_RemoveFollowers::user_ids() const {
  // @@protoc_insertion_point(field_list:ActivityMetadata.RemoveFollowers.user_ids)
  return user_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ActivityMetadata_RemoveFollowers::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:ActivityMetadata.RemoveFollowers.user_ids)
  return &user_ids_;
}

inline const ActivityMetadata_RemoveFollowers* ActivityMetadata_RemoveFollowers::internal_default_instance() {
  return &ActivityMetadata_RemoveFollowers_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_SavePhotos

// repeated .ActivityMetadata.Episode episodes = 1;
int ActivityMetadata_SavePhotos::episodes_size() const {
  return episodes_.size();
}
void ActivityMetadata_SavePhotos::clear_episodes() {
  episodes_.Clear();
}
const ::ActivityMetadata_Episode& ActivityMetadata_SavePhotos::episodes(int index) const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.SavePhotos.episodes)
  return episodes_.Get(index);
}
::ActivityMetadata_Episode* ActivityMetadata_SavePhotos::mutable_episodes(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.SavePhotos.episodes)
  return episodes_.Mutable(index);
}
::ActivityMetadata_Episode* ActivityMetadata_SavePhotos::add_episodes() {
  // @@protoc_insertion_point(field_add:ActivityMetadata.SavePhotos.episodes)
  return episodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::ActivityMetadata_Episode >*
ActivityMetadata_SavePhotos::mutable_episodes() {
  // @@protoc_insertion_point(field_mutable_list:ActivityMetadata.SavePhotos.episodes)
  return &episodes_;
}
const ::google::protobuf::RepeatedPtrField< ::ActivityMetadata_Episode >&
ActivityMetadata_SavePhotos::episodes() const {
  // @@protoc_insertion_point(field_list:ActivityMetadata.SavePhotos.episodes)
  return episodes_;
}

// optional .ViewpointId viewpoint_id = 2;
bool ActivityMetadata_SavePhotos::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActivityMetadata_SavePhotos::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ActivityMetadata_SavePhotos::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActivityMetadata_SavePhotos::clear_viewpoint_id() {
  if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
  clear_has_viewpoint_id();
}
const ::ViewpointId& ActivityMetadata_SavePhotos::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.SavePhotos.viewpoint_id)
  return viewpoint_id_ != NULL ? *viewpoint_id_
                         : *::ViewpointId::internal_default_instance();
}
::ViewpointId* ActivityMetadata_SavePhotos::mutable_viewpoint_id() {
  set_has_viewpoint_id();
  if (viewpoint_id_ == NULL) {
    viewpoint_id_ = new ::ViewpointId;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.SavePhotos.viewpoint_id)
  return viewpoint_id_;
}
::ViewpointId* ActivityMetadata_SavePhotos::release_viewpoint_id() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.SavePhotos.viewpoint_id)
  clear_has_viewpoint_id();
  ::ViewpointId* temp = viewpoint_id_;
  viewpoint_id_ = NULL;
  return temp;
}
void ActivityMetadata_SavePhotos::set_allocated_viewpoint_id(::ViewpointId* viewpoint_id) {
  delete viewpoint_id_;
  viewpoint_id_ = viewpoint_id;
  if (viewpoint_id) {
    set_has_viewpoint_id();
  } else {
    clear_has_viewpoint_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.SavePhotos.viewpoint_id)
}

inline const ActivityMetadata_SavePhotos* ActivityMetadata_SavePhotos::internal_default_instance() {
  return &ActivityMetadata_SavePhotos_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_ShareNew

// repeated .ActivityMetadata.Episode episodes = 1;
int ActivityMetadata_ShareNew::episodes_size() const {
  return episodes_.size();
}
void ActivityMetadata_ShareNew::clear_episodes() {
  episodes_.Clear();
}
const ::ActivityMetadata_Episode& ActivityMetadata_ShareNew::episodes(int index) const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.ShareNew.episodes)
  return episodes_.Get(index);
}
::ActivityMetadata_Episode* ActivityMetadata_ShareNew::mutable_episodes(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.ShareNew.episodes)
  return episodes_.Mutable(index);
}
::ActivityMetadata_Episode* ActivityMetadata_ShareNew::add_episodes() {
  // @@protoc_insertion_point(field_add:ActivityMetadata.ShareNew.episodes)
  return episodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::ActivityMetadata_Episode >*
ActivityMetadata_ShareNew::mutable_episodes() {
  // @@protoc_insertion_point(field_mutable_list:ActivityMetadata.ShareNew.episodes)
  return &episodes_;
}
const ::google::protobuf::RepeatedPtrField< ::ActivityMetadata_Episode >&
ActivityMetadata_ShareNew::episodes() const {
  // @@protoc_insertion_point(field_list:ActivityMetadata.ShareNew.episodes)
  return episodes_;
}

// repeated .ContactMetadata contacts = 2;
int ActivityMetadata_ShareNew::contacts_size() const {
  return contacts_.size();
}
void ActivityMetadata_ShareNew::clear_contacts() {
  contacts_.Clear();
}
const ::ContactMetadata& ActivityMetadata_ShareNew::contacts(int index) const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.ShareNew.contacts)
  return contacts_.Get(index);
}
::ContactMetadata* ActivityMetadata_ShareNew::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.ShareNew.contacts)
  return contacts_.Mutable(index);
}
::ContactMetadata* ActivityMetadata_ShareNew::add_contacts() {
  // @@protoc_insertion_point(field_add:ActivityMetadata.ShareNew.contacts)
  return contacts_.Add();
}
::google::protobuf::RepeatedPtrField< ::ContactMetadata >*
ActivityMetadata_ShareNew::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:ActivityMetadata.ShareNew.contacts)
  return &contacts_;
}
const ::google::protobuf::RepeatedPtrField< ::ContactMetadata >&
ActivityMetadata_ShareNew::contacts() const {
  // @@protoc_insertion_point(field_list:ActivityMetadata.ShareNew.contacts)
  return contacts_;
}

inline const ActivityMetadata_ShareNew* ActivityMetadata_ShareNew::internal_default_instance() {
  return &ActivityMetadata_ShareNew_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_ShareExisting

// repeated .ActivityMetadata.Episode episodes = 1;
int ActivityMetadata_ShareExisting::episodes_size() const {
  return episodes_.size();
}
void ActivityMetadata_ShareExisting::clear_episodes() {
  episodes_.Clear();
}
const ::ActivityMetadata_Episode& ActivityMetadata_ShareExisting::episodes(int index) const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.ShareExisting.episodes)
  return episodes_.Get(index);
}
::ActivityMetadata_Episode* ActivityMetadata_ShareExisting::mutable_episodes(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.ShareExisting.episodes)
  return episodes_.Mutable(index);
}
::ActivityMetadata_Episode* ActivityMetadata_ShareExisting::add_episodes() {
  // @@protoc_insertion_point(field_add:ActivityMetadata.ShareExisting.episodes)
  return episodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::ActivityMetadata_Episode >*
ActivityMetadata_ShareExisting::mutable_episodes() {
  // @@protoc_insertion_point(field_mutable_list:ActivityMetadata.ShareExisting.episodes)
  return &episodes_;
}
const ::google::protobuf::RepeatedPtrField< ::ActivityMetadata_Episode >&
ActivityMetadata_ShareExisting::episodes() const {
  // @@protoc_insertion_point(field_list:ActivityMetadata.ShareExisting.episodes)
  return episodes_;
}

inline const ActivityMetadata_ShareExisting* ActivityMetadata_ShareExisting::internal_default_instance() {
  return &ActivityMetadata_ShareExisting_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_Unshare

// repeated .ActivityMetadata.Episode episodes = 1;
int ActivityMetadata_Unshare::episodes_size() const {
  return episodes_.size();
}
void ActivityMetadata_Unshare::clear_episodes() {
  episodes_.Clear();
}
const ::ActivityMetadata_Episode& ActivityMetadata_Unshare::episodes(int index) const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.Unshare.episodes)
  return episodes_.Get(index);
}
::ActivityMetadata_Episode* ActivityMetadata_Unshare::mutable_episodes(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.Unshare.episodes)
  return episodes_.Mutable(index);
}
::ActivityMetadata_Episode* ActivityMetadata_Unshare::add_episodes() {
  // @@protoc_insertion_point(field_add:ActivityMetadata.Unshare.episodes)
  return episodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::ActivityMetadata_Episode >*
ActivityMetadata_Unshare::mutable_episodes() {
  // @@protoc_insertion_point(field_mutable_list:ActivityMetadata.Unshare.episodes)
  return &episodes_;
}
const ::google::protobuf::RepeatedPtrField< ::ActivityMetadata_Episode >&
ActivityMetadata_Unshare::episodes() const {
  // @@protoc_insertion_point(field_list:ActivityMetadata.Unshare.episodes)
  return episodes_;
}

inline const ActivityMetadata_Unshare* ActivityMetadata_Unshare::internal_default_instance() {
  return &ActivityMetadata_Unshare_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_UpdateEpisode

// optional .EpisodeId episode_id = 1;
bool ActivityMetadata_UpdateEpisode::has_episode_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivityMetadata_UpdateEpisode::set_has_episode_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivityMetadata_UpdateEpisode::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivityMetadata_UpdateEpisode::clear_episode_id() {
  if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  clear_has_episode_id();
}
const ::EpisodeId& ActivityMetadata_UpdateEpisode::episode_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.UpdateEpisode.episode_id)
  return episode_id_ != NULL ? *episode_id_
                         : *::EpisodeId::internal_default_instance();
}
::EpisodeId* ActivityMetadata_UpdateEpisode::mutable_episode_id() {
  set_has_episode_id();
  if (episode_id_ == NULL) {
    episode_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.UpdateEpisode.episode_id)
  return episode_id_;
}
::EpisodeId* ActivityMetadata_UpdateEpisode::release_episode_id() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.UpdateEpisode.episode_id)
  clear_has_episode_id();
  ::EpisodeId* temp = episode_id_;
  episode_id_ = NULL;
  return temp;
}
void ActivityMetadata_UpdateEpisode::set_allocated_episode_id(::EpisodeId* episode_id) {
  delete episode_id_;
  episode_id_ = episode_id;
  if (episode_id) {
    set_has_episode_id();
  } else {
    clear_has_episode_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.UpdateEpisode.episode_id)
}

inline const ActivityMetadata_UpdateEpisode* ActivityMetadata_UpdateEpisode::internal_default_instance() {
  return &ActivityMetadata_UpdateEpisode_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_UpdateViewpoint

// optional .ViewpointId viewpoint_id = 1;
bool ActivityMetadata_UpdateViewpoint::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivityMetadata_UpdateViewpoint::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivityMetadata_UpdateViewpoint::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivityMetadata_UpdateViewpoint::clear_viewpoint_id() {
  if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
  clear_has_viewpoint_id();
}
const ::ViewpointId& ActivityMetadata_UpdateViewpoint::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.UpdateViewpoint.viewpoint_id)
  return viewpoint_id_ != NULL ? *viewpoint_id_
                         : *::ViewpointId::internal_default_instance();
}
::ViewpointId* ActivityMetadata_UpdateViewpoint::mutable_viewpoint_id() {
  set_has_viewpoint_id();
  if (viewpoint_id_ == NULL) {
    viewpoint_id_ = new ::ViewpointId;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.UpdateViewpoint.viewpoint_id)
  return viewpoint_id_;
}
::ViewpointId* ActivityMetadata_UpdateViewpoint::release_viewpoint_id() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.UpdateViewpoint.viewpoint_id)
  clear_has_viewpoint_id();
  ::ViewpointId* temp = viewpoint_id_;
  viewpoint_id_ = NULL;
  return temp;
}
void ActivityMetadata_UpdateViewpoint::set_allocated_viewpoint_id(::ViewpointId* viewpoint_id) {
  delete viewpoint_id_;
  viewpoint_id_ = viewpoint_id;
  if (viewpoint_id) {
    set_has_viewpoint_id();
  } else {
    clear_has_viewpoint_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.UpdateViewpoint.viewpoint_id)
}

inline const ActivityMetadata_UpdateViewpoint* ActivityMetadata_UpdateViewpoint::internal_default_instance() {
  return &ActivityMetadata_UpdateViewpoint_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata_UploadEpisode

// optional .EpisodeId episode_id = 1;
bool ActivityMetadata_UploadEpisode::has_episode_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivityMetadata_UploadEpisode::set_has_episode_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivityMetadata_UploadEpisode::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivityMetadata_UploadEpisode::clear_episode_id() {
  if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  clear_has_episode_id();
}
const ::EpisodeId& ActivityMetadata_UploadEpisode::episode_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.UploadEpisode.episode_id)
  return episode_id_ != NULL ? *episode_id_
                         : *::EpisodeId::internal_default_instance();
}
::EpisodeId* ActivityMetadata_UploadEpisode::mutable_episode_id() {
  set_has_episode_id();
  if (episode_id_ == NULL) {
    episode_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.UploadEpisode.episode_id)
  return episode_id_;
}
::EpisodeId* ActivityMetadata_UploadEpisode::release_episode_id() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.UploadEpisode.episode_id)
  clear_has_episode_id();
  ::EpisodeId* temp = episode_id_;
  episode_id_ = NULL;
  return temp;
}
void ActivityMetadata_UploadEpisode::set_allocated_episode_id(::EpisodeId* episode_id) {
  delete episode_id_;
  episode_id_ = episode_id;
  if (episode_id) {
    set_has_episode_id();
  } else {
    clear_has_episode_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.UploadEpisode.episode_id)
}

// repeated .PhotoId photo_ids = 2;
int ActivityMetadata_UploadEpisode::photo_ids_size() const {
  return photo_ids_.size();
}
void ActivityMetadata_UploadEpisode::clear_photo_ids() {
  photo_ids_.Clear();
}
const ::PhotoId& ActivityMetadata_UploadEpisode::photo_ids(int index) const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.UploadEpisode.photo_ids)
  return photo_ids_.Get(index);
}
::PhotoId* ActivityMetadata_UploadEpisode::mutable_photo_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.UploadEpisode.photo_ids)
  return photo_ids_.Mutable(index);
}
::PhotoId* ActivityMetadata_UploadEpisode::add_photo_ids() {
  // @@protoc_insertion_point(field_add:ActivityMetadata.UploadEpisode.photo_ids)
  return photo_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::PhotoId >*
ActivityMetadata_UploadEpisode::mutable_photo_ids() {
  // @@protoc_insertion_point(field_mutable_list:ActivityMetadata.UploadEpisode.photo_ids)
  return &photo_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::PhotoId >&
ActivityMetadata_UploadEpisode::photo_ids() const {
  // @@protoc_insertion_point(field_list:ActivityMetadata.UploadEpisode.photo_ids)
  return photo_ids_;
}

inline const ActivityMetadata_UploadEpisode* ActivityMetadata_UploadEpisode::internal_default_instance() {
  return &ActivityMetadata_UploadEpisode_default_instance_.get();
}
// -------------------------------------------------------------------

// ActivityMetadata

// optional .ActivityId activity_id = 1;
bool ActivityMetadata::has_activity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActivityMetadata::set_has_activity_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActivityMetadata::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActivityMetadata::clear_activity_id() {
  if (activity_id_ != NULL) activity_id_->::ActivityId::Clear();
  clear_has_activity_id();
}
const ::ActivityId& ActivityMetadata::activity_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.activity_id)
  return activity_id_ != NULL ? *activity_id_
                         : *::ActivityId::internal_default_instance();
}
::ActivityId* ActivityMetadata::mutable_activity_id() {
  set_has_activity_id();
  if (activity_id_ == NULL) {
    activity_id_ = new ::ActivityId;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.activity_id)
  return activity_id_;
}
::ActivityId* ActivityMetadata::release_activity_id() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.activity_id)
  clear_has_activity_id();
  ::ActivityId* temp = activity_id_;
  activity_id_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_activity_id(::ActivityId* activity_id) {
  delete activity_id_;
  activity_id_ = activity_id;
  if (activity_id) {
    set_has_activity_id();
  } else {
    clear_has_activity_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.activity_id)
}

// optional .ViewpointId viewpoint_id = 2;
bool ActivityMetadata::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActivityMetadata::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ActivityMetadata::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActivityMetadata::clear_viewpoint_id() {
  if (viewpoint_id_ != NULL) viewpoint_id_->::ViewpointId::Clear();
  clear_has_viewpoint_id();
}
const ::ViewpointId& ActivityMetadata::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.viewpoint_id)
  return viewpoint_id_ != NULL ? *viewpoint_id_
                         : *::ViewpointId::internal_default_instance();
}
::ViewpointId* ActivityMetadata::mutable_viewpoint_id() {
  set_has_viewpoint_id();
  if (viewpoint_id_ == NULL) {
    viewpoint_id_ = new ::ViewpointId;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.viewpoint_id)
  return viewpoint_id_;
}
::ViewpointId* ActivityMetadata::release_viewpoint_id() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.viewpoint_id)
  clear_has_viewpoint_id();
  ::ViewpointId* temp = viewpoint_id_;
  viewpoint_id_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_viewpoint_id(::ViewpointId* viewpoint_id) {
  delete viewpoint_id_;
  viewpoint_id_ = viewpoint_id;
  if (viewpoint_id) {
    set_has_viewpoint_id();
  } else {
    clear_has_viewpoint_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.viewpoint_id)
}

// optional int64 user_id = 3;
bool ActivityMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActivityMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ActivityMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActivityMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 ActivityMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.user_id)
  return user_id_;
}
void ActivityMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ActivityMetadata.user_id)
}

// optional double timestamp = 4;
bool ActivityMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ActivityMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void ActivityMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void ActivityMetadata::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double ActivityMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.timestamp)
  return timestamp_;
}
void ActivityMetadata::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ActivityMetadata.timestamp)
}

// optional int64 update_seq = 5;
bool ActivityMetadata::has_update_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ActivityMetadata::set_has_update_seq() {
  _has_bits_[0] |= 0x00000010u;
}
void ActivityMetadata::clear_has_update_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
void ActivityMetadata::clear_update_seq() {
  update_seq_ = GOOGLE_LONGLONG(0);
  clear_has_update_seq();
}
::google::protobuf::int64 ActivityMetadata::update_seq() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.update_seq)
  return update_seq_;
}
void ActivityMetadata::set_update_seq(::google::protobuf::int64 value) {
  set_has_update_seq();
  update_seq_ = value;
  // @@protoc_insertion_point(field_set:ActivityMetadata.update_seq)
}

// optional .QueueMetadata queue = 6;
bool ActivityMetadata::has_queue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ActivityMetadata::set_has_queue() {
  _has_bits_[0] |= 0x00000020u;
}
void ActivityMetadata::clear_has_queue() {
  _has_bits_[0] &= ~0x00000020u;
}
void ActivityMetadata::clear_queue() {
  if (queue_ != NULL) queue_->::QueueMetadata::Clear();
  clear_has_queue();
}
const ::QueueMetadata& ActivityMetadata::queue() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.queue)
  return queue_ != NULL ? *queue_
                         : *::QueueMetadata::internal_default_instance();
}
::QueueMetadata* ActivityMetadata::mutable_queue() {
  set_has_queue();
  if (queue_ == NULL) {
    queue_ = new ::QueueMetadata;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.queue)
  return queue_;
}
::QueueMetadata* ActivityMetadata::release_queue() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.queue)
  clear_has_queue();
  ::QueueMetadata* temp = queue_;
  queue_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_queue(::QueueMetadata* queue) {
  delete queue_;
  queue_ = queue;
  if (queue) {
    set_has_queue();
  } else {
    clear_has_queue();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.queue)
}

// optional .ActivityMetadata.AddFollowers add_followers = 7;
bool ActivityMetadata::has_add_followers() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ActivityMetadata::set_has_add_followers() {
  _has_bits_[0] |= 0x00000040u;
}
void ActivityMetadata::clear_has_add_followers() {
  _has_bits_[0] &= ~0x00000040u;
}
void ActivityMetadata::clear_add_followers() {
  if (add_followers_ != NULL) add_followers_->::ActivityMetadata_AddFollowers::Clear();
  clear_has_add_followers();
}
const ::ActivityMetadata_AddFollowers& ActivityMetadata::add_followers() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.add_followers)
  return add_followers_ != NULL ? *add_followers_
                         : *::ActivityMetadata_AddFollowers::internal_default_instance();
}
::ActivityMetadata_AddFollowers* ActivityMetadata::mutable_add_followers() {
  set_has_add_followers();
  if (add_followers_ == NULL) {
    add_followers_ = new ::ActivityMetadata_AddFollowers;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.add_followers)
  return add_followers_;
}
::ActivityMetadata_AddFollowers* ActivityMetadata::release_add_followers() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.add_followers)
  clear_has_add_followers();
  ::ActivityMetadata_AddFollowers* temp = add_followers_;
  add_followers_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_add_followers(::ActivityMetadata_AddFollowers* add_followers) {
  delete add_followers_;
  add_followers_ = add_followers;
  if (add_followers) {
    set_has_add_followers();
  } else {
    clear_has_add_followers();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.add_followers)
}

// optional .ActivityMetadata.MergeAccounts merge_accounts = 16;
bool ActivityMetadata::has_merge_accounts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ActivityMetadata::set_has_merge_accounts() {
  _has_bits_[0] |= 0x00000080u;
}
void ActivityMetadata::clear_has_merge_accounts() {
  _has_bits_[0] &= ~0x00000080u;
}
void ActivityMetadata::clear_merge_accounts() {
  if (merge_accounts_ != NULL) merge_accounts_->::ActivityMetadata_MergeAccounts::Clear();
  clear_has_merge_accounts();
}
const ::ActivityMetadata_MergeAccounts& ActivityMetadata::merge_accounts() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.merge_accounts)
  return merge_accounts_ != NULL ? *merge_accounts_
                         : *::ActivityMetadata_MergeAccounts::internal_default_instance();
}
::ActivityMetadata_MergeAccounts* ActivityMetadata::mutable_merge_accounts() {
  set_has_merge_accounts();
  if (merge_accounts_ == NULL) {
    merge_accounts_ = new ::ActivityMetadata_MergeAccounts;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.merge_accounts)
  return merge_accounts_;
}
::ActivityMetadata_MergeAccounts* ActivityMetadata::release_merge_accounts() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.merge_accounts)
  clear_has_merge_accounts();
  ::ActivityMetadata_MergeAccounts* temp = merge_accounts_;
  merge_accounts_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_merge_accounts(::ActivityMetadata_MergeAccounts* merge_accounts) {
  delete merge_accounts_;
  merge_accounts_ = merge_accounts;
  if (merge_accounts) {
    set_has_merge_accounts();
  } else {
    clear_has_merge_accounts();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.merge_accounts)
}

// optional .ActivityMetadata.PostComment post_comment = 8;
bool ActivityMetadata::has_post_comment() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ActivityMetadata::set_has_post_comment() {
  _has_bits_[0] |= 0x00000100u;
}
void ActivityMetadata::clear_has_post_comment() {
  _has_bits_[0] &= ~0x00000100u;
}
void ActivityMetadata::clear_post_comment() {
  if (post_comment_ != NULL) post_comment_->::ActivityMetadata_PostComment::Clear();
  clear_has_post_comment();
}
const ::ActivityMetadata_PostComment& ActivityMetadata::post_comment() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.post_comment)
  return post_comment_ != NULL ? *post_comment_
                         : *::ActivityMetadata_PostComment::internal_default_instance();
}
::ActivityMetadata_PostComment* ActivityMetadata::mutable_post_comment() {
  set_has_post_comment();
  if (post_comment_ == NULL) {
    post_comment_ = new ::ActivityMetadata_PostComment;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.post_comment)
  return post_comment_;
}
::ActivityMetadata_PostComment* ActivityMetadata::release_post_comment() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.post_comment)
  clear_has_post_comment();
  ::ActivityMetadata_PostComment* temp = post_comment_;
  post_comment_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_post_comment(::ActivityMetadata_PostComment* post_comment) {
  delete post_comment_;
  post_comment_ = post_comment;
  if (post_comment) {
    set_has_post_comment();
  } else {
    clear_has_post_comment();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.post_comment)
}

// optional .ActivityMetadata.RemoveFollowers remove_followers = 17;
bool ActivityMetadata::has_remove_followers() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ActivityMetadata::set_has_remove_followers() {
  _has_bits_[0] |= 0x00000200u;
}
void ActivityMetadata::clear_has_remove_followers() {
  _has_bits_[0] &= ~0x00000200u;
}
void ActivityMetadata::clear_remove_followers() {
  if (remove_followers_ != NULL) remove_followers_->::ActivityMetadata_RemoveFollowers::Clear();
  clear_has_remove_followers();
}
const ::ActivityMetadata_RemoveFollowers& ActivityMetadata::remove_followers() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.remove_followers)
  return remove_followers_ != NULL ? *remove_followers_
                         : *::ActivityMetadata_RemoveFollowers::internal_default_instance();
}
::ActivityMetadata_RemoveFollowers* ActivityMetadata::mutable_remove_followers() {
  set_has_remove_followers();
  if (remove_followers_ == NULL) {
    remove_followers_ = new ::ActivityMetadata_RemoveFollowers;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.remove_followers)
  return remove_followers_;
}
::ActivityMetadata_RemoveFollowers* ActivityMetadata::release_remove_followers() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.remove_followers)
  clear_has_remove_followers();
  ::ActivityMetadata_RemoveFollowers* temp = remove_followers_;
  remove_followers_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_remove_followers(::ActivityMetadata_RemoveFollowers* remove_followers) {
  delete remove_followers_;
  remove_followers_ = remove_followers;
  if (remove_followers) {
    set_has_remove_followers();
  } else {
    clear_has_remove_followers();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.remove_followers)
}

// optional .ActivityMetadata.SavePhotos save_photos = 15;
bool ActivityMetadata::has_save_photos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ActivityMetadata::set_has_save_photos() {
  _has_bits_[0] |= 0x00000400u;
}
void ActivityMetadata::clear_has_save_photos() {
  _has_bits_[0] &= ~0x00000400u;
}
void ActivityMetadata::clear_save_photos() {
  if (save_photos_ != NULL) save_photos_->::ActivityMetadata_SavePhotos::Clear();
  clear_has_save_photos();
}
const ::ActivityMetadata_SavePhotos& ActivityMetadata::save_photos() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.save_photos)
  return save_photos_ != NULL ? *save_photos_
                         : *::ActivityMetadata_SavePhotos::internal_default_instance();
}
::ActivityMetadata_SavePhotos* ActivityMetadata::mutable_save_photos() {
  set_has_save_photos();
  if (save_photos_ == NULL) {
    save_photos_ = new ::ActivityMetadata_SavePhotos;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.save_photos)
  return save_photos_;
}
::ActivityMetadata_SavePhotos* ActivityMetadata::release_save_photos() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.save_photos)
  clear_has_save_photos();
  ::ActivityMetadata_SavePhotos* temp = save_photos_;
  save_photos_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_save_photos(::ActivityMetadata_SavePhotos* save_photos) {
  delete save_photos_;
  save_photos_ = save_photos;
  if (save_photos) {
    set_has_save_photos();
  } else {
    clear_has_save_photos();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.save_photos)
}

// optional .ActivityMetadata.ShareNew share_new = 9;
bool ActivityMetadata::has_share_new() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ActivityMetadata::set_has_share_new() {
  _has_bits_[0] |= 0x00000800u;
}
void ActivityMetadata::clear_has_share_new() {
  _has_bits_[0] &= ~0x00000800u;
}
void ActivityMetadata::clear_share_new() {
  if (share_new_ != NULL) share_new_->::ActivityMetadata_ShareNew::Clear();
  clear_has_share_new();
}
const ::ActivityMetadata_ShareNew& ActivityMetadata::share_new() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.share_new)
  return share_new_ != NULL ? *share_new_
                         : *::ActivityMetadata_ShareNew::internal_default_instance();
}
::ActivityMetadata_ShareNew* ActivityMetadata::mutable_share_new() {
  set_has_share_new();
  if (share_new_ == NULL) {
    share_new_ = new ::ActivityMetadata_ShareNew;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.share_new)
  return share_new_;
}
::ActivityMetadata_ShareNew* ActivityMetadata::release_share_new() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.share_new)
  clear_has_share_new();
  ::ActivityMetadata_ShareNew* temp = share_new_;
  share_new_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_share_new(::ActivityMetadata_ShareNew* share_new) {
  delete share_new_;
  share_new_ = share_new;
  if (share_new) {
    set_has_share_new();
  } else {
    clear_has_share_new();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.share_new)
}

// optional .ActivityMetadata.ShareExisting share_existing = 10;
bool ActivityMetadata::has_share_existing() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ActivityMetadata::set_has_share_existing() {
  _has_bits_[0] |= 0x00001000u;
}
void ActivityMetadata::clear_has_share_existing() {
  _has_bits_[0] &= ~0x00001000u;
}
void ActivityMetadata::clear_share_existing() {
  if (share_existing_ != NULL) share_existing_->::ActivityMetadata_ShareExisting::Clear();
  clear_has_share_existing();
}
const ::ActivityMetadata_ShareExisting& ActivityMetadata::share_existing() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.share_existing)
  return share_existing_ != NULL ? *share_existing_
                         : *::ActivityMetadata_ShareExisting::internal_default_instance();
}
::ActivityMetadata_ShareExisting* ActivityMetadata::mutable_share_existing() {
  set_has_share_existing();
  if (share_existing_ == NULL) {
    share_existing_ = new ::ActivityMetadata_ShareExisting;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.share_existing)
  return share_existing_;
}
::ActivityMetadata_ShareExisting* ActivityMetadata::release_share_existing() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.share_existing)
  clear_has_share_existing();
  ::ActivityMetadata_ShareExisting* temp = share_existing_;
  share_existing_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_share_existing(::ActivityMetadata_ShareExisting* share_existing) {
  delete share_existing_;
  share_existing_ = share_existing;
  if (share_existing) {
    set_has_share_existing();
  } else {
    clear_has_share_existing();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.share_existing)
}

// optional .ActivityMetadata.Unshare unshare = 11;
bool ActivityMetadata::has_unshare() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ActivityMetadata::set_has_unshare() {
  _has_bits_[0] |= 0x00002000u;
}
void ActivityMetadata::clear_has_unshare() {
  _has_bits_[0] &= ~0x00002000u;
}
void ActivityMetadata::clear_unshare() {
  if (unshare_ != NULL) unshare_->::ActivityMetadata_Unshare::Clear();
  clear_has_unshare();
}
const ::ActivityMetadata_Unshare& ActivityMetadata::unshare() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.unshare)
  return unshare_ != NULL ? *unshare_
                         : *::ActivityMetadata_Unshare::internal_default_instance();
}
::ActivityMetadata_Unshare* ActivityMetadata::mutable_unshare() {
  set_has_unshare();
  if (unshare_ == NULL) {
    unshare_ = new ::ActivityMetadata_Unshare;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.unshare)
  return unshare_;
}
::ActivityMetadata_Unshare* ActivityMetadata::release_unshare() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.unshare)
  clear_has_unshare();
  ::ActivityMetadata_Unshare* temp = unshare_;
  unshare_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_unshare(::ActivityMetadata_Unshare* unshare) {
  delete unshare_;
  unshare_ = unshare;
  if (unshare) {
    set_has_unshare();
  } else {
    clear_has_unshare();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.unshare)
}

// optional .ActivityMetadata.UpdateEpisode update_episode = 12;
bool ActivityMetadata::has_update_episode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ActivityMetadata::set_has_update_episode() {
  _has_bits_[0] |= 0x00004000u;
}
void ActivityMetadata::clear_has_update_episode() {
  _has_bits_[0] &= ~0x00004000u;
}
void ActivityMetadata::clear_update_episode() {
  if (update_episode_ != NULL) update_episode_->::ActivityMetadata_UpdateEpisode::Clear();
  clear_has_update_episode();
}
const ::ActivityMetadata_UpdateEpisode& ActivityMetadata::update_episode() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.update_episode)
  return update_episode_ != NULL ? *update_episode_
                         : *::ActivityMetadata_UpdateEpisode::internal_default_instance();
}
::ActivityMetadata_UpdateEpisode* ActivityMetadata::mutable_update_episode() {
  set_has_update_episode();
  if (update_episode_ == NULL) {
    update_episode_ = new ::ActivityMetadata_UpdateEpisode;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.update_episode)
  return update_episode_;
}
::ActivityMetadata_UpdateEpisode* ActivityMetadata::release_update_episode() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.update_episode)
  clear_has_update_episode();
  ::ActivityMetadata_UpdateEpisode* temp = update_episode_;
  update_episode_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_update_episode(::ActivityMetadata_UpdateEpisode* update_episode) {
  delete update_episode_;
  update_episode_ = update_episode;
  if (update_episode) {
    set_has_update_episode();
  } else {
    clear_has_update_episode();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.update_episode)
}

// optional .ActivityMetadata.UpdateViewpoint update_viewpoint = 13;
bool ActivityMetadata::has_update_viewpoint() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ActivityMetadata::set_has_update_viewpoint() {
  _has_bits_[0] |= 0x00008000u;
}
void ActivityMetadata::clear_has_update_viewpoint() {
  _has_bits_[0] &= ~0x00008000u;
}
void ActivityMetadata::clear_update_viewpoint() {
  if (update_viewpoint_ != NULL) update_viewpoint_->::ActivityMetadata_UpdateViewpoint::Clear();
  clear_has_update_viewpoint();
}
const ::ActivityMetadata_UpdateViewpoint& ActivityMetadata::update_viewpoint() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.update_viewpoint)
  return update_viewpoint_ != NULL ? *update_viewpoint_
                         : *::ActivityMetadata_UpdateViewpoint::internal_default_instance();
}
::ActivityMetadata_UpdateViewpoint* ActivityMetadata::mutable_update_viewpoint() {
  set_has_update_viewpoint();
  if (update_viewpoint_ == NULL) {
    update_viewpoint_ = new ::ActivityMetadata_UpdateViewpoint;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.update_viewpoint)
  return update_viewpoint_;
}
::ActivityMetadata_UpdateViewpoint* ActivityMetadata::release_update_viewpoint() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.update_viewpoint)
  clear_has_update_viewpoint();
  ::ActivityMetadata_UpdateViewpoint* temp = update_viewpoint_;
  update_viewpoint_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_update_viewpoint(::ActivityMetadata_UpdateViewpoint* update_viewpoint) {
  delete update_viewpoint_;
  update_viewpoint_ = update_viewpoint;
  if (update_viewpoint) {
    set_has_update_viewpoint();
  } else {
    clear_has_update_viewpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.update_viewpoint)
}

// optional .ActivityMetadata.UploadEpisode upload_episode = 14;
bool ActivityMetadata::has_upload_episode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ActivityMetadata::set_has_upload_episode() {
  _has_bits_[0] |= 0x00010000u;
}
void ActivityMetadata::clear_has_upload_episode() {
  _has_bits_[0] &= ~0x00010000u;
}
void ActivityMetadata::clear_upload_episode() {
  if (upload_episode_ != NULL) upload_episode_->::ActivityMetadata_UploadEpisode::Clear();
  clear_has_upload_episode();
}
const ::ActivityMetadata_UploadEpisode& ActivityMetadata::upload_episode() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.upload_episode)
  return upload_episode_ != NULL ? *upload_episode_
                         : *::ActivityMetadata_UploadEpisode::internal_default_instance();
}
::ActivityMetadata_UploadEpisode* ActivityMetadata::mutable_upload_episode() {
  set_has_upload_episode();
  if (upload_episode_ == NULL) {
    upload_episode_ = new ::ActivityMetadata_UploadEpisode;
  }
  // @@protoc_insertion_point(field_mutable:ActivityMetadata.upload_episode)
  return upload_episode_;
}
::ActivityMetadata_UploadEpisode* ActivityMetadata::release_upload_episode() {
  // @@protoc_insertion_point(field_release:ActivityMetadata.upload_episode)
  clear_has_upload_episode();
  ::ActivityMetadata_UploadEpisode* temp = upload_episode_;
  upload_episode_ = NULL;
  return temp;
}
void ActivityMetadata::set_allocated_upload_episode(::ActivityMetadata_UploadEpisode* upload_episode) {
  delete upload_episode_;
  upload_episode_ = upload_episode;
  if (upload_episode) {
    set_has_upload_episode();
  } else {
    clear_has_upload_episode();
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityMetadata.upload_episode)
}

// optional bool label_error = 20;
bool ActivityMetadata::has_label_error() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ActivityMetadata::set_has_label_error() {
  _has_bits_[0] |= 0x00020000u;
}
void ActivityMetadata::clear_has_label_error() {
  _has_bits_[0] &= ~0x00020000u;
}
void ActivityMetadata::clear_label_error() {
  label_error_ = false;
  clear_has_label_error();
}
bool ActivityMetadata::label_error() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.label_error)
  return label_error_;
}
void ActivityMetadata::set_label_error(bool value) {
  set_has_label_error();
  label_error_ = value;
  // @@protoc_insertion_point(field_set:ActivityMetadata.label_error)
}

// optional bool provisional = 32;
bool ActivityMetadata::has_provisional() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ActivityMetadata::set_has_provisional() {
  _has_bits_[0] |= 0x00040000u;
}
void ActivityMetadata::clear_has_provisional() {
  _has_bits_[0] &= ~0x00040000u;
}
void ActivityMetadata::clear_provisional() {
  provisional_ = false;
  clear_has_provisional();
}
bool ActivityMetadata::provisional() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.provisional)
  return provisional_;
}
void ActivityMetadata::set_provisional(bool value) {
  set_has_provisional();
  provisional_ = value;
  // @@protoc_insertion_point(field_set:ActivityMetadata.provisional)
}

// optional bool upload_activity = 30;
bool ActivityMetadata::has_upload_activity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ActivityMetadata::set_has_upload_activity() {
  _has_bits_[0] |= 0x00080000u;
}
void ActivityMetadata::clear_has_upload_activity() {
  _has_bits_[0] &= ~0x00080000u;
}
void ActivityMetadata::clear_upload_activity() {
  upload_activity_ = false;
  clear_has_upload_activity();
}
bool ActivityMetadata::upload_activity() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.upload_activity)
  return upload_activity_;
}
void ActivityMetadata::set_upload_activity(bool value) {
  set_has_upload_activity();
  upload_activity_ = value;
  // @@protoc_insertion_point(field_set:ActivityMetadata.upload_activity)
}

// optional double viewed_timestamp = 31;
bool ActivityMetadata::has_viewed_timestamp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ActivityMetadata::set_has_viewed_timestamp() {
  _has_bits_[0] |= 0x00100000u;
}
void ActivityMetadata::clear_has_viewed_timestamp() {
  _has_bits_[0] &= ~0x00100000u;
}
void ActivityMetadata::clear_viewed_timestamp() {
  viewed_timestamp_ = 0;
  clear_has_viewed_timestamp();
}
double ActivityMetadata::viewed_timestamp() const {
  // @@protoc_insertion_point(field_get:ActivityMetadata.viewed_timestamp)
  return viewed_timestamp_;
}
void ActivityMetadata::set_viewed_timestamp(double value) {
  set_has_viewed_timestamp();
  viewed_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ActivityMetadata.viewed_timestamp)
}

inline const ActivityMetadata* ActivityMetadata::internal_default_instance() {
  return &ActivityMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
