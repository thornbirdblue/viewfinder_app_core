// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CookieMetadata.proto

#ifndef PROTOBUF_CookieMetadata_2eproto__INCLUDED
#define PROTOBUF_CookieMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CookieMetadata_2eproto();
void protobuf_InitDefaults_CookieMetadata_2eproto();
void protobuf_AssignDesc_CookieMetadata_2eproto();
void protobuf_ShutdownFile_CookieMetadata_2eproto();

class CookieMetadata;

// ===================================================================

class CookieMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CookieMetadata) */ {
 public:
  CookieMetadata();
  virtual ~CookieMetadata();

  CookieMetadata(const CookieMetadata& from);

  inline CookieMetadata& operator=(const CookieMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CookieMetadata& default_instance();

  static const CookieMetadata* internal_default_instance();

  void Swap(CookieMetadata* other);

  // implements Message ----------------------------------------------

  inline CookieMetadata* New() const { return New(NULL); }

  CookieMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CookieMetadata& from);
  void MergeFrom(const CookieMetadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CookieMetadata* other);
  void UnsafeMergeFrom(const CookieMetadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string comment = 3;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 3;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional string domain = 4;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 4;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // optional int64 expiry_date = 5;
  bool has_expiry_date() const;
  void clear_expiry_date();
  static const int kExpiryDateFieldNumber = 5;
  ::google::protobuf::int64 expiry_date() const;
  void set_expiry_date(::google::protobuf::int64 value);

  // optional string path = 6;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 6;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional int32 version = 7;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional bool is_secure = 8;
  bool has_is_secure() const;
  void clear_is_secure();
  static const int kIsSecureFieldNumber = 8;
  bool is_secure() const;
  void set_is_secure(bool value);

  // @@protoc_insertion_point(class_scope:CookieMetadata)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_expiry_date();
  inline void clear_has_expiry_date();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_is_secure();
  inline void clear_has_is_secure();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int64 expiry_date_;
  ::google::protobuf::int32 version_;
  bool is_secure_;
  friend void  protobuf_InitDefaults_CookieMetadata_2eproto_impl();
  friend void  protobuf_AddDesc_CookieMetadata_2eproto_impl();
  friend void protobuf_AssignDesc_CookieMetadata_2eproto();
  friend void protobuf_ShutdownFile_CookieMetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CookieMetadata> CookieMetadata_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CookieMetadata

// optional string name = 1;
inline bool CookieMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CookieMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CookieMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CookieMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CookieMetadata::name() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.name)
}
inline void CookieMetadata::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.name)
}
inline void CookieMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.name)
}
inline ::std::string* CookieMetadata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookieMetadata::release_name() {
  // @@protoc_insertion_point(field_release:CookieMetadata.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.name)
}

// optional string value = 2;
inline bool CookieMetadata::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CookieMetadata::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CookieMetadata::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CookieMetadata::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CookieMetadata::value() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.value)
}
inline void CookieMetadata::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.value)
}
inline void CookieMetadata::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.value)
}
inline ::std::string* CookieMetadata::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookieMetadata::release_value() {
  // @@protoc_insertion_point(field_release:CookieMetadata.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.value)
}

// optional string comment = 3;
inline bool CookieMetadata::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CookieMetadata::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CookieMetadata::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CookieMetadata::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& CookieMetadata::comment() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.comment)
}
inline void CookieMetadata::set_comment(const char* value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.comment)
}
inline void CookieMetadata::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.comment)
}
inline ::std::string* CookieMetadata::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookieMetadata::release_comment() {
  // @@protoc_insertion_point(field_release:CookieMetadata.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.comment)
}

// optional string domain = 4;
inline bool CookieMetadata::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CookieMetadata::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CookieMetadata::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CookieMetadata::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
inline const ::std::string& CookieMetadata::domain() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.domain)
}
inline void CookieMetadata::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.domain)
}
inline void CookieMetadata::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.domain)
}
inline ::std::string* CookieMetadata::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookieMetadata::release_domain() {
  // @@protoc_insertion_point(field_release:CookieMetadata.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.domain)
}

// optional int64 expiry_date = 5;
inline bool CookieMetadata::has_expiry_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CookieMetadata::set_has_expiry_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CookieMetadata::clear_has_expiry_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CookieMetadata::clear_expiry_date() {
  expiry_date_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_date();
}
inline ::google::protobuf::int64 CookieMetadata::expiry_date() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.expiry_date)
  return expiry_date_;
}
inline void CookieMetadata::set_expiry_date(::google::protobuf::int64 value) {
  set_has_expiry_date();
  expiry_date_ = value;
  // @@protoc_insertion_point(field_set:CookieMetadata.expiry_date)
}

// optional string path = 6;
inline bool CookieMetadata::has_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CookieMetadata::set_has_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CookieMetadata::clear_has_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CookieMetadata::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& CookieMetadata::path() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.path)
}
inline void CookieMetadata::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.path)
}
inline void CookieMetadata::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.path)
}
inline ::std::string* CookieMetadata::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookieMetadata::release_path() {
  // @@protoc_insertion_point(field_release:CookieMetadata.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookieMetadata::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.path)
}

// optional int32 version = 7;
inline bool CookieMetadata::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CookieMetadata::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CookieMetadata::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CookieMetadata::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 CookieMetadata::version() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.version)
  return version_;
}
inline void CookieMetadata::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CookieMetadata.version)
}

// optional bool is_secure = 8;
inline bool CookieMetadata::has_is_secure() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CookieMetadata::set_has_is_secure() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CookieMetadata::clear_has_is_secure() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CookieMetadata::clear_is_secure() {
  is_secure_ = false;
  clear_has_is_secure();
}
inline bool CookieMetadata::is_secure() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.is_secure)
  return is_secure_;
}
inline void CookieMetadata::set_is_secure(bool value) {
  set_has_is_secure();
  is_secure_ = value;
  // @@protoc_insertion_point(field_set:CookieMetadata.is_secure)
}

inline const CookieMetadata* CookieMetadata::internal_default_instance() {
  return &CookieMetadata_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CookieMetadata_2eproto__INCLUDED
