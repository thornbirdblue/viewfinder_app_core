// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlacemarkHistogramEntry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlacemarkHistogramEntry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PlacemarkHistogramEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlacemarkHistogramEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlacemarkHistogramEntry_Sublocality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlacemarkHistogramEntry_Sublocality_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PlacemarkHistogramEntry_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PlacemarkHistogramEntry_2eproto() {
  protobuf_AddDesc_PlacemarkHistogramEntry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PlacemarkHistogramEntry.proto");
  GOOGLE_CHECK(file != NULL);
  PlacemarkHistogramEntry_descriptor_ = file->message_type(0);
  static const int PlacemarkHistogramEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry, placemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry, location_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry, sublocalities_),
  };
  PlacemarkHistogramEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlacemarkHistogramEntry_descriptor_,
      PlacemarkHistogramEntry::internal_default_instance(),
      PlacemarkHistogramEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry, _has_bits_),
      -1,
      -1,
      sizeof(PlacemarkHistogramEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry, _internal_metadata_));
  PlacemarkHistogramEntry_Sublocality_descriptor_ = PlacemarkHistogramEntry_descriptor_->nested_type(0);
  static const int PlacemarkHistogramEntry_Sublocality_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry_Sublocality, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry_Sublocality, count_),
  };
  PlacemarkHistogramEntry_Sublocality_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlacemarkHistogramEntry_Sublocality_descriptor_,
      PlacemarkHistogramEntry_Sublocality::internal_default_instance(),
      PlacemarkHistogramEntry_Sublocality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry_Sublocality, _has_bits_),
      -1,
      -1,
      sizeof(PlacemarkHistogramEntry_Sublocality),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacemarkHistogramEntry_Sublocality, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PlacemarkHistogramEntry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlacemarkHistogramEntry_descriptor_, PlacemarkHistogramEntry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlacemarkHistogramEntry_Sublocality_descriptor_, PlacemarkHistogramEntry_Sublocality::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PlacemarkHistogramEntry_2eproto() {
  PlacemarkHistogramEntry_default_instance_.Shutdown();
  delete PlacemarkHistogramEntry_reflection_;
  PlacemarkHistogramEntry_Sublocality_default_instance_.Shutdown();
  delete PlacemarkHistogramEntry_Sublocality_reflection_;
}

void protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_Location_2eproto();
  ::protobuf_InitDefaults_Placemark_2eproto();
  PlacemarkHistogramEntry_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PlacemarkHistogramEntry_Sublocality_default_instance_.DefaultConstruct();
  PlacemarkHistogramEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  PlacemarkHistogramEntry_Sublocality_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto_once_);
void protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto_once_,
                 &protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto_impl);
}
void protobuf_AddDesc_PlacemarkHistogramEntry_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035PlacemarkHistogramEntry.proto\032\016Locatio"
    "n.proto\032\017Placemark.proto\"\321\001\n\027PlacemarkHi"
    "stogramEntry\022\035\n\tplacemark\030\001 \001(\0132\n.Placem"
    "ark\022\037\n\014location_sum\030\002 \001(\0132\t.Location\022\r\n\005"
    "count\030\003 \001(\005\022;\n\rsublocalities\030\004 \003(\0132$.Pla"
    "cemarkHistogramEntry.Sublocality\032*\n\013Subl"
    "ocality\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 \001(\005B0\n\023"
    "co.viewfinder.protoB\031PlacemarkHistogramE"
    "ntryPB", 326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlacemarkHistogramEntry.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_Location_2eproto();
  ::protobuf_AddDesc_Placemark_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PlacemarkHistogramEntry_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PlacemarkHistogramEntry_2eproto_once_);
void protobuf_AddDesc_PlacemarkHistogramEntry_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PlacemarkHistogramEntry_2eproto_once_,
                 &protobuf_AddDesc_PlacemarkHistogramEntry_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PlacemarkHistogramEntry_2eproto {
  StaticDescriptorInitializer_PlacemarkHistogramEntry_2eproto() {
    protobuf_AddDesc_PlacemarkHistogramEntry_2eproto();
  }
} static_descriptor_initializer_PlacemarkHistogramEntry_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlacemarkHistogramEntry_Sublocality::kNameFieldNumber;
const int PlacemarkHistogramEntry_Sublocality::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlacemarkHistogramEntry_Sublocality::PlacemarkHistogramEntry_Sublocality()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlacemarkHistogramEntry.Sublocality)
}

void PlacemarkHistogramEntry_Sublocality::InitAsDefaultInstance() {
}

PlacemarkHistogramEntry_Sublocality::PlacemarkHistogramEntry_Sublocality(const PlacemarkHistogramEntry_Sublocality& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlacemarkHistogramEntry.Sublocality)
}

void PlacemarkHistogramEntry_Sublocality::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

PlacemarkHistogramEntry_Sublocality::~PlacemarkHistogramEntry_Sublocality() {
  // @@protoc_insertion_point(destructor:PlacemarkHistogramEntry.Sublocality)
  SharedDtor();
}

void PlacemarkHistogramEntry_Sublocality::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlacemarkHistogramEntry_Sublocality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlacemarkHistogramEntry_Sublocality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlacemarkHistogramEntry_Sublocality_descriptor_;
}

const PlacemarkHistogramEntry_Sublocality& PlacemarkHistogramEntry_Sublocality::default_instance() {
  protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PlacemarkHistogramEntry_Sublocality> PlacemarkHistogramEntry_Sublocality_default_instance_;

PlacemarkHistogramEntry_Sublocality* PlacemarkHistogramEntry_Sublocality::New(::google::protobuf::Arena* arena) const {
  PlacemarkHistogramEntry_Sublocality* n = new PlacemarkHistogramEntry_Sublocality;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlacemarkHistogramEntry_Sublocality::Clear() {
// @@protoc_insertion_point(message_clear_start:PlacemarkHistogramEntry.Sublocality)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    count_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlacemarkHistogramEntry_Sublocality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlacemarkHistogramEntry.Sublocality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlacemarkHistogramEntry.Sublocality.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlacemarkHistogramEntry.Sublocality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlacemarkHistogramEntry.Sublocality)
  return false;
#undef DO_
}

void PlacemarkHistogramEntry_Sublocality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlacemarkHistogramEntry.Sublocality)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlacemarkHistogramEntry.Sublocality.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlacemarkHistogramEntry.Sublocality)
}

::google::protobuf::uint8* PlacemarkHistogramEntry_Sublocality::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlacemarkHistogramEntry.Sublocality)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlacemarkHistogramEntry.Sublocality.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlacemarkHistogramEntry.Sublocality)
  return target;
}

size_t PlacemarkHistogramEntry_Sublocality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlacemarkHistogramEntry.Sublocality)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlacemarkHistogramEntry_Sublocality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlacemarkHistogramEntry.Sublocality)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlacemarkHistogramEntry_Sublocality* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlacemarkHistogramEntry_Sublocality>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlacemarkHistogramEntry.Sublocality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlacemarkHistogramEntry.Sublocality)
    UnsafeMergeFrom(*source);
  }
}

void PlacemarkHistogramEntry_Sublocality::MergeFrom(const PlacemarkHistogramEntry_Sublocality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlacemarkHistogramEntry.Sublocality)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PlacemarkHistogramEntry_Sublocality::UnsafeMergeFrom(const PlacemarkHistogramEntry_Sublocality& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PlacemarkHistogramEntry_Sublocality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlacemarkHistogramEntry.Sublocality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlacemarkHistogramEntry_Sublocality::CopyFrom(const PlacemarkHistogramEntry_Sublocality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlacemarkHistogramEntry.Sublocality)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PlacemarkHistogramEntry_Sublocality::IsInitialized() const {

  return true;
}

void PlacemarkHistogramEntry_Sublocality::Swap(PlacemarkHistogramEntry_Sublocality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlacemarkHistogramEntry_Sublocality::InternalSwap(PlacemarkHistogramEntry_Sublocality* other) {
  name_.Swap(&other->name_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlacemarkHistogramEntry_Sublocality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlacemarkHistogramEntry_Sublocality_descriptor_;
  metadata.reflection = PlacemarkHistogramEntry_Sublocality_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlacemarkHistogramEntry::kPlacemarkFieldNumber;
const int PlacemarkHistogramEntry::kLocationSumFieldNumber;
const int PlacemarkHistogramEntry::kCountFieldNumber;
const int PlacemarkHistogramEntry::kSublocalitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlacemarkHistogramEntry::PlacemarkHistogramEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlacemarkHistogramEntry)
}

void PlacemarkHistogramEntry::InitAsDefaultInstance() {
  placemark_ = const_cast< ::Placemark*>(
      ::Placemark::internal_default_instance());
  location_sum_ = const_cast< ::Location*>(
      ::Location::internal_default_instance());
}

PlacemarkHistogramEntry::PlacemarkHistogramEntry(const PlacemarkHistogramEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlacemarkHistogramEntry)
}

void PlacemarkHistogramEntry::SharedCtor() {
  _cached_size_ = 0;
  placemark_ = NULL;
  location_sum_ = NULL;
  count_ = 0;
}

PlacemarkHistogramEntry::~PlacemarkHistogramEntry() {
  // @@protoc_insertion_point(destructor:PlacemarkHistogramEntry)
  SharedDtor();
}

void PlacemarkHistogramEntry::SharedDtor() {
  if (this != &PlacemarkHistogramEntry_default_instance_.get()) {
    delete placemark_;
    delete location_sum_;
  }
}

void PlacemarkHistogramEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlacemarkHistogramEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlacemarkHistogramEntry_descriptor_;
}

const PlacemarkHistogramEntry& PlacemarkHistogramEntry::default_instance() {
  protobuf_InitDefaults_PlacemarkHistogramEntry_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PlacemarkHistogramEntry> PlacemarkHistogramEntry_default_instance_;

PlacemarkHistogramEntry* PlacemarkHistogramEntry::New(::google::protobuf::Arena* arena) const {
  PlacemarkHistogramEntry* n = new PlacemarkHistogramEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlacemarkHistogramEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:PlacemarkHistogramEntry)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_placemark()) {
      if (placemark_ != NULL) placemark_->::Placemark::Clear();
    }
    if (has_location_sum()) {
      if (location_sum_ != NULL) location_sum_->::Location::Clear();
    }
    count_ = 0;
  }
  sublocalities_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlacemarkHistogramEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlacemarkHistogramEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Placemark placemark = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placemark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location_sum;
        break;
      }

      // optional .Location location_sum = 2;
      case 2: {
        if (tag == 18) {
         parse_location_sum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_sum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sublocalities;
        break;
      }

      // repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
      case 4: {
        if (tag == 34) {
         parse_sublocalities:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sublocalities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sublocalities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_sublocalities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlacemarkHistogramEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlacemarkHistogramEntry)
  return false;
#undef DO_
}

void PlacemarkHistogramEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlacemarkHistogramEntry)
  // optional .Placemark placemark = 1;
  if (has_placemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->placemark_, output);
  }

  // optional .Location location_sum = 2;
  if (has_location_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_sum_, output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
  for (unsigned int i = 0, n = this->sublocalities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sublocalities(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlacemarkHistogramEntry)
}

::google::protobuf::uint8* PlacemarkHistogramEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlacemarkHistogramEntry)
  // optional .Placemark placemark = 1;
  if (has_placemark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->placemark_, false, target);
  }

  // optional .Location location_sum = 2;
  if (has_location_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_sum_, false, target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
  for (unsigned int i = 0, n = this->sublocalities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->sublocalities(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlacemarkHistogramEntry)
  return target;
}

size_t PlacemarkHistogramEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlacemarkHistogramEntry)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .Placemark placemark = 1;
    if (has_placemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->placemark_);
    }

    // optional .Location location_sum = 2;
    if (has_location_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_sum_);
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
  {
    unsigned int count = this->sublocalities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sublocalities(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlacemarkHistogramEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlacemarkHistogramEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlacemarkHistogramEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlacemarkHistogramEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlacemarkHistogramEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlacemarkHistogramEntry)
    UnsafeMergeFrom(*source);
  }
}

void PlacemarkHistogramEntry::MergeFrom(const PlacemarkHistogramEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlacemarkHistogramEntry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PlacemarkHistogramEntry::UnsafeMergeFrom(const PlacemarkHistogramEntry& from) {
  GOOGLE_DCHECK(&from != this);
  sublocalities_.MergeFrom(from.sublocalities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_placemark()) {
      mutable_placemark()->::Placemark::MergeFrom(from.placemark());
    }
    if (from.has_location_sum()) {
      mutable_location_sum()->::Location::MergeFrom(from.location_sum());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PlacemarkHistogramEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlacemarkHistogramEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlacemarkHistogramEntry::CopyFrom(const PlacemarkHistogramEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlacemarkHistogramEntry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PlacemarkHistogramEntry::IsInitialized() const {

  return true;
}

void PlacemarkHistogramEntry::Swap(PlacemarkHistogramEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlacemarkHistogramEntry::InternalSwap(PlacemarkHistogramEntry* other) {
  std::swap(placemark_, other->placemark_);
  std::swap(location_sum_, other->location_sum_);
  std::swap(count_, other->count_);
  sublocalities_.UnsafeArenaSwap(&other->sublocalities_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlacemarkHistogramEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlacemarkHistogramEntry_descriptor_;
  metadata.reflection = PlacemarkHistogramEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlacemarkHistogramEntry_Sublocality

// optional string name = 1;
bool PlacemarkHistogramEntry_Sublocality::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlacemarkHistogramEntry_Sublocality::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PlacemarkHistogramEntry_Sublocality::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlacemarkHistogramEntry_Sublocality::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PlacemarkHistogramEntry_Sublocality::name() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.Sublocality.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlacemarkHistogramEntry_Sublocality::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlacemarkHistogramEntry.Sublocality.name)
}
void PlacemarkHistogramEntry_Sublocality::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlacemarkHistogramEntry.Sublocality.name)
}
void PlacemarkHistogramEntry_Sublocality::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlacemarkHistogramEntry.Sublocality.name)
}
::std::string* PlacemarkHistogramEntry_Sublocality::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:PlacemarkHistogramEntry.Sublocality.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlacemarkHistogramEntry_Sublocality::release_name() {
  // @@protoc_insertion_point(field_release:PlacemarkHistogramEntry.Sublocality.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlacemarkHistogramEntry_Sublocality::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlacemarkHistogramEntry.Sublocality.name)
}

// optional int32 count = 2;
bool PlacemarkHistogramEntry_Sublocality::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlacemarkHistogramEntry_Sublocality::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void PlacemarkHistogramEntry_Sublocality::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlacemarkHistogramEntry_Sublocality::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 PlacemarkHistogramEntry_Sublocality::count() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.Sublocality.count)
  return count_;
}
void PlacemarkHistogramEntry_Sublocality::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:PlacemarkHistogramEntry.Sublocality.count)
}

inline const PlacemarkHistogramEntry_Sublocality* PlacemarkHistogramEntry_Sublocality::internal_default_instance() {
  return &PlacemarkHistogramEntry_Sublocality_default_instance_.get();
}
// -------------------------------------------------------------------

// PlacemarkHistogramEntry

// optional .Placemark placemark = 1;
bool PlacemarkHistogramEntry::has_placemark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlacemarkHistogramEntry::set_has_placemark() {
  _has_bits_[0] |= 0x00000001u;
}
void PlacemarkHistogramEntry::clear_has_placemark() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlacemarkHistogramEntry::clear_placemark() {
  if (placemark_ != NULL) placemark_->::Placemark::Clear();
  clear_has_placemark();
}
const ::Placemark& PlacemarkHistogramEntry::placemark() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.placemark)
  return placemark_ != NULL ? *placemark_
                         : *::Placemark::internal_default_instance();
}
::Placemark* PlacemarkHistogramEntry::mutable_placemark() {
  set_has_placemark();
  if (placemark_ == NULL) {
    placemark_ = new ::Placemark;
  }
  // @@protoc_insertion_point(field_mutable:PlacemarkHistogramEntry.placemark)
  return placemark_;
}
::Placemark* PlacemarkHistogramEntry::release_placemark() {
  // @@protoc_insertion_point(field_release:PlacemarkHistogramEntry.placemark)
  clear_has_placemark();
  ::Placemark* temp = placemark_;
  placemark_ = NULL;
  return temp;
}
void PlacemarkHistogramEntry::set_allocated_placemark(::Placemark* placemark) {
  delete placemark_;
  placemark_ = placemark;
  if (placemark) {
    set_has_placemark();
  } else {
    clear_has_placemark();
  }
  // @@protoc_insertion_point(field_set_allocated:PlacemarkHistogramEntry.placemark)
}

// optional .Location location_sum = 2;
bool PlacemarkHistogramEntry::has_location_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlacemarkHistogramEntry::set_has_location_sum() {
  _has_bits_[0] |= 0x00000002u;
}
void PlacemarkHistogramEntry::clear_has_location_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlacemarkHistogramEntry::clear_location_sum() {
  if (location_sum_ != NULL) location_sum_->::Location::Clear();
  clear_has_location_sum();
}
const ::Location& PlacemarkHistogramEntry::location_sum() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.location_sum)
  return location_sum_ != NULL ? *location_sum_
                         : *::Location::internal_default_instance();
}
::Location* PlacemarkHistogramEntry::mutable_location_sum() {
  set_has_location_sum();
  if (location_sum_ == NULL) {
    location_sum_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:PlacemarkHistogramEntry.location_sum)
  return location_sum_;
}
::Location* PlacemarkHistogramEntry::release_location_sum() {
  // @@protoc_insertion_point(field_release:PlacemarkHistogramEntry.location_sum)
  clear_has_location_sum();
  ::Location* temp = location_sum_;
  location_sum_ = NULL;
  return temp;
}
void PlacemarkHistogramEntry::set_allocated_location_sum(::Location* location_sum) {
  delete location_sum_;
  location_sum_ = location_sum;
  if (location_sum) {
    set_has_location_sum();
  } else {
    clear_has_location_sum();
  }
  // @@protoc_insertion_point(field_set_allocated:PlacemarkHistogramEntry.location_sum)
}

// optional int32 count = 3;
bool PlacemarkHistogramEntry::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlacemarkHistogramEntry::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void PlacemarkHistogramEntry::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlacemarkHistogramEntry::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 PlacemarkHistogramEntry::count() const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.count)
  return count_;
}
void PlacemarkHistogramEntry::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:PlacemarkHistogramEntry.count)
}

// repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
int PlacemarkHistogramEntry::sublocalities_size() const {
  return sublocalities_.size();
}
void PlacemarkHistogramEntry::clear_sublocalities() {
  sublocalities_.Clear();
}
const ::PlacemarkHistogramEntry_Sublocality& PlacemarkHistogramEntry::sublocalities(int index) const {
  // @@protoc_insertion_point(field_get:PlacemarkHistogramEntry.sublocalities)
  return sublocalities_.Get(index);
}
::PlacemarkHistogramEntry_Sublocality* PlacemarkHistogramEntry::mutable_sublocalities(int index) {
  // @@protoc_insertion_point(field_mutable:PlacemarkHistogramEntry.sublocalities)
  return sublocalities_.Mutable(index);
}
::PlacemarkHistogramEntry_Sublocality* PlacemarkHistogramEntry::add_sublocalities() {
  // @@protoc_insertion_point(field_add:PlacemarkHistogramEntry.sublocalities)
  return sublocalities_.Add();
}
::google::protobuf::RepeatedPtrField< ::PlacemarkHistogramEntry_Sublocality >*
PlacemarkHistogramEntry::mutable_sublocalities() {
  // @@protoc_insertion_point(field_mutable_list:PlacemarkHistogramEntry.sublocalities)
  return &sublocalities_;
}
const ::google::protobuf::RepeatedPtrField< ::PlacemarkHistogramEntry_Sublocality >&
PlacemarkHistogramEntry::sublocalities() const {
  // @@protoc_insertion_point(field_list:PlacemarkHistogramEntry.sublocalities)
  return sublocalities_;
}

inline const PlacemarkHistogramEntry* PlacemarkHistogramEntry::internal_default_instance() {
  return &PlacemarkHistogramEntry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
