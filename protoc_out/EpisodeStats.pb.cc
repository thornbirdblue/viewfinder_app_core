// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EpisodeStats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EpisodeStats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EpisodeStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EpisodeStats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EpisodeStats_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_EpisodeStats_2eproto() {
  protobuf_AddDesc_EpisodeStats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EpisodeStats.proto");
  GOOGLE_CHECK(file != NULL);
  EpisodeStats_descriptor_ = file->message_type(0);
  static const int EpisodeStats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeStats, hidden_photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeStats, posted_photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeStats, quarantined_photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeStats, removed_photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeStats, unshared_photos_),
  };
  EpisodeStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EpisodeStats_descriptor_,
      EpisodeStats::internal_default_instance(),
      EpisodeStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeStats, _has_bits_),
      -1,
      -1,
      sizeof(EpisodeStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeStats, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EpisodeStats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EpisodeStats_descriptor_, EpisodeStats::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EpisodeStats_2eproto() {
  EpisodeStats_default_instance_.Shutdown();
  delete EpisodeStats_reflection_;
}

void protobuf_InitDefaults_EpisodeStats_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  EpisodeStats_default_instance_.DefaultConstruct();
  EpisodeStats_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_EpisodeStats_2eproto_once_);
void protobuf_InitDefaults_EpisodeStats_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_EpisodeStats_2eproto_once_,
                 &protobuf_InitDefaults_EpisodeStats_2eproto_impl);
}
void protobuf_AddDesc_EpisodeStats_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_EpisodeStats_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022EpisodeStats.proto\"\211\001\n\014EpisodeStats\022\025\n"
    "\rhidden_photos\030\005 \002(\005\022\025\n\rposted_photos\030\001 "
    "\002(\005\022\032\n\022quarantined_photos\030\004 \002(\005\022\026\n\016remov"
    "ed_photos\030\002 \002(\005\022\027\n\017unshared_photos\030\003 \002(\005"
    "B%\n\023co.viewfinder.protoB\016EpisodeStatsPB", 199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EpisodeStats.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EpisodeStats_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EpisodeStats_2eproto_once_);
void protobuf_AddDesc_EpisodeStats_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EpisodeStats_2eproto_once_,
                 &protobuf_AddDesc_EpisodeStats_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EpisodeStats_2eproto {
  StaticDescriptorInitializer_EpisodeStats_2eproto() {
    protobuf_AddDesc_EpisodeStats_2eproto();
  }
} static_descriptor_initializer_EpisodeStats_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpisodeStats::kHiddenPhotosFieldNumber;
const int EpisodeStats::kPostedPhotosFieldNumber;
const int EpisodeStats::kQuarantinedPhotosFieldNumber;
const int EpisodeStats::kRemovedPhotosFieldNumber;
const int EpisodeStats::kUnsharedPhotosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpisodeStats::EpisodeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_EpisodeStats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:EpisodeStats)
}

void EpisodeStats::InitAsDefaultInstance() {
}

EpisodeStats::EpisodeStats(const EpisodeStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EpisodeStats)
}

void EpisodeStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hidden_photos_, 0, reinterpret_cast<char*>(&unshared_photos_) -
    reinterpret_cast<char*>(&hidden_photos_) + sizeof(unshared_photos_));
}

EpisodeStats::~EpisodeStats() {
  // @@protoc_insertion_point(destructor:EpisodeStats)
  SharedDtor();
}

void EpisodeStats::SharedDtor() {
}

void EpisodeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpisodeStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EpisodeStats_descriptor_;
}

const EpisodeStats& EpisodeStats::default_instance() {
  protobuf_InitDefaults_EpisodeStats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EpisodeStats> EpisodeStats_default_instance_;

EpisodeStats* EpisodeStats::New(::google::protobuf::Arena* arena) const {
  EpisodeStats* n = new EpisodeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EpisodeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:EpisodeStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EpisodeStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EpisodeStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(hidden_photos_, unshared_photos_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EpisodeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EpisodeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 posted_photos = 1;
      case 1: {
        if (tag == 8) {
          set_has_posted_photos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posted_photos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_removed_photos;
        break;
      }

      // required int32 removed_photos = 2;
      case 2: {
        if (tag == 16) {
         parse_removed_photos:
          set_has_removed_photos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &removed_photos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unshared_photos;
        break;
      }

      // required int32 unshared_photos = 3;
      case 3: {
        if (tag == 24) {
         parse_unshared_photos:
          set_has_unshared_photos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unshared_photos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quarantined_photos;
        break;
      }

      // required int32 quarantined_photos = 4;
      case 4: {
        if (tag == 32) {
         parse_quarantined_photos:
          set_has_quarantined_photos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quarantined_photos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hidden_photos;
        break;
      }

      // required int32 hidden_photos = 5;
      case 5: {
        if (tag == 40) {
         parse_hidden_photos:
          set_has_hidden_photos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hidden_photos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EpisodeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EpisodeStats)
  return false;
#undef DO_
}

void EpisodeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EpisodeStats)
  // required int32 posted_photos = 1;
  if (has_posted_photos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posted_photos(), output);
  }

  // required int32 removed_photos = 2;
  if (has_removed_photos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->removed_photos(), output);
  }

  // required int32 unshared_photos = 3;
  if (has_unshared_photos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unshared_photos(), output);
  }

  // required int32 quarantined_photos = 4;
  if (has_quarantined_photos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quarantined_photos(), output);
  }

  // required int32 hidden_photos = 5;
  if (has_hidden_photos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hidden_photos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EpisodeStats)
}

::google::protobuf::uint8* EpisodeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EpisodeStats)
  // required int32 posted_photos = 1;
  if (has_posted_photos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posted_photos(), target);
  }

  // required int32 removed_photos = 2;
  if (has_removed_photos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->removed_photos(), target);
  }

  // required int32 unshared_photos = 3;
  if (has_unshared_photos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unshared_photos(), target);
  }

  // required int32 quarantined_photos = 4;
  if (has_quarantined_photos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quarantined_photos(), target);
  }

  // required int32 hidden_photos = 5;
  if (has_hidden_photos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hidden_photos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EpisodeStats)
  return target;
}

size_t EpisodeStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EpisodeStats)
  size_t total_size = 0;

  if (has_hidden_photos()) {
    // required int32 hidden_photos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hidden_photos());
  }

  if (has_posted_photos()) {
    // required int32 posted_photos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posted_photos());
  }

  if (has_quarantined_photos()) {
    // required int32 quarantined_photos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quarantined_photos());
  }

  if (has_removed_photos()) {
    // required int32 removed_photos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->removed_photos());
  }

  if (has_unshared_photos()) {
    // required int32 unshared_photos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unshared_photos());
  }

  return total_size;
}
size_t EpisodeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EpisodeStats)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 hidden_photos = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hidden_photos());

    // required int32 posted_photos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posted_photos());

    // required int32 quarantined_photos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quarantined_photos());

    // required int32 removed_photos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->removed_photos());

    // required int32 unshared_photos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unshared_photos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpisodeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EpisodeStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EpisodeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpisodeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EpisodeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EpisodeStats)
    UnsafeMergeFrom(*source);
  }
}

void EpisodeStats::MergeFrom(const EpisodeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EpisodeStats)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EpisodeStats::UnsafeMergeFrom(const EpisodeStats& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hidden_photos()) {
      set_hidden_photos(from.hidden_photos());
    }
    if (from.has_posted_photos()) {
      set_posted_photos(from.posted_photos());
    }
    if (from.has_quarantined_photos()) {
      set_quarantined_photos(from.quarantined_photos());
    }
    if (from.has_removed_photos()) {
      set_removed_photos(from.removed_photos());
    }
    if (from.has_unshared_photos()) {
      set_unshared_photos(from.unshared_photos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EpisodeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EpisodeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpisodeStats::CopyFrom(const EpisodeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EpisodeStats)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EpisodeStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void EpisodeStats::Swap(EpisodeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpisodeStats::InternalSwap(EpisodeStats* other) {
  std::swap(hidden_photos_, other->hidden_photos_);
  std::swap(posted_photos_, other->posted_photos_);
  std::swap(quarantined_photos_, other->quarantined_photos_);
  std::swap(removed_photos_, other->removed_photos_);
  std::swap(unshared_photos_, other->unshared_photos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EpisodeStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EpisodeStats_descriptor_;
  metadata.reflection = EpisodeStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EpisodeStats

// required int32 hidden_photos = 5;
bool EpisodeStats::has_hidden_photos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EpisodeStats::set_has_hidden_photos() {
  _has_bits_[0] |= 0x00000001u;
}
void EpisodeStats::clear_has_hidden_photos() {
  _has_bits_[0] &= ~0x00000001u;
}
void EpisodeStats::clear_hidden_photos() {
  hidden_photos_ = 0;
  clear_has_hidden_photos();
}
::google::protobuf::int32 EpisodeStats::hidden_photos() const {
  // @@protoc_insertion_point(field_get:EpisodeStats.hidden_photos)
  return hidden_photos_;
}
void EpisodeStats::set_hidden_photos(::google::protobuf::int32 value) {
  set_has_hidden_photos();
  hidden_photos_ = value;
  // @@protoc_insertion_point(field_set:EpisodeStats.hidden_photos)
}

// required int32 posted_photos = 1;
bool EpisodeStats::has_posted_photos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EpisodeStats::set_has_posted_photos() {
  _has_bits_[0] |= 0x00000002u;
}
void EpisodeStats::clear_has_posted_photos() {
  _has_bits_[0] &= ~0x00000002u;
}
void EpisodeStats::clear_posted_photos() {
  posted_photos_ = 0;
  clear_has_posted_photos();
}
::google::protobuf::int32 EpisodeStats::posted_photos() const {
  // @@protoc_insertion_point(field_get:EpisodeStats.posted_photos)
  return posted_photos_;
}
void EpisodeStats::set_posted_photos(::google::protobuf::int32 value) {
  set_has_posted_photos();
  posted_photos_ = value;
  // @@protoc_insertion_point(field_set:EpisodeStats.posted_photos)
}

// required int32 quarantined_photos = 4;
bool EpisodeStats::has_quarantined_photos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EpisodeStats::set_has_quarantined_photos() {
  _has_bits_[0] |= 0x00000004u;
}
void EpisodeStats::clear_has_quarantined_photos() {
  _has_bits_[0] &= ~0x00000004u;
}
void EpisodeStats::clear_quarantined_photos() {
  quarantined_photos_ = 0;
  clear_has_quarantined_photos();
}
::google::protobuf::int32 EpisodeStats::quarantined_photos() const {
  // @@protoc_insertion_point(field_get:EpisodeStats.quarantined_photos)
  return quarantined_photos_;
}
void EpisodeStats::set_quarantined_photos(::google::protobuf::int32 value) {
  set_has_quarantined_photos();
  quarantined_photos_ = value;
  // @@protoc_insertion_point(field_set:EpisodeStats.quarantined_photos)
}

// required int32 removed_photos = 2;
bool EpisodeStats::has_removed_photos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EpisodeStats::set_has_removed_photos() {
  _has_bits_[0] |= 0x00000008u;
}
void EpisodeStats::clear_has_removed_photos() {
  _has_bits_[0] &= ~0x00000008u;
}
void EpisodeStats::clear_removed_photos() {
  removed_photos_ = 0;
  clear_has_removed_photos();
}
::google::protobuf::int32 EpisodeStats::removed_photos() const {
  // @@protoc_insertion_point(field_get:EpisodeStats.removed_photos)
  return removed_photos_;
}
void EpisodeStats::set_removed_photos(::google::protobuf::int32 value) {
  set_has_removed_photos();
  removed_photos_ = value;
  // @@protoc_insertion_point(field_set:EpisodeStats.removed_photos)
}

// required int32 unshared_photos = 3;
bool EpisodeStats::has_unshared_photos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EpisodeStats::set_has_unshared_photos() {
  _has_bits_[0] |= 0x00000010u;
}
void EpisodeStats::clear_has_unshared_photos() {
  _has_bits_[0] &= ~0x00000010u;
}
void EpisodeStats::clear_unshared_photos() {
  unshared_photos_ = 0;
  clear_has_unshared_photos();
}
::google::protobuf::int32 EpisodeStats::unshared_photos() const {
  // @@protoc_insertion_point(field_get:EpisodeStats.unshared_photos)
  return unshared_photos_;
}
void EpisodeStats::set_unshared_photos(::google::protobuf::int32 value) {
  set_has_unshared_photos();
  unshared_photos_ = value;
  // @@protoc_insertion_point(field_set:EpisodeStats.unshared_photos)
}

inline const EpisodeStats* EpisodeStats::internal_default_instance() {
  return &EpisodeStats_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
