// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContentIds.proto

#ifndef PROTOBUF_ContentIds_2eproto__INCLUDED
#define PROTOBUF_ContentIds_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ContentIds_2eproto();
void protobuf_InitDefaults_ContentIds_2eproto();
void protobuf_AssignDesc_ContentIds_2eproto();
void protobuf_ShutdownFile_ContentIds_2eproto();

class ActivityId;
class CommentId;
class EpisodeId;
class PhotoId;
class ViewpointId;

// ===================================================================

class ActivityId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ActivityId) */ {
 public:
  ActivityId();
  virtual ~ActivityId();

  ActivityId(const ActivityId& from);

  inline ActivityId& operator=(const ActivityId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityId& default_instance();

  static const ActivityId* internal_default_instance();

  void Swap(ActivityId* other);

  // implements Message ----------------------------------------------

  inline ActivityId* New() const { return New(NULL); }

  ActivityId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityId& from);
  void MergeFrom(const ActivityId& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityId* other);
  void UnsafeMergeFrom(const ActivityId& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 local_id = 1;
  bool has_local_id() const;
  void clear_local_id();
  static const int kLocalIdFieldNumber = 1;
  ::google::protobuf::int64 local_id() const;
  void set_local_id(::google::protobuf::int64 value);

  // optional string server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:ActivityId)
 private:
  inline void set_has_local_id();
  inline void clear_has_local_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::int64 local_id_;
  friend void  protobuf_InitDefaults_ContentIds_2eproto_impl();
  friend void  protobuf_AddDesc_ContentIds_2eproto_impl();
  friend void protobuf_AssignDesc_ContentIds_2eproto();
  friend void protobuf_ShutdownFile_ContentIds_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ActivityId> ActivityId_default_instance_;

// -------------------------------------------------------------------

class CommentId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommentId) */ {
 public:
  CommentId();
  virtual ~CommentId();

  CommentId(const CommentId& from);

  inline CommentId& operator=(const CommentId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommentId& default_instance();

  static const CommentId* internal_default_instance();

  void Swap(CommentId* other);

  // implements Message ----------------------------------------------

  inline CommentId* New() const { return New(NULL); }

  CommentId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommentId& from);
  void MergeFrom(const CommentId& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommentId* other);
  void UnsafeMergeFrom(const CommentId& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 local_id = 1;
  bool has_local_id() const;
  void clear_local_id();
  static const int kLocalIdFieldNumber = 1;
  ::google::protobuf::int64 local_id() const;
  void set_local_id(::google::protobuf::int64 value);

  // optional string server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:CommentId)
 private:
  inline void set_has_local_id();
  inline void clear_has_local_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::int64 local_id_;
  friend void  protobuf_InitDefaults_ContentIds_2eproto_impl();
  friend void  protobuf_AddDesc_ContentIds_2eproto_impl();
  friend void protobuf_AssignDesc_ContentIds_2eproto();
  friend void protobuf_ShutdownFile_ContentIds_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CommentId> CommentId_default_instance_;

// -------------------------------------------------------------------

class EpisodeId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EpisodeId) */ {
 public:
  EpisodeId();
  virtual ~EpisodeId();

  EpisodeId(const EpisodeId& from);

  inline EpisodeId& operator=(const EpisodeId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EpisodeId& default_instance();

  static const EpisodeId* internal_default_instance();

  void Swap(EpisodeId* other);

  // implements Message ----------------------------------------------

  inline EpisodeId* New() const { return New(NULL); }

  EpisodeId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EpisodeId& from);
  void MergeFrom(const EpisodeId& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EpisodeId* other);
  void UnsafeMergeFrom(const EpisodeId& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 local_id = 1;
  bool has_local_id() const;
  void clear_local_id();
  static const int kLocalIdFieldNumber = 1;
  ::google::protobuf::int64 local_id() const;
  void set_local_id(::google::protobuf::int64 value);

  // optional string server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:EpisodeId)
 private:
  inline void set_has_local_id();
  inline void clear_has_local_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::int64 local_id_;
  friend void  protobuf_InitDefaults_ContentIds_2eproto_impl();
  friend void  protobuf_AddDesc_ContentIds_2eproto_impl();
  friend void protobuf_AssignDesc_ContentIds_2eproto();
  friend void protobuf_ShutdownFile_ContentIds_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EpisodeId> EpisodeId_default_instance_;

// -------------------------------------------------------------------

class PhotoId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PhotoId) */ {
 public:
  PhotoId();
  virtual ~PhotoId();

  PhotoId(const PhotoId& from);

  inline PhotoId& operator=(const PhotoId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoId& default_instance();

  static const PhotoId* internal_default_instance();

  void Swap(PhotoId* other);

  // implements Message ----------------------------------------------

  inline PhotoId* New() const { return New(NULL); }

  PhotoId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoId& from);
  void MergeFrom(const PhotoId& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhotoId* other);
  void UnsafeMergeFrom(const PhotoId& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 local_id = 1;
  bool has_local_id() const;
  void clear_local_id();
  static const int kLocalIdFieldNumber = 1;
  ::google::protobuf::int64 local_id() const;
  void set_local_id(::google::protobuf::int64 value);

  // optional string server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // optional string DEPRECATED_asset_key = 3;
  bool has_deprecated_asset_key() const;
  void clear_deprecated_asset_key();
  static const int kDEPRECATEDAssetKeyFieldNumber = 3;
  const ::std::string& deprecated_asset_key() const;
  void set_deprecated_asset_key(const ::std::string& value);
  void set_deprecated_asset_key(const char* value);
  void set_deprecated_asset_key(const char* value, size_t size);
  ::std::string* mutable_deprecated_asset_key();
  ::std::string* release_deprecated_asset_key();
  void set_allocated_deprecated_asset_key(::std::string* deprecated_asset_key);

  // @@protoc_insertion_point(class_scope:PhotoId)
 private:
  inline void set_has_local_id();
  inline void clear_has_local_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_deprecated_asset_key();
  inline void clear_has_deprecated_asset_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr deprecated_asset_key_;
  ::google::protobuf::int64 local_id_;
  friend void  protobuf_InitDefaults_ContentIds_2eproto_impl();
  friend void  protobuf_AddDesc_ContentIds_2eproto_impl();
  friend void protobuf_AssignDesc_ContentIds_2eproto();
  friend void protobuf_ShutdownFile_ContentIds_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PhotoId> PhotoId_default_instance_;

// -------------------------------------------------------------------

class ViewpointId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ViewpointId) */ {
 public:
  ViewpointId();
  virtual ~ViewpointId();

  ViewpointId(const ViewpointId& from);

  inline ViewpointId& operator=(const ViewpointId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewpointId& default_instance();

  static const ViewpointId* internal_default_instance();

  void Swap(ViewpointId* other);

  // implements Message ----------------------------------------------

  inline ViewpointId* New() const { return New(NULL); }

  ViewpointId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewpointId& from);
  void MergeFrom(const ViewpointId& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ViewpointId* other);
  void UnsafeMergeFrom(const ViewpointId& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 local_id = 1;
  bool has_local_id() const;
  void clear_local_id();
  static const int kLocalIdFieldNumber = 1;
  ::google::protobuf::int64 local_id() const;
  void set_local_id(::google::protobuf::int64 value);

  // optional string server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:ViewpointId)
 private:
  inline void set_has_local_id();
  inline void clear_has_local_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::int64 local_id_;
  friend void  protobuf_InitDefaults_ContentIds_2eproto_impl();
  friend void  protobuf_AddDesc_ContentIds_2eproto_impl();
  friend void protobuf_AssignDesc_ContentIds_2eproto();
  friend void protobuf_ShutdownFile_ContentIds_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ViewpointId> ViewpointId_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityId

// optional int64 local_id = 1;
inline bool ActivityId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
inline ::google::protobuf::int64 ActivityId::local_id() const {
  // @@protoc_insertion_point(field_get:ActivityId.local_id)
  return local_id_;
}
inline void ActivityId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:ActivityId.local_id)
}

// optional string server_id = 2;
inline bool ActivityId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& ActivityId::server_id() const {
  // @@protoc_insertion_point(field_get:ActivityId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ActivityId.server_id)
}
inline void ActivityId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActivityId.server_id)
}
inline void ActivityId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActivityId.server_id)
}
inline ::std::string* ActivityId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:ActivityId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActivityId::release_server_id() {
  // @@protoc_insertion_point(field_release:ActivityId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:ActivityId.server_id)
}

inline const ActivityId* ActivityId::internal_default_instance() {
  return &ActivityId_default_instance_.get();
}
// -------------------------------------------------------------------

// CommentId

// optional int64 local_id = 1;
inline bool CommentId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommentId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommentId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommentId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
inline ::google::protobuf::int64 CommentId::local_id() const {
  // @@protoc_insertion_point(field_get:CommentId.local_id)
  return local_id_;
}
inline void CommentId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:CommentId.local_id)
}

// optional string server_id = 2;
inline bool CommentId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommentId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommentId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommentId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& CommentId::server_id() const {
  // @@protoc_insertion_point(field_get:CommentId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommentId.server_id)
}
inline void CommentId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommentId.server_id)
}
inline void CommentId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommentId.server_id)
}
inline ::std::string* CommentId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:CommentId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommentId::release_server_id() {
  // @@protoc_insertion_point(field_release:CommentId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:CommentId.server_id)
}

inline const CommentId* CommentId::internal_default_instance() {
  return &CommentId_default_instance_.get();
}
// -------------------------------------------------------------------

// EpisodeId

// optional int64 local_id = 1;
inline bool EpisodeId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EpisodeId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EpisodeId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EpisodeId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
inline ::google::protobuf::int64 EpisodeId::local_id() const {
  // @@protoc_insertion_point(field_get:EpisodeId.local_id)
  return local_id_;
}
inline void EpisodeId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:EpisodeId.local_id)
}

// optional string server_id = 2;
inline bool EpisodeId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EpisodeId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EpisodeId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EpisodeId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& EpisodeId::server_id() const {
  // @@protoc_insertion_point(field_get:EpisodeId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EpisodeId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeId.server_id)
}
inline void EpisodeId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeId.server_id)
}
inline void EpisodeId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeId.server_id)
}
inline ::std::string* EpisodeId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:EpisodeId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EpisodeId::release_server_id() {
  // @@protoc_insertion_point(field_release:EpisodeId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EpisodeId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:EpisodeId.server_id)
}

inline const EpisodeId* EpisodeId::internal_default_instance() {
  return &EpisodeId_default_instance_.get();
}
// -------------------------------------------------------------------

// PhotoId

// optional int64 local_id = 1;
inline bool PhotoId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
inline ::google::protobuf::int64 PhotoId::local_id() const {
  // @@protoc_insertion_point(field_get:PhotoId.local_id)
  return local_id_;
}
inline void PhotoId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:PhotoId.local_id)
}

// optional string server_id = 2;
inline bool PhotoId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& PhotoId::server_id() const {
  // @@protoc_insertion_point(field_get:PhotoId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoId.server_id)
}
inline void PhotoId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoId.server_id)
}
inline void PhotoId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoId.server_id)
}
inline ::std::string* PhotoId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:PhotoId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhotoId::release_server_id() {
  // @@protoc_insertion_point(field_release:PhotoId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:PhotoId.server_id)
}

// optional string DEPRECATED_asset_key = 3;
inline bool PhotoId::has_deprecated_asset_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhotoId::set_has_deprecated_asset_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhotoId::clear_has_deprecated_asset_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhotoId::clear_deprecated_asset_key() {
  deprecated_asset_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_asset_key();
}
inline const ::std::string& PhotoId::deprecated_asset_key() const {
  // @@protoc_insertion_point(field_get:PhotoId.DEPRECATED_asset_key)
  return deprecated_asset_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoId::set_deprecated_asset_key(const ::std::string& value) {
  set_has_deprecated_asset_key();
  deprecated_asset_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhotoId.DEPRECATED_asset_key)
}
inline void PhotoId::set_deprecated_asset_key(const char* value) {
  set_has_deprecated_asset_key();
  deprecated_asset_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhotoId.DEPRECATED_asset_key)
}
inline void PhotoId::set_deprecated_asset_key(const char* value, size_t size) {
  set_has_deprecated_asset_key();
  deprecated_asset_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhotoId.DEPRECATED_asset_key)
}
inline ::std::string* PhotoId::mutable_deprecated_asset_key() {
  set_has_deprecated_asset_key();
  // @@protoc_insertion_point(field_mutable:PhotoId.DEPRECATED_asset_key)
  return deprecated_asset_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhotoId::release_deprecated_asset_key() {
  // @@protoc_insertion_point(field_release:PhotoId.DEPRECATED_asset_key)
  clear_has_deprecated_asset_key();
  return deprecated_asset_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoId::set_allocated_deprecated_asset_key(::std::string* deprecated_asset_key) {
  if (deprecated_asset_key != NULL) {
    set_has_deprecated_asset_key();
  } else {
    clear_has_deprecated_asset_key();
  }
  deprecated_asset_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_asset_key);
  // @@protoc_insertion_point(field_set_allocated:PhotoId.DEPRECATED_asset_key)
}

inline const PhotoId* PhotoId::internal_default_instance() {
  return &PhotoId_default_instance_.get();
}
// -------------------------------------------------------------------

// ViewpointId

// optional int64 local_id = 1;
inline bool ViewpointId::has_local_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewpointId::set_has_local_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewpointId::clear_has_local_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewpointId::clear_local_id() {
  local_id_ = GOOGLE_LONGLONG(0);
  clear_has_local_id();
}
inline ::google::protobuf::int64 ViewpointId::local_id() const {
  // @@protoc_insertion_point(field_get:ViewpointId.local_id)
  return local_id_;
}
inline void ViewpointId::set_local_id(::google::protobuf::int64 value) {
  set_has_local_id();
  local_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointId.local_id)
}

// optional string server_id = 2;
inline bool ViewpointId::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewpointId::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewpointId::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewpointId::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& ViewpointId::server_id() const {
  // @@protoc_insertion_point(field_get:ViewpointId.server_id)
  return server_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointId::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointId.server_id)
}
inline void ViewpointId::set_server_id(const char* value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointId.server_id)
}
inline void ViewpointId::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointId.server_id)
}
inline ::std::string* ViewpointId::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:ViewpointId.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewpointId::release_server_id() {
  // @@protoc_insertion_point(field_release:ViewpointId.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewpointId::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:ViewpointId.server_id)
}

inline const ViewpointId* ViewpointId::internal_default_instance() {
  return &ViewpointId_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ContentIds_2eproto__INCLUDED
