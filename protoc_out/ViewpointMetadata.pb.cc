// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ViewpointMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ViewpointMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CoverPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoverPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewpointMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewpointMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ViewpointMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ViewpointMetadata_2eproto() {
  protobuf_AddDesc_ViewpointMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ViewpointMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  CoverPhoto_descriptor_ = file->message_type(0);
  static const int CoverPhoto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverPhoto, photo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverPhoto, episode_id_),
  };
  CoverPhoto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoverPhoto_descriptor_,
      CoverPhoto::internal_default_instance(),
      CoverPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverPhoto, _has_bits_),
      -1,
      -1,
      sizeof(CoverPhoto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoverPhoto, _internal_metadata_));
  ViewpointMetadata_descriptor_ = file->message_type(1);
  static const int ViewpointMetadata_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, sharing_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, cover_photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, update_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, viewed_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, label_admin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, label_autosave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, label_contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, deprecated_label_personal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, label_hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, label_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, label_muted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, label_unrevivable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, label_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, provisional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, update_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, update_follower_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, update_remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, update_viewed_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, indexed_terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, deprecated_last_viewed_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, decprecated_last_viewed_timestamp_),
  };
  ViewpointMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ViewpointMetadata_descriptor_,
      ViewpointMetadata::internal_default_instance(),
      ViewpointMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, _has_bits_),
      -1,
      -1,
      sizeof(ViewpointMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointMetadata, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ViewpointMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoverPhoto_descriptor_, CoverPhoto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ViewpointMetadata_descriptor_, ViewpointMetadata::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ViewpointMetadata_2eproto() {
  CoverPhoto_default_instance_.Shutdown();
  delete CoverPhoto_reflection_;
  ViewpointMetadata_default_instance_.Shutdown();
  delete ViewpointMetadata_reflection_;
}

void protobuf_InitDefaults_ViewpointMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_ContentIds_2eproto();
  ::protobuf_InitDefaults_QueueMetadata_2eproto();
  CoverPhoto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ViewpointMetadata_default_instance_.DefaultConstruct();
  CoverPhoto_default_instance_.get_mutable()->InitAsDefaultInstance();
  ViewpointMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ViewpointMetadata_2eproto_once_);
void protobuf_InitDefaults_ViewpointMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ViewpointMetadata_2eproto_once_,
                 &protobuf_InitDefaults_ViewpointMetadata_2eproto_impl);
}
void protobuf_AddDesc_ViewpointMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ViewpointMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ViewpointMetadata.proto\032\020ContentIds.pr"
    "oto\032\023QueueMetadata.proto\"H\n\nCoverPhoto\022\032"
    "\n\010photo_id\030\001 \001(\0132\010.PhotoId\022\036\n\nepisode_id"
    "\030\002 \001(\0132\n.EpisodeId\"\304\005\n\021ViewpointMetadata"
    "\022\030\n\002id\030\001 \001(\0132\014.ViewpointId\022\017\n\007user_id\030\002 "
    "\001(\003\022\027\n\017sharing_user_id\030\003 \001(\003\022\r\n\005title\030\004 "
    "\001(\t\022\023\n\013description\030\005 \001(\t\022\014\n\004name\030\006 \001(\t\022 "
    "\n\013cover_photo\030\013 \001(\0132\013.CoverPhoto\022\014\n\004type"
    "\030\007 \001(\t\022\022\n\nupdate_seq\030\010 \001(\003\022\022\n\nviewed_seq"
    "\030\t \001(\003\022\035\n\005queue\030\n \001(\0132\016.QueueMetadata\022\023\n"
    "\013label_admin\030\024 \001(\010\022\026\n\016label_autosave\030\032 \001"
    "(\010\022\030\n\020label_contribute\030\025 \001(\010\022!\n\031DEPRECAT"
    "ED_label_personal\030\026 \001(\010\022\024\n\014label_hidden\030"
    "\027 \001(\010\022\025\n\rlabel_removed\030\030 \001(\010\022\023\n\013label_mu"
    "ted\030\031 \001(\010\022\031\n\021label_unrevivable\030\033 \001(\010\022\023\n\013"
    "label_error\030\036 \001(\010\022\023\n\013provisional\030- \001(\010\022\027"
    "\n\017update_metadata\030( \001(\010\022 \n\030update_follow"
    "er_metadata\030) \001(\010\022\025\n\rupdate_remove\030, \001(\010"
    "\022\031\n\021update_viewed_seq\030/ \001(\010\022\025\n\rindexed_t"
    "erms\030. \003(\t\022\"\n\032DEPRECATED_last_viewed_seq"
    "\030* \001(\003\022)\n!DECPRECATED_last_viewed_timest"
    "amp\030+ \001(\001B*\n\023co.viewfinder.protoB\023Viewpo"
    "intMetadataPB", 893);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ViewpointMetadata.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_ContentIds_2eproto();
  ::protobuf_AddDesc_QueueMetadata_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ViewpointMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ViewpointMetadata_2eproto_once_);
void protobuf_AddDesc_ViewpointMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ViewpointMetadata_2eproto_once_,
                 &protobuf_AddDesc_ViewpointMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ViewpointMetadata_2eproto {
  StaticDescriptorInitializer_ViewpointMetadata_2eproto() {
    protobuf_AddDesc_ViewpointMetadata_2eproto();
  }
} static_descriptor_initializer_ViewpointMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoverPhoto::kPhotoIdFieldNumber;
const int CoverPhoto::kEpisodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoverPhoto::CoverPhoto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ViewpointMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoverPhoto)
}

void CoverPhoto::InitAsDefaultInstance() {
  photo_id_ = const_cast< ::PhotoId*>(
      ::PhotoId::internal_default_instance());
  episode_id_ = const_cast< ::EpisodeId*>(
      ::EpisodeId::internal_default_instance());
}

CoverPhoto::CoverPhoto(const CoverPhoto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CoverPhoto)
}

void CoverPhoto::SharedCtor() {
  _cached_size_ = 0;
  photo_id_ = NULL;
  episode_id_ = NULL;
}

CoverPhoto::~CoverPhoto() {
  // @@protoc_insertion_point(destructor:CoverPhoto)
  SharedDtor();
}

void CoverPhoto::SharedDtor() {
  if (this != &CoverPhoto_default_instance_.get()) {
    delete photo_id_;
    delete episode_id_;
  }
}

void CoverPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoverPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoverPhoto_descriptor_;
}

const CoverPhoto& CoverPhoto::default_instance() {
  protobuf_InitDefaults_ViewpointMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CoverPhoto> CoverPhoto_default_instance_;

CoverPhoto* CoverPhoto::New(::google::protobuf::Arena* arena) const {
  CoverPhoto* n = new CoverPhoto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoverPhoto::Clear() {
// @@protoc_insertion_point(message_clear_start:CoverPhoto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_photo_id()) {
      if (photo_id_ != NULL) photo_id_->::PhotoId::Clear();
    }
    if (has_episode_id()) {
      if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CoverPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoverPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PhotoId photo_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_episode_id;
        break;
      }

      // optional .EpisodeId episode_id = 2;
      case 2: {
        if (tag == 18) {
         parse_episode_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_episode_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoverPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoverPhoto)
  return false;
#undef DO_
}

void CoverPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoverPhoto)
  // optional .PhotoId photo_id = 1;
  if (has_photo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->photo_id_, output);
  }

  // optional .EpisodeId episode_id = 2;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->episode_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CoverPhoto)
}

::google::protobuf::uint8* CoverPhoto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CoverPhoto)
  // optional .PhotoId photo_id = 1;
  if (has_photo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->photo_id_, false, target);
  }

  // optional .EpisodeId episode_id = 2;
  if (has_episode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->episode_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CoverPhoto)
  return target;
}

size_t CoverPhoto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoverPhoto)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .PhotoId photo_id = 1;
    if (has_photo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->photo_id_);
    }

    // optional .EpisodeId episode_id = 2;
    if (has_episode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->episode_id_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoverPhoto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CoverPhoto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoverPhoto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoverPhoto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CoverPhoto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CoverPhoto)
    UnsafeMergeFrom(*source);
  }
}

void CoverPhoto::MergeFrom(const CoverPhoto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoverPhoto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CoverPhoto::UnsafeMergeFrom(const CoverPhoto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_photo_id()) {
      mutable_photo_id()->::PhotoId::MergeFrom(from.photo_id());
    }
    if (from.has_episode_id()) {
      mutable_episode_id()->::EpisodeId::MergeFrom(from.episode_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CoverPhoto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CoverPhoto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoverPhoto::CopyFrom(const CoverPhoto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoverPhoto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CoverPhoto::IsInitialized() const {

  return true;
}

void CoverPhoto::Swap(CoverPhoto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoverPhoto::InternalSwap(CoverPhoto* other) {
  std::swap(photo_id_, other->photo_id_);
  std::swap(episode_id_, other->episode_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoverPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoverPhoto_descriptor_;
  metadata.reflection = CoverPhoto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoverPhoto

// optional .PhotoId photo_id = 1;
bool CoverPhoto::has_photo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CoverPhoto::set_has_photo_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CoverPhoto::clear_has_photo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CoverPhoto::clear_photo_id() {
  if (photo_id_ != NULL) photo_id_->::PhotoId::Clear();
  clear_has_photo_id();
}
const ::PhotoId& CoverPhoto::photo_id() const {
  // @@protoc_insertion_point(field_get:CoverPhoto.photo_id)
  return photo_id_ != NULL ? *photo_id_
                         : *::PhotoId::internal_default_instance();
}
::PhotoId* CoverPhoto::mutable_photo_id() {
  set_has_photo_id();
  if (photo_id_ == NULL) {
    photo_id_ = new ::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:CoverPhoto.photo_id)
  return photo_id_;
}
::PhotoId* CoverPhoto::release_photo_id() {
  // @@protoc_insertion_point(field_release:CoverPhoto.photo_id)
  clear_has_photo_id();
  ::PhotoId* temp = photo_id_;
  photo_id_ = NULL;
  return temp;
}
void CoverPhoto::set_allocated_photo_id(::PhotoId* photo_id) {
  delete photo_id_;
  photo_id_ = photo_id;
  if (photo_id) {
    set_has_photo_id();
  } else {
    clear_has_photo_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CoverPhoto.photo_id)
}

// optional .EpisodeId episode_id = 2;
bool CoverPhoto::has_episode_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CoverPhoto::set_has_episode_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CoverPhoto::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CoverPhoto::clear_episode_id() {
  if (episode_id_ != NULL) episode_id_->::EpisodeId::Clear();
  clear_has_episode_id();
}
const ::EpisodeId& CoverPhoto::episode_id() const {
  // @@protoc_insertion_point(field_get:CoverPhoto.episode_id)
  return episode_id_ != NULL ? *episode_id_
                         : *::EpisodeId::internal_default_instance();
}
::EpisodeId* CoverPhoto::mutable_episode_id() {
  set_has_episode_id();
  if (episode_id_ == NULL) {
    episode_id_ = new ::EpisodeId;
  }
  // @@protoc_insertion_point(field_mutable:CoverPhoto.episode_id)
  return episode_id_;
}
::EpisodeId* CoverPhoto::release_episode_id() {
  // @@protoc_insertion_point(field_release:CoverPhoto.episode_id)
  clear_has_episode_id();
  ::EpisodeId* temp = episode_id_;
  episode_id_ = NULL;
  return temp;
}
void CoverPhoto::set_allocated_episode_id(::EpisodeId* episode_id) {
  delete episode_id_;
  episode_id_ = episode_id;
  if (episode_id) {
    set_has_episode_id();
  } else {
    clear_has_episode_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CoverPhoto.episode_id)
}

inline const CoverPhoto* CoverPhoto::internal_default_instance() {
  return &CoverPhoto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewpointMetadata::kIdFieldNumber;
const int ViewpointMetadata::kUserIdFieldNumber;
const int ViewpointMetadata::kSharingUserIdFieldNumber;
const int ViewpointMetadata::kTitleFieldNumber;
const int ViewpointMetadata::kDescriptionFieldNumber;
const int ViewpointMetadata::kNameFieldNumber;
const int ViewpointMetadata::kCoverPhotoFieldNumber;
const int ViewpointMetadata::kTypeFieldNumber;
const int ViewpointMetadata::kUpdateSeqFieldNumber;
const int ViewpointMetadata::kViewedSeqFieldNumber;
const int ViewpointMetadata::kQueueFieldNumber;
const int ViewpointMetadata::kLabelAdminFieldNumber;
const int ViewpointMetadata::kLabelAutosaveFieldNumber;
const int ViewpointMetadata::kLabelContributeFieldNumber;
const int ViewpointMetadata::kDEPRECATEDLabelPersonalFieldNumber;
const int ViewpointMetadata::kLabelHiddenFieldNumber;
const int ViewpointMetadata::kLabelRemovedFieldNumber;
const int ViewpointMetadata::kLabelMutedFieldNumber;
const int ViewpointMetadata::kLabelUnrevivableFieldNumber;
const int ViewpointMetadata::kLabelErrorFieldNumber;
const int ViewpointMetadata::kProvisionalFieldNumber;
const int ViewpointMetadata::kUpdateMetadataFieldNumber;
const int ViewpointMetadata::kUpdateFollowerMetadataFieldNumber;
const int ViewpointMetadata::kUpdateRemoveFieldNumber;
const int ViewpointMetadata::kUpdateViewedSeqFieldNumber;
const int ViewpointMetadata::kIndexedTermsFieldNumber;
const int ViewpointMetadata::kDEPRECATEDLastViewedSeqFieldNumber;
const int ViewpointMetadata::kDECPRECATEDLastViewedTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewpointMetadata::ViewpointMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ViewpointMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ViewpointMetadata)
}

void ViewpointMetadata::InitAsDefaultInstance() {
  id_ = const_cast< ::ViewpointId*>(
      ::ViewpointId::internal_default_instance());
  cover_photo_ = const_cast< ::CoverPhoto*>(
      ::CoverPhoto::internal_default_instance());
  queue_ = const_cast< ::QueueMetadata*>(
      ::QueueMetadata::internal_default_instance());
}

ViewpointMetadata::ViewpointMetadata(const ViewpointMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ViewpointMetadata)
}

void ViewpointMetadata::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = NULL;
  cover_photo_ = NULL;
  queue_ = NULL;
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&decprecated_last_viewed_timestamp_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(decprecated_last_viewed_timestamp_));
}

ViewpointMetadata::~ViewpointMetadata() {
  // @@protoc_insertion_point(destructor:ViewpointMetadata)
  SharedDtor();
}

void ViewpointMetadata::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ViewpointMetadata_default_instance_.get()) {
    delete id_;
    delete cover_photo_;
    delete queue_;
  }
}

void ViewpointMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewpointMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewpointMetadata_descriptor_;
}

const ViewpointMetadata& ViewpointMetadata::default_instance() {
  protobuf_InitDefaults_ViewpointMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ViewpointMetadata> ViewpointMetadata_default_instance_;

ViewpointMetadata* ViewpointMetadata::New(::google::protobuf::Arena* arena) const {
  ViewpointMetadata* n = new ViewpointMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewpointMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ViewpointMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ViewpointMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ViewpointMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(user_id_, sharing_user_id_);
    if (has_id()) {
      if (id_ != NULL) id_->::ViewpointId::Clear();
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cover_photo()) {
      if (cover_photo_ != NULL) cover_photo_->::CoverPhoto::Clear();
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(update_seq_, label_hidden_);
    if (has_queue()) {
      if (queue_ != NULL) queue_->::QueueMetadata::Clear();
    }
  }
  ZR_(label_removed_, update_remove_);
  ZR_(update_viewed_seq_, decprecated_last_viewed_timestamp_);

#undef ZR_HELPER_
#undef ZR_

  indexed_terms_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ViewpointMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ViewpointMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ViewpointId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sharing_user_id;
        break;
      }

      // optional int64 sharing_user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sharing_user_id:
          set_has_sharing_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sharing_user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (tag == 34) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointMetadata.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointMetadata.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointMetadata.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_type;
        break;
      }

      // optional string type = 7;
      case 7: {
        if (tag == 58) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointMetadata.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_update_seq;
        break;
      }

      // optional int64 update_seq = 8;
      case 8: {
        if (tag == 64) {
         parse_update_seq:
          set_has_update_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_seq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_viewed_seq;
        break;
      }

      // optional int64 viewed_seq = 9;
      case 9: {
        if (tag == 72) {
         parse_viewed_seq:
          set_has_viewed_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &viewed_seq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_queue;
        break;
      }

      // optional .QueueMetadata queue = 10;
      case 10: {
        if (tag == 82) {
         parse_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cover_photo;
        break;
      }

      // optional .CoverPhoto cover_photo = 11;
      case 11: {
        if (tag == 90) {
         parse_cover_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cover_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_label_admin;
        break;
      }

      // optional bool label_admin = 20;
      case 20: {
        if (tag == 160) {
         parse_label_admin:
          set_has_label_admin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_admin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_label_contribute;
        break;
      }

      // optional bool label_contribute = 21;
      case 21: {
        if (tag == 168) {
         parse_label_contribute:
          set_has_label_contribute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_contribute_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_DEPRECATED_label_personal;
        break;
      }

      // optional bool DEPRECATED_label_personal = 22;
      case 22: {
        if (tag == 176) {
         parse_DEPRECATED_label_personal:
          set_has_deprecated_label_personal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_label_personal_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_label_hidden;
        break;
      }

      // optional bool label_hidden = 23;
      case 23: {
        if (tag == 184) {
         parse_label_hidden:
          set_has_label_hidden();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_hidden_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_label_removed;
        break;
      }

      // optional bool label_removed = 24;
      case 24: {
        if (tag == 192) {
         parse_label_removed:
          set_has_label_removed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_removed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_label_muted;
        break;
      }

      // optional bool label_muted = 25;
      case 25: {
        if (tag == 200) {
         parse_label_muted:
          set_has_label_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_muted_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_label_autosave;
        break;
      }

      // optional bool label_autosave = 26;
      case 26: {
        if (tag == 208) {
         parse_label_autosave:
          set_has_label_autosave();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_autosave_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_label_unrevivable;
        break;
      }

      // optional bool label_unrevivable = 27;
      case 27: {
        if (tag == 216) {
         parse_label_unrevivable:
          set_has_label_unrevivable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_unrevivable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_label_error;
        break;
      }

      // optional bool label_error = 30;
      case 30: {
        if (tag == 240) {
         parse_label_error:
          set_has_label_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_error_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_update_metadata;
        break;
      }

      // optional bool update_metadata = 40;
      case 40: {
        if (tag == 320) {
         parse_update_metadata:
          set_has_update_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_metadata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_update_follower_metadata;
        break;
      }

      // optional bool update_follower_metadata = 41;
      case 41: {
        if (tag == 328) {
         parse_update_follower_metadata:
          set_has_update_follower_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_follower_metadata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_DEPRECATED_last_viewed_seq;
        break;
      }

      // optional int64 DEPRECATED_last_viewed_seq = 42;
      case 42: {
        if (tag == 336) {
         parse_DEPRECATED_last_viewed_seq:
          set_has_deprecated_last_viewed_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_last_viewed_seq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(345)) goto parse_DECPRECATED_last_viewed_timestamp;
        break;
      }

      // optional double DECPRECATED_last_viewed_timestamp = 43;
      case 43: {
        if (tag == 345) {
         parse_DECPRECATED_last_viewed_timestamp:
          set_has_decprecated_last_viewed_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decprecated_last_viewed_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_update_remove;
        break;
      }

      // optional bool update_remove = 44;
      case 44: {
        if (tag == 352) {
         parse_update_remove:
          set_has_update_remove();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_remove_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_provisional;
        break;
      }

      // optional bool provisional = 45;
      case 45: {
        if (tag == 360) {
         parse_provisional:
          set_has_provisional();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provisional_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_indexed_terms;
        break;
      }

      // repeated string indexed_terms = 46;
      case 46: {
        if (tag == 370) {
         parse_indexed_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_indexed_terms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->indexed_terms(this->indexed_terms_size() - 1).data(),
            this->indexed_terms(this->indexed_terms_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointMetadata.indexed_terms");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_indexed_terms;
        if (input->ExpectTag(376)) goto parse_update_viewed_seq;
        break;
      }

      // optional bool update_viewed_seq = 47;
      case 47: {
        if (tag == 376) {
         parse_update_viewed_seq:
          set_has_update_viewed_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_viewed_seq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ViewpointMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ViewpointMetadata)
  return false;
#undef DO_
}

void ViewpointMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ViewpointMetadata)
  // optional .ViewpointId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // optional int64 sharing_user_id = 3;
  if (has_sharing_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sharing_user_id(), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->type(), output);
  }

  // optional int64 update_seq = 8;
  if (has_update_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->update_seq(), output);
  }

  // optional int64 viewed_seq = 9;
  if (has_viewed_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->viewed_seq(), output);
  }

  // optional .QueueMetadata queue = 10;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->queue_, output);
  }

  // optional .CoverPhoto cover_photo = 11;
  if (has_cover_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->cover_photo_, output);
  }

  // optional bool label_admin = 20;
  if (has_label_admin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->label_admin(), output);
  }

  // optional bool label_contribute = 21;
  if (has_label_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->label_contribute(), output);
  }

  // optional bool DEPRECATED_label_personal = 22;
  if (has_deprecated_label_personal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->deprecated_label_personal(), output);
  }

  // optional bool label_hidden = 23;
  if (has_label_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->label_hidden(), output);
  }

  // optional bool label_removed = 24;
  if (has_label_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->label_removed(), output);
  }

  // optional bool label_muted = 25;
  if (has_label_muted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->label_muted(), output);
  }

  // optional bool label_autosave = 26;
  if (has_label_autosave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->label_autosave(), output);
  }

  // optional bool label_unrevivable = 27;
  if (has_label_unrevivable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->label_unrevivable(), output);
  }

  // optional bool label_error = 30;
  if (has_label_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->label_error(), output);
  }

  // optional bool update_metadata = 40;
  if (has_update_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->update_metadata(), output);
  }

  // optional bool update_follower_metadata = 41;
  if (has_update_follower_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->update_follower_metadata(), output);
  }

  // optional int64 DEPRECATED_last_viewed_seq = 42;
  if (has_deprecated_last_viewed_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->deprecated_last_viewed_seq(), output);
  }

  // optional double DECPRECATED_last_viewed_timestamp = 43;
  if (has_decprecated_last_viewed_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->decprecated_last_viewed_timestamp(), output);
  }

  // optional bool update_remove = 44;
  if (has_update_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->update_remove(), output);
  }

  // optional bool provisional = 45;
  if (has_provisional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->provisional(), output);
  }

  // repeated string indexed_terms = 46;
  for (int i = 0; i < this->indexed_terms_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexed_terms(i).data(), this->indexed_terms(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.indexed_terms");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->indexed_terms(i), output);
  }

  // optional bool update_viewed_seq = 47;
  if (has_update_viewed_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->update_viewed_seq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ViewpointMetadata)
}

::google::protobuf::uint8* ViewpointMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ViewpointMetadata)
  // optional .ViewpointId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // optional int64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->user_id(), target);
  }

  // optional int64 sharing_user_id = 3;
  if (has_sharing_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sharing_user_id(), target);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->type(), target);
  }

  // optional int64 update_seq = 8;
  if (has_update_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->update_seq(), target);
  }

  // optional int64 viewed_seq = 9;
  if (has_viewed_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->viewed_seq(), target);
  }

  // optional .QueueMetadata queue = 10;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->queue_, false, target);
  }

  // optional .CoverPhoto cover_photo = 11;
  if (has_cover_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->cover_photo_, false, target);
  }

  // optional bool label_admin = 20;
  if (has_label_admin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->label_admin(), target);
  }

  // optional bool label_contribute = 21;
  if (has_label_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->label_contribute(), target);
  }

  // optional bool DEPRECATED_label_personal = 22;
  if (has_deprecated_label_personal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->deprecated_label_personal(), target);
  }

  // optional bool label_hidden = 23;
  if (has_label_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->label_hidden(), target);
  }

  // optional bool label_removed = 24;
  if (has_label_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->label_removed(), target);
  }

  // optional bool label_muted = 25;
  if (has_label_muted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->label_muted(), target);
  }

  // optional bool label_autosave = 26;
  if (has_label_autosave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->label_autosave(), target);
  }

  // optional bool label_unrevivable = 27;
  if (has_label_unrevivable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->label_unrevivable(), target);
  }

  // optional bool label_error = 30;
  if (has_label_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->label_error(), target);
  }

  // optional bool update_metadata = 40;
  if (has_update_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->update_metadata(), target);
  }

  // optional bool update_follower_metadata = 41;
  if (has_update_follower_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->update_follower_metadata(), target);
  }

  // optional int64 DEPRECATED_last_viewed_seq = 42;
  if (has_deprecated_last_viewed_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->deprecated_last_viewed_seq(), target);
  }

  // optional double DECPRECATED_last_viewed_timestamp = 43;
  if (has_decprecated_last_viewed_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->decprecated_last_viewed_timestamp(), target);
  }

  // optional bool update_remove = 44;
  if (has_update_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->update_remove(), target);
  }

  // optional bool provisional = 45;
  if (has_provisional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->provisional(), target);
  }

  // repeated string indexed_terms = 46;
  for (int i = 0; i < this->indexed_terms_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexed_terms(i).data(), this->indexed_terms(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointMetadata.indexed_terms");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(46, this->indexed_terms(i), target);
  }

  // optional bool update_viewed_seq = 47;
  if (has_update_viewed_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->update_viewed_seq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ViewpointMetadata)
  return target;
}

size_t ViewpointMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ViewpointMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .ViewpointId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int64 sharing_user_id = 3;
    if (has_sharing_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sharing_user_id());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .CoverPhoto cover_photo = 11;
    if (has_cover_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cover_photo_);
    }

    // optional string type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 update_seq = 8;
    if (has_update_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_seq());
    }

    // optional int64 viewed_seq = 9;
    if (has_viewed_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->viewed_seq());
    }

    // optional .QueueMetadata queue = 10;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->queue_);
    }

    // optional bool label_admin = 20;
    if (has_label_admin()) {
      total_size += 2 + 1;
    }

    // optional bool label_autosave = 26;
    if (has_label_autosave()) {
      total_size += 2 + 1;
    }

    // optional bool label_contribute = 21;
    if (has_label_contribute()) {
      total_size += 2 + 1;
    }

    // optional bool DEPRECATED_label_personal = 22;
    if (has_deprecated_label_personal()) {
      total_size += 2 + 1;
    }

    // optional bool label_hidden = 23;
    if (has_label_hidden()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool label_removed = 24;
    if (has_label_removed()) {
      total_size += 2 + 1;
    }

    // optional bool label_muted = 25;
    if (has_label_muted()) {
      total_size += 2 + 1;
    }

    // optional bool label_unrevivable = 27;
    if (has_label_unrevivable()) {
      total_size += 2 + 1;
    }

    // optional bool label_error = 30;
    if (has_label_error()) {
      total_size += 2 + 1;
    }

    // optional bool provisional = 45;
    if (has_provisional()) {
      total_size += 2 + 1;
    }

    // optional bool update_metadata = 40;
    if (has_update_metadata()) {
      total_size += 2 + 1;
    }

    // optional bool update_follower_metadata = 41;
    if (has_update_follower_metadata()) {
      total_size += 2 + 1;
    }

    // optional bool update_remove = 44;
    if (has_update_remove()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 218103808u) {
    // optional bool update_viewed_seq = 47;
    if (has_update_viewed_seq()) {
      total_size += 2 + 1;
    }

    // optional int64 DEPRECATED_last_viewed_seq = 42;
    if (has_deprecated_last_viewed_seq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_last_viewed_seq());
    }

    // optional double DECPRECATED_last_viewed_timestamp = 43;
    if (has_decprecated_last_viewed_timestamp()) {
      total_size += 2 + 8;
    }

  }
  // repeated string indexed_terms = 46;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->indexed_terms_size());
  for (int i = 0; i < this->indexed_terms_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->indexed_terms(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewpointMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ViewpointMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ViewpointMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewpointMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ViewpointMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ViewpointMetadata)
    UnsafeMergeFrom(*source);
  }
}

void ViewpointMetadata::MergeFrom(const ViewpointMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ViewpointMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ViewpointMetadata::UnsafeMergeFrom(const ViewpointMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  indexed_terms_.UnsafeMergeFrom(from.indexed_terms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::ViewpointId::MergeFrom(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sharing_user_id()) {
      set_sharing_user_id(from.sharing_user_id());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_cover_photo()) {
      mutable_cover_photo()->::CoverPhoto::MergeFrom(from.cover_photo());
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_seq()) {
      set_update_seq(from.update_seq());
    }
    if (from.has_viewed_seq()) {
      set_viewed_seq(from.viewed_seq());
    }
    if (from.has_queue()) {
      mutable_queue()->::QueueMetadata::MergeFrom(from.queue());
    }
    if (from.has_label_admin()) {
      set_label_admin(from.label_admin());
    }
    if (from.has_label_autosave()) {
      set_label_autosave(from.label_autosave());
    }
    if (from.has_label_contribute()) {
      set_label_contribute(from.label_contribute());
    }
    if (from.has_deprecated_label_personal()) {
      set_deprecated_label_personal(from.deprecated_label_personal());
    }
    if (from.has_label_hidden()) {
      set_label_hidden(from.label_hidden());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_label_removed()) {
      set_label_removed(from.label_removed());
    }
    if (from.has_label_muted()) {
      set_label_muted(from.label_muted());
    }
    if (from.has_label_unrevivable()) {
      set_label_unrevivable(from.label_unrevivable());
    }
    if (from.has_label_error()) {
      set_label_error(from.label_error());
    }
    if (from.has_provisional()) {
      set_provisional(from.provisional());
    }
    if (from.has_update_metadata()) {
      set_update_metadata(from.update_metadata());
    }
    if (from.has_update_follower_metadata()) {
      set_update_follower_metadata(from.update_follower_metadata());
    }
    if (from.has_update_remove()) {
      set_update_remove(from.update_remove());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_update_viewed_seq()) {
      set_update_viewed_seq(from.update_viewed_seq());
    }
    if (from.has_deprecated_last_viewed_seq()) {
      set_deprecated_last_viewed_seq(from.deprecated_last_viewed_seq());
    }
    if (from.has_decprecated_last_viewed_timestamp()) {
      set_decprecated_last_viewed_timestamp(from.decprecated_last_viewed_timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ViewpointMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ViewpointMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewpointMetadata::CopyFrom(const ViewpointMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ViewpointMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ViewpointMetadata::IsInitialized() const {

  return true;
}

void ViewpointMetadata::Swap(ViewpointMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewpointMetadata::InternalSwap(ViewpointMetadata* other) {
  std::swap(id_, other->id_);
  std::swap(user_id_, other->user_id_);
  std::swap(sharing_user_id_, other->sharing_user_id_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  name_.Swap(&other->name_);
  std::swap(cover_photo_, other->cover_photo_);
  type_.Swap(&other->type_);
  std::swap(update_seq_, other->update_seq_);
  std::swap(viewed_seq_, other->viewed_seq_);
  std::swap(queue_, other->queue_);
  std::swap(label_admin_, other->label_admin_);
  std::swap(label_autosave_, other->label_autosave_);
  std::swap(label_contribute_, other->label_contribute_);
  std::swap(deprecated_label_personal_, other->deprecated_label_personal_);
  std::swap(label_hidden_, other->label_hidden_);
  std::swap(label_removed_, other->label_removed_);
  std::swap(label_muted_, other->label_muted_);
  std::swap(label_unrevivable_, other->label_unrevivable_);
  std::swap(label_error_, other->label_error_);
  std::swap(provisional_, other->provisional_);
  std::swap(update_metadata_, other->update_metadata_);
  std::swap(update_follower_metadata_, other->update_follower_metadata_);
  std::swap(update_remove_, other->update_remove_);
  std::swap(update_viewed_seq_, other->update_viewed_seq_);
  indexed_terms_.UnsafeArenaSwap(&other->indexed_terms_);
  std::swap(deprecated_last_viewed_seq_, other->deprecated_last_viewed_seq_);
  std::swap(decprecated_last_viewed_timestamp_, other->decprecated_last_viewed_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewpointMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewpointMetadata_descriptor_;
  metadata.reflection = ViewpointMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ViewpointMetadata

// optional .ViewpointId id = 1;
bool ViewpointMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ViewpointMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ViewpointMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ViewpointMetadata::clear_id() {
  if (id_ != NULL) id_->::ViewpointId::Clear();
  clear_has_id();
}
const ::ViewpointId& ViewpointMetadata::id() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.id)
  return id_ != NULL ? *id_
                         : *::ViewpointId::internal_default_instance();
}
::ViewpointId* ViewpointMetadata::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::ViewpointId;
  }
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.id)
  return id_;
}
::ViewpointId* ViewpointMetadata::release_id() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.id)
  clear_has_id();
  ::ViewpointId* temp = id_;
  id_ = NULL;
  return temp;
}
void ViewpointMetadata::set_allocated_id(::ViewpointId* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.id)
}

// optional int64 user_id = 2;
bool ViewpointMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ViewpointMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ViewpointMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ViewpointMetadata::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 ViewpointMetadata::user_id() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.user_id)
  return user_id_;
}
void ViewpointMetadata::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.user_id)
}

// optional int64 sharing_user_id = 3;
bool ViewpointMetadata::has_sharing_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ViewpointMetadata::set_has_sharing_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ViewpointMetadata::clear_has_sharing_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ViewpointMetadata::clear_sharing_user_id() {
  sharing_user_id_ = GOOGLE_LONGLONG(0);
  clear_has_sharing_user_id();
}
::google::protobuf::int64 ViewpointMetadata::sharing_user_id() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.sharing_user_id)
  return sharing_user_id_;
}
void ViewpointMetadata::set_sharing_user_id(::google::protobuf::int64 value) {
  set_has_sharing_user_id();
  sharing_user_id_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.sharing_user_id)
}

// optional string title = 4;
bool ViewpointMetadata::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ViewpointMetadata::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
void ViewpointMetadata::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
void ViewpointMetadata::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& ViewpointMetadata::title() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointMetadata::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointMetadata.title)
}
void ViewpointMetadata::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.title)
}
void ViewpointMetadata::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.title)
}
::std::string* ViewpointMetadata::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointMetadata::release_title() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointMetadata::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.title)
}

// optional string description = 5;
bool ViewpointMetadata::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ViewpointMetadata::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
void ViewpointMetadata::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
void ViewpointMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& ViewpointMetadata::description() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointMetadata::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointMetadata.description)
}
void ViewpointMetadata::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.description)
}
void ViewpointMetadata::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.description)
}
::std::string* ViewpointMetadata::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointMetadata::release_description() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.description)
}

// optional string name = 6;
bool ViewpointMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ViewpointMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
void ViewpointMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void ViewpointMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ViewpointMetadata::name() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointMetadata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointMetadata.name)
}
void ViewpointMetadata::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.name)
}
void ViewpointMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.name)
}
::std::string* ViewpointMetadata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointMetadata::release_name() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.name)
}

// optional .CoverPhoto cover_photo = 11;
bool ViewpointMetadata::has_cover_photo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ViewpointMetadata::set_has_cover_photo() {
  _has_bits_[0] |= 0x00000040u;
}
void ViewpointMetadata::clear_has_cover_photo() {
  _has_bits_[0] &= ~0x00000040u;
}
void ViewpointMetadata::clear_cover_photo() {
  if (cover_photo_ != NULL) cover_photo_->::CoverPhoto::Clear();
  clear_has_cover_photo();
}
const ::CoverPhoto& ViewpointMetadata::cover_photo() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.cover_photo)
  return cover_photo_ != NULL ? *cover_photo_
                         : *::CoverPhoto::internal_default_instance();
}
::CoverPhoto* ViewpointMetadata::mutable_cover_photo() {
  set_has_cover_photo();
  if (cover_photo_ == NULL) {
    cover_photo_ = new ::CoverPhoto;
  }
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.cover_photo)
  return cover_photo_;
}
::CoverPhoto* ViewpointMetadata::release_cover_photo() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.cover_photo)
  clear_has_cover_photo();
  ::CoverPhoto* temp = cover_photo_;
  cover_photo_ = NULL;
  return temp;
}
void ViewpointMetadata::set_allocated_cover_photo(::CoverPhoto* cover_photo) {
  delete cover_photo_;
  cover_photo_ = cover_photo;
  if (cover_photo) {
    set_has_cover_photo();
  } else {
    clear_has_cover_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.cover_photo)
}

// optional string type = 7;
bool ViewpointMetadata::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ViewpointMetadata::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void ViewpointMetadata::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void ViewpointMetadata::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& ViewpointMetadata::type() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointMetadata::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointMetadata.type)
}
void ViewpointMetadata::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.type)
}
void ViewpointMetadata::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.type)
}
::std::string* ViewpointMetadata::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointMetadata::release_type() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointMetadata::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.type)
}

// optional int64 update_seq = 8;
bool ViewpointMetadata::has_update_seq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ViewpointMetadata::set_has_update_seq() {
  _has_bits_[0] |= 0x00000100u;
}
void ViewpointMetadata::clear_has_update_seq() {
  _has_bits_[0] &= ~0x00000100u;
}
void ViewpointMetadata::clear_update_seq() {
  update_seq_ = GOOGLE_LONGLONG(0);
  clear_has_update_seq();
}
::google::protobuf::int64 ViewpointMetadata::update_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_seq)
  return update_seq_;
}
void ViewpointMetadata::set_update_seq(::google::protobuf::int64 value) {
  set_has_update_seq();
  update_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_seq)
}

// optional int64 viewed_seq = 9;
bool ViewpointMetadata::has_viewed_seq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ViewpointMetadata::set_has_viewed_seq() {
  _has_bits_[0] |= 0x00000200u;
}
void ViewpointMetadata::clear_has_viewed_seq() {
  _has_bits_[0] &= ~0x00000200u;
}
void ViewpointMetadata::clear_viewed_seq() {
  viewed_seq_ = GOOGLE_LONGLONG(0);
  clear_has_viewed_seq();
}
::google::protobuf::int64 ViewpointMetadata::viewed_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.viewed_seq)
  return viewed_seq_;
}
void ViewpointMetadata::set_viewed_seq(::google::protobuf::int64 value) {
  set_has_viewed_seq();
  viewed_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.viewed_seq)
}

// optional .QueueMetadata queue = 10;
bool ViewpointMetadata::has_queue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ViewpointMetadata::set_has_queue() {
  _has_bits_[0] |= 0x00000400u;
}
void ViewpointMetadata::clear_has_queue() {
  _has_bits_[0] &= ~0x00000400u;
}
void ViewpointMetadata::clear_queue() {
  if (queue_ != NULL) queue_->::QueueMetadata::Clear();
  clear_has_queue();
}
const ::QueueMetadata& ViewpointMetadata::queue() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.queue)
  return queue_ != NULL ? *queue_
                         : *::QueueMetadata::internal_default_instance();
}
::QueueMetadata* ViewpointMetadata::mutable_queue() {
  set_has_queue();
  if (queue_ == NULL) {
    queue_ = new ::QueueMetadata;
  }
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.queue)
  return queue_;
}
::QueueMetadata* ViewpointMetadata::release_queue() {
  // @@protoc_insertion_point(field_release:ViewpointMetadata.queue)
  clear_has_queue();
  ::QueueMetadata* temp = queue_;
  queue_ = NULL;
  return temp;
}
void ViewpointMetadata::set_allocated_queue(::QueueMetadata* queue) {
  delete queue_;
  queue_ = queue;
  if (queue) {
    set_has_queue();
  } else {
    clear_has_queue();
  }
  // @@protoc_insertion_point(field_set_allocated:ViewpointMetadata.queue)
}

// optional bool label_admin = 20;
bool ViewpointMetadata::has_label_admin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ViewpointMetadata::set_has_label_admin() {
  _has_bits_[0] |= 0x00000800u;
}
void ViewpointMetadata::clear_has_label_admin() {
  _has_bits_[0] &= ~0x00000800u;
}
void ViewpointMetadata::clear_label_admin() {
  label_admin_ = false;
  clear_has_label_admin();
}
bool ViewpointMetadata::label_admin() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_admin)
  return label_admin_;
}
void ViewpointMetadata::set_label_admin(bool value) {
  set_has_label_admin();
  label_admin_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_admin)
}

// optional bool label_autosave = 26;
bool ViewpointMetadata::has_label_autosave() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ViewpointMetadata::set_has_label_autosave() {
  _has_bits_[0] |= 0x00001000u;
}
void ViewpointMetadata::clear_has_label_autosave() {
  _has_bits_[0] &= ~0x00001000u;
}
void ViewpointMetadata::clear_label_autosave() {
  label_autosave_ = false;
  clear_has_label_autosave();
}
bool ViewpointMetadata::label_autosave() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_autosave)
  return label_autosave_;
}
void ViewpointMetadata::set_label_autosave(bool value) {
  set_has_label_autosave();
  label_autosave_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_autosave)
}

// optional bool label_contribute = 21;
bool ViewpointMetadata::has_label_contribute() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ViewpointMetadata::set_has_label_contribute() {
  _has_bits_[0] |= 0x00002000u;
}
void ViewpointMetadata::clear_has_label_contribute() {
  _has_bits_[0] &= ~0x00002000u;
}
void ViewpointMetadata::clear_label_contribute() {
  label_contribute_ = false;
  clear_has_label_contribute();
}
bool ViewpointMetadata::label_contribute() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_contribute)
  return label_contribute_;
}
void ViewpointMetadata::set_label_contribute(bool value) {
  set_has_label_contribute();
  label_contribute_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_contribute)
}

// optional bool DEPRECATED_label_personal = 22;
bool ViewpointMetadata::has_deprecated_label_personal() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ViewpointMetadata::set_has_deprecated_label_personal() {
  _has_bits_[0] |= 0x00004000u;
}
void ViewpointMetadata::clear_has_deprecated_label_personal() {
  _has_bits_[0] &= ~0x00004000u;
}
void ViewpointMetadata::clear_deprecated_label_personal() {
  deprecated_label_personal_ = false;
  clear_has_deprecated_label_personal();
}
bool ViewpointMetadata::deprecated_label_personal() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.DEPRECATED_label_personal)
  return deprecated_label_personal_;
}
void ViewpointMetadata::set_deprecated_label_personal(bool value) {
  set_has_deprecated_label_personal();
  deprecated_label_personal_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.DEPRECATED_label_personal)
}

// optional bool label_hidden = 23;
bool ViewpointMetadata::has_label_hidden() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ViewpointMetadata::set_has_label_hidden() {
  _has_bits_[0] |= 0x00008000u;
}
void ViewpointMetadata::clear_has_label_hidden() {
  _has_bits_[0] &= ~0x00008000u;
}
void ViewpointMetadata::clear_label_hidden() {
  label_hidden_ = false;
  clear_has_label_hidden();
}
bool ViewpointMetadata::label_hidden() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_hidden)
  return label_hidden_;
}
void ViewpointMetadata::set_label_hidden(bool value) {
  set_has_label_hidden();
  label_hidden_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_hidden)
}

// optional bool label_removed = 24;
bool ViewpointMetadata::has_label_removed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ViewpointMetadata::set_has_label_removed() {
  _has_bits_[0] |= 0x00010000u;
}
void ViewpointMetadata::clear_has_label_removed() {
  _has_bits_[0] &= ~0x00010000u;
}
void ViewpointMetadata::clear_label_removed() {
  label_removed_ = false;
  clear_has_label_removed();
}
bool ViewpointMetadata::label_removed() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_removed)
  return label_removed_;
}
void ViewpointMetadata::set_label_removed(bool value) {
  set_has_label_removed();
  label_removed_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_removed)
}

// optional bool label_muted = 25;
bool ViewpointMetadata::has_label_muted() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ViewpointMetadata::set_has_label_muted() {
  _has_bits_[0] |= 0x00020000u;
}
void ViewpointMetadata::clear_has_label_muted() {
  _has_bits_[0] &= ~0x00020000u;
}
void ViewpointMetadata::clear_label_muted() {
  label_muted_ = false;
  clear_has_label_muted();
}
bool ViewpointMetadata::label_muted() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_muted)
  return label_muted_;
}
void ViewpointMetadata::set_label_muted(bool value) {
  set_has_label_muted();
  label_muted_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_muted)
}

// optional bool label_unrevivable = 27;
bool ViewpointMetadata::has_label_unrevivable() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ViewpointMetadata::set_has_label_unrevivable() {
  _has_bits_[0] |= 0x00040000u;
}
void ViewpointMetadata::clear_has_label_unrevivable() {
  _has_bits_[0] &= ~0x00040000u;
}
void ViewpointMetadata::clear_label_unrevivable() {
  label_unrevivable_ = false;
  clear_has_label_unrevivable();
}
bool ViewpointMetadata::label_unrevivable() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_unrevivable)
  return label_unrevivable_;
}
void ViewpointMetadata::set_label_unrevivable(bool value) {
  set_has_label_unrevivable();
  label_unrevivable_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_unrevivable)
}

// optional bool label_error = 30;
bool ViewpointMetadata::has_label_error() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ViewpointMetadata::set_has_label_error() {
  _has_bits_[0] |= 0x00080000u;
}
void ViewpointMetadata::clear_has_label_error() {
  _has_bits_[0] &= ~0x00080000u;
}
void ViewpointMetadata::clear_label_error() {
  label_error_ = false;
  clear_has_label_error();
}
bool ViewpointMetadata::label_error() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.label_error)
  return label_error_;
}
void ViewpointMetadata::set_label_error(bool value) {
  set_has_label_error();
  label_error_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.label_error)
}

// optional bool provisional = 45;
bool ViewpointMetadata::has_provisional() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ViewpointMetadata::set_has_provisional() {
  _has_bits_[0] |= 0x00100000u;
}
void ViewpointMetadata::clear_has_provisional() {
  _has_bits_[0] &= ~0x00100000u;
}
void ViewpointMetadata::clear_provisional() {
  provisional_ = false;
  clear_has_provisional();
}
bool ViewpointMetadata::provisional() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.provisional)
  return provisional_;
}
void ViewpointMetadata::set_provisional(bool value) {
  set_has_provisional();
  provisional_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.provisional)
}

// optional bool update_metadata = 40;
bool ViewpointMetadata::has_update_metadata() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ViewpointMetadata::set_has_update_metadata() {
  _has_bits_[0] |= 0x00200000u;
}
void ViewpointMetadata::clear_has_update_metadata() {
  _has_bits_[0] &= ~0x00200000u;
}
void ViewpointMetadata::clear_update_metadata() {
  update_metadata_ = false;
  clear_has_update_metadata();
}
bool ViewpointMetadata::update_metadata() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_metadata)
  return update_metadata_;
}
void ViewpointMetadata::set_update_metadata(bool value) {
  set_has_update_metadata();
  update_metadata_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_metadata)
}

// optional bool update_follower_metadata = 41;
bool ViewpointMetadata::has_update_follower_metadata() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ViewpointMetadata::set_has_update_follower_metadata() {
  _has_bits_[0] |= 0x00400000u;
}
void ViewpointMetadata::clear_has_update_follower_metadata() {
  _has_bits_[0] &= ~0x00400000u;
}
void ViewpointMetadata::clear_update_follower_metadata() {
  update_follower_metadata_ = false;
  clear_has_update_follower_metadata();
}
bool ViewpointMetadata::update_follower_metadata() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_follower_metadata)
  return update_follower_metadata_;
}
void ViewpointMetadata::set_update_follower_metadata(bool value) {
  set_has_update_follower_metadata();
  update_follower_metadata_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_follower_metadata)
}

// optional bool update_remove = 44;
bool ViewpointMetadata::has_update_remove() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ViewpointMetadata::set_has_update_remove() {
  _has_bits_[0] |= 0x00800000u;
}
void ViewpointMetadata::clear_has_update_remove() {
  _has_bits_[0] &= ~0x00800000u;
}
void ViewpointMetadata::clear_update_remove() {
  update_remove_ = false;
  clear_has_update_remove();
}
bool ViewpointMetadata::update_remove() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_remove)
  return update_remove_;
}
void ViewpointMetadata::set_update_remove(bool value) {
  set_has_update_remove();
  update_remove_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_remove)
}

// optional bool update_viewed_seq = 47;
bool ViewpointMetadata::has_update_viewed_seq() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ViewpointMetadata::set_has_update_viewed_seq() {
  _has_bits_[0] |= 0x01000000u;
}
void ViewpointMetadata::clear_has_update_viewed_seq() {
  _has_bits_[0] &= ~0x01000000u;
}
void ViewpointMetadata::clear_update_viewed_seq() {
  update_viewed_seq_ = false;
  clear_has_update_viewed_seq();
}
bool ViewpointMetadata::update_viewed_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.update_viewed_seq)
  return update_viewed_seq_;
}
void ViewpointMetadata::set_update_viewed_seq(bool value) {
  set_has_update_viewed_seq();
  update_viewed_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.update_viewed_seq)
}

// repeated string indexed_terms = 46;
int ViewpointMetadata::indexed_terms_size() const {
  return indexed_terms_.size();
}
void ViewpointMetadata::clear_indexed_terms() {
  indexed_terms_.Clear();
}
const ::std::string& ViewpointMetadata::indexed_terms(int index) const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.indexed_terms)
  return indexed_terms_.Get(index);
}
::std::string* ViewpointMetadata::mutable_indexed_terms(int index) {
  // @@protoc_insertion_point(field_mutable:ViewpointMetadata.indexed_terms)
  return indexed_terms_.Mutable(index);
}
void ViewpointMetadata::set_indexed_terms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ViewpointMetadata.indexed_terms)
  indexed_terms_.Mutable(index)->assign(value);
}
void ViewpointMetadata::set_indexed_terms(int index, const char* value) {
  indexed_terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ViewpointMetadata.indexed_terms)
}
void ViewpointMetadata::set_indexed_terms(int index, const char* value, size_t size) {
  indexed_terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ViewpointMetadata.indexed_terms)
}
::std::string* ViewpointMetadata::add_indexed_terms() {
  // @@protoc_insertion_point(field_add_mutable:ViewpointMetadata.indexed_terms)
  return indexed_terms_.Add();
}
void ViewpointMetadata::add_indexed_terms(const ::std::string& value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ViewpointMetadata.indexed_terms)
}
void ViewpointMetadata::add_indexed_terms(const char* value) {
  indexed_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ViewpointMetadata.indexed_terms)
}
void ViewpointMetadata::add_indexed_terms(const char* value, size_t size) {
  indexed_terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ViewpointMetadata.indexed_terms)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ViewpointMetadata::indexed_terms() const {
  // @@protoc_insertion_point(field_list:ViewpointMetadata.indexed_terms)
  return indexed_terms_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ViewpointMetadata::mutable_indexed_terms() {
  // @@protoc_insertion_point(field_mutable_list:ViewpointMetadata.indexed_terms)
  return &indexed_terms_;
}

// optional int64 DEPRECATED_last_viewed_seq = 42;
bool ViewpointMetadata::has_deprecated_last_viewed_seq() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void ViewpointMetadata::set_has_deprecated_last_viewed_seq() {
  _has_bits_[0] |= 0x04000000u;
}
void ViewpointMetadata::clear_has_deprecated_last_viewed_seq() {
  _has_bits_[0] &= ~0x04000000u;
}
void ViewpointMetadata::clear_deprecated_last_viewed_seq() {
  deprecated_last_viewed_seq_ = GOOGLE_LONGLONG(0);
  clear_has_deprecated_last_viewed_seq();
}
::google::protobuf::int64 ViewpointMetadata::deprecated_last_viewed_seq() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.DEPRECATED_last_viewed_seq)
  return deprecated_last_viewed_seq_;
}
void ViewpointMetadata::set_deprecated_last_viewed_seq(::google::protobuf::int64 value) {
  set_has_deprecated_last_viewed_seq();
  deprecated_last_viewed_seq_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.DEPRECATED_last_viewed_seq)
}

// optional double DECPRECATED_last_viewed_timestamp = 43;
bool ViewpointMetadata::has_decprecated_last_viewed_timestamp() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void ViewpointMetadata::set_has_decprecated_last_viewed_timestamp() {
  _has_bits_[0] |= 0x08000000u;
}
void ViewpointMetadata::clear_has_decprecated_last_viewed_timestamp() {
  _has_bits_[0] &= ~0x08000000u;
}
void ViewpointMetadata::clear_decprecated_last_viewed_timestamp() {
  decprecated_last_viewed_timestamp_ = 0;
  clear_has_decprecated_last_viewed_timestamp();
}
double ViewpointMetadata::decprecated_last_viewed_timestamp() const {
  // @@protoc_insertion_point(field_get:ViewpointMetadata.DECPRECATED_last_viewed_timestamp)
  return decprecated_last_viewed_timestamp_;
}
void ViewpointMetadata::set_decprecated_last_viewed_timestamp(double value) {
  set_has_decprecated_last_viewed_timestamp();
  decprecated_last_viewed_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ViewpointMetadata.DECPRECATED_last_viewed_timestamp)
}

inline const ViewpointMetadata* ViewpointMetadata::internal_default_instance() {
  return &ViewpointMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
