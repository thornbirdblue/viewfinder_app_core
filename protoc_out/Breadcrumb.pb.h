// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Breadcrumb.proto

#ifndef PROTOBUF_Breadcrumb_2eproto__INCLUDED
#define PROTOBUF_Breadcrumb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Location.pb.h"
#include "Placemark.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Breadcrumb_2eproto();
void protobuf_InitDefaults_Breadcrumb_2eproto();
void protobuf_AssignDesc_Breadcrumb_2eproto();
void protobuf_ShutdownFile_Breadcrumb_2eproto();

class Breadcrumb;

// ===================================================================

class Breadcrumb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Breadcrumb) */ {
 public:
  Breadcrumb();
  virtual ~Breadcrumb();

  Breadcrumb(const Breadcrumb& from);

  inline Breadcrumb& operator=(const Breadcrumb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Breadcrumb& default_instance();

  static const Breadcrumb* internal_default_instance();

  void Swap(Breadcrumb* other);

  // implements Message ----------------------------------------------

  inline Breadcrumb* New() const { return New(NULL); }

  Breadcrumb* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Breadcrumb& from);
  void MergeFrom(const Breadcrumb& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Breadcrumb* other);
  void UnsafeMergeFrom(const Breadcrumb& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Location location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::Location& location() const;
  ::Location* mutable_location();
  ::Location* release_location();
  void set_allocated_location(::Location* location);

  // optional .Placemark placemark = 2;
  bool has_placemark() const;
  void clear_placemark();
  static const int kPlacemarkFieldNumber = 2;
  const ::Placemark& placemark() const;
  ::Placemark* mutable_placemark();
  ::Placemark* release_placemark();
  void set_allocated_placemark(::Placemark* placemark);

  // optional double timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  double timestamp() const;
  void set_timestamp(double value);

  // optional string debug = 4;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 4;
  const ::std::string& debug() const;
  void set_debug(const ::std::string& value);
  void set_debug(const char* value);
  void set_debug(const char* value, size_t size);
  ::std::string* mutable_debug();
  ::std::string* release_debug();
  void set_allocated_debug(::std::string* debug);

  // @@protoc_insertion_point(class_scope:Breadcrumb)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_placemark();
  inline void clear_has_placemark();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_debug();
  inline void clear_has_debug();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr debug_;
  ::Location* location_;
  ::Placemark* placemark_;
  double timestamp_;
  friend void  protobuf_InitDefaults_Breadcrumb_2eproto_impl();
  friend void  protobuf_AddDesc_Breadcrumb_2eproto_impl();
  friend void protobuf_AssignDesc_Breadcrumb_2eproto();
  friend void protobuf_ShutdownFile_Breadcrumb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Breadcrumb> Breadcrumb_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Breadcrumb

// optional .Location location = 1;
inline bool Breadcrumb::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Breadcrumb::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Breadcrumb::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Breadcrumb::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
inline const ::Location& Breadcrumb::location() const {
  // @@protoc_insertion_point(field_get:Breadcrumb.location)
  return location_ != NULL ? *location_
                         : *::Location::internal_default_instance();
}
inline ::Location* Breadcrumb::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:Breadcrumb.location)
  return location_;
}
inline ::Location* Breadcrumb::release_location() {
  // @@protoc_insertion_point(field_release:Breadcrumb.location)
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Breadcrumb::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:Breadcrumb.location)
}

// optional .Placemark placemark = 2;
inline bool Breadcrumb::has_placemark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Breadcrumb::set_has_placemark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Breadcrumb::clear_has_placemark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Breadcrumb::clear_placemark() {
  if (placemark_ != NULL) placemark_->::Placemark::Clear();
  clear_has_placemark();
}
inline const ::Placemark& Breadcrumb::placemark() const {
  // @@protoc_insertion_point(field_get:Breadcrumb.placemark)
  return placemark_ != NULL ? *placemark_
                         : *::Placemark::internal_default_instance();
}
inline ::Placemark* Breadcrumb::mutable_placemark() {
  set_has_placemark();
  if (placemark_ == NULL) {
    placemark_ = new ::Placemark;
  }
  // @@protoc_insertion_point(field_mutable:Breadcrumb.placemark)
  return placemark_;
}
inline ::Placemark* Breadcrumb::release_placemark() {
  // @@protoc_insertion_point(field_release:Breadcrumb.placemark)
  clear_has_placemark();
  ::Placemark* temp = placemark_;
  placemark_ = NULL;
  return temp;
}
inline void Breadcrumb::set_allocated_placemark(::Placemark* placemark) {
  delete placemark_;
  placemark_ = placemark;
  if (placemark) {
    set_has_placemark();
  } else {
    clear_has_placemark();
  }
  // @@protoc_insertion_point(field_set_allocated:Breadcrumb.placemark)
}

// optional double timestamp = 3;
inline bool Breadcrumb::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Breadcrumb::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Breadcrumb::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Breadcrumb::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Breadcrumb::timestamp() const {
  // @@protoc_insertion_point(field_get:Breadcrumb.timestamp)
  return timestamp_;
}
inline void Breadcrumb::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Breadcrumb.timestamp)
}

// optional string debug = 4;
inline bool Breadcrumb::has_debug() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Breadcrumb::set_has_debug() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Breadcrumb::clear_has_debug() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Breadcrumb::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug();
}
inline const ::std::string& Breadcrumb::debug() const {
  // @@protoc_insertion_point(field_get:Breadcrumb.debug)
  return debug_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Breadcrumb::set_debug(const ::std::string& value) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Breadcrumb.debug)
}
inline void Breadcrumb::set_debug(const char* value) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Breadcrumb.debug)
}
inline void Breadcrumb::set_debug(const char* value, size_t size) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Breadcrumb.debug)
}
inline ::std::string* Breadcrumb::mutable_debug() {
  set_has_debug();
  // @@protoc_insertion_point(field_mutable:Breadcrumb.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Breadcrumb::release_debug() {
  // @@protoc_insertion_point(field_release:Breadcrumb.debug)
  clear_has_debug();
  return debug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Breadcrumb::set_allocated_debug(::std::string* debug) {
  if (debug != NULL) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:Breadcrumb.debug)
}

inline const Breadcrumb* Breadcrumb::internal_default_instance() {
  return &Breadcrumb_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Breadcrumb_2eproto__INCLUDED
