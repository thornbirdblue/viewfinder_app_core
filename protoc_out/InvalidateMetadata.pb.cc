// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InvalidateMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "InvalidateMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ContactSelection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactSelection_reflection_ = NULL;
const ::google::protobuf::Descriptor* EpisodeSelection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EpisodeSelection_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewpointSelection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewpointSelection_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSelection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSelection_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvalidateMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvalidateMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotificationSelection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotificationSelection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_InvalidateMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_InvalidateMetadata_2eproto() {
  protobuf_AddDesc_InvalidateMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "InvalidateMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  ContactSelection_descriptor_ = file->message_type(0);
  static const int ContactSelection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSelection, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSelection, all_),
  };
  ContactSelection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContactSelection_descriptor_,
      ContactSelection::internal_default_instance(),
      ContactSelection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSelection, _has_bits_),
      -1,
      -1,
      sizeof(ContactSelection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactSelection, _internal_metadata_));
  EpisodeSelection_descriptor_ = file->message_type(1);
  static const int EpisodeSelection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeSelection, episode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeSelection, get_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeSelection, get_photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeSelection, photo_start_key_),
  };
  EpisodeSelection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EpisodeSelection_descriptor_,
      EpisodeSelection::internal_default_instance(),
      EpisodeSelection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeSelection, _has_bits_),
      -1,
      -1,
      sizeof(EpisodeSelection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeSelection, _internal_metadata_));
  ViewpointSelection_descriptor_ = file->message_type(2);
  static const int ViewpointSelection_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, viewpoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, get_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, get_followers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, follower_start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, get_activities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, activity_start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, get_episodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, episode_start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, get_comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, comment_start_key_),
  };
  ViewpointSelection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ViewpointSelection_descriptor_,
      ViewpointSelection::internal_default_instance(),
      ViewpointSelection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, _has_bits_),
      -1,
      -1,
      sizeof(ViewpointSelection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewpointSelection, _internal_metadata_));
  UserSelection_descriptor_ = file->message_type(3);
  static const int UserSelection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSelection, user_id_),
  };
  UserSelection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserSelection_descriptor_,
      UserSelection::internal_default_instance(),
      UserSelection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSelection, _has_bits_),
      -1,
      -1,
      sizeof(UserSelection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSelection, _internal_metadata_));
  InvalidateMetadata_descriptor_ = file->message_type(4);
  static const int InvalidateMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidateMetadata, all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidateMetadata, viewpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidateMetadata, episodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidateMetadata, contacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidateMetadata, users_),
  };
  InvalidateMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InvalidateMetadata_descriptor_,
      InvalidateMetadata::internal_default_instance(),
      InvalidateMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidateMetadata, _has_bits_),
      -1,
      -1,
      sizeof(InvalidateMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidateMetadata, _internal_metadata_));
  NotificationSelection_descriptor_ = file->message_type(5);
  static const int NotificationSelection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotificationSelection, last_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotificationSelection, query_done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotificationSelection, low_water_notification_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotificationSelection, max_min_required_version_),
  };
  NotificationSelection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotificationSelection_descriptor_,
      NotificationSelection::internal_default_instance(),
      NotificationSelection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotificationSelection, _has_bits_),
      -1,
      -1,
      sizeof(NotificationSelection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotificationSelection, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_InvalidateMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContactSelection_descriptor_, ContactSelection::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EpisodeSelection_descriptor_, EpisodeSelection::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ViewpointSelection_descriptor_, ViewpointSelection::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserSelection_descriptor_, UserSelection::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InvalidateMetadata_descriptor_, InvalidateMetadata::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotificationSelection_descriptor_, NotificationSelection::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_InvalidateMetadata_2eproto() {
  ContactSelection_default_instance_.Shutdown();
  delete ContactSelection_reflection_;
  EpisodeSelection_default_instance_.Shutdown();
  delete EpisodeSelection_reflection_;
  ViewpointSelection_default_instance_.Shutdown();
  delete ViewpointSelection_reflection_;
  UserSelection_default_instance_.Shutdown();
  delete UserSelection_reflection_;
  InvalidateMetadata_default_instance_.Shutdown();
  delete InvalidateMetadata_reflection_;
  NotificationSelection_default_instance_.Shutdown();
  delete NotificationSelection_reflection_;
}

void protobuf_InitDefaults_InvalidateMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ContactSelection_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EpisodeSelection_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ViewpointSelection_default_instance_.DefaultConstruct();
  UserSelection_default_instance_.DefaultConstruct();
  InvalidateMetadata_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NotificationSelection_default_instance_.DefaultConstruct();
  ContactSelection_default_instance_.get_mutable()->InitAsDefaultInstance();
  EpisodeSelection_default_instance_.get_mutable()->InitAsDefaultInstance();
  ViewpointSelection_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserSelection_default_instance_.get_mutable()->InitAsDefaultInstance();
  InvalidateMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
  NotificationSelection_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_InvalidateMetadata_2eproto_once_);
void protobuf_InitDefaults_InvalidateMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_InvalidateMetadata_2eproto_once_,
                 &protobuf_InitDefaults_InvalidateMetadata_2eproto_impl);
}
void protobuf_AddDesc_InvalidateMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_InvalidateMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030InvalidateMetadata.proto\"2\n\020ContactSel"
    "ection\022\021\n\tstart_key\030\001 \001(\t\022\013\n\003all\030\002 \001(\010\"y"
    "\n\020EpisodeSelection\022\022\n\nepisode_id\030\001 \001(\t\022\035"
    "\n\016get_attributes\030\002 \001(\010:\005false\022\031\n\nget_pho"
    "tos\030\003 \001(\010:\005false\022\027\n\017photo_start_key\030\004 \001("
    "\t\"\256\002\n\022ViewpointSelection\022\024\n\014viewpoint_id"
    "\030\001 \001(\t\022\035\n\016get_attributes\030\002 \001(\010:\005false\022\034\n"
    "\rget_followers\030\003 \001(\010:\005false\022\032\n\022follower_"
    "start_key\030\004 \001(\t\022\035\n\016get_activities\030\005 \001(\010:"
    "\005false\022\032\n\022activity_start_key\030\006 \001(\t\022\033\n\014ge"
    "t_episodes\030\007 \001(\010:\005false\022\031\n\021episode_start"
    "_key\030\010 \001(\t\022\033\n\014get_comments\030\t \001(\010:\005false\022"
    "\031\n\021comment_start_key\030\n \001(\t\" \n\rUserSelect"
    "ion\022\017\n\007user_id\030\001 \001(\003\"\263\001\n\022InvalidateMetad"
    "ata\022\013\n\003all\030\001 \001(\010\022\'\n\nviewpoints\030\002 \003(\0132\023.V"
    "iewpointSelection\022#\n\010episodes\030\003 \003(\0132\021.Ep"
    "isodeSelection\022#\n\010contacts\030\004 \001(\0132\021.Conta"
    "ctSelection\022\035\n\005users\030\005 \003(\0132\016.UserSelecti"
    "on\"\202\001\n\025NotificationSelection\022\020\n\010last_key"
    "\030\001 \001(\t\022\022\n\nquery_done\030\002 \001(\010\022!\n\031low_water_"
    "notification_id\030\003 \001(\003\022 \n\030max_min_require"
    "d_version\030\004 \001(\005B+\n\023co.viewfinder.protoB\024"
    "InvalidateMetadataPB", 900);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InvalidateMetadata.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_InvalidateMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_InvalidateMetadata_2eproto_once_);
void protobuf_AddDesc_InvalidateMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_InvalidateMetadata_2eproto_once_,
                 &protobuf_AddDesc_InvalidateMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_InvalidateMetadata_2eproto {
  StaticDescriptorInitializer_InvalidateMetadata_2eproto() {
    protobuf_AddDesc_InvalidateMetadata_2eproto();
  }
} static_descriptor_initializer_InvalidateMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactSelection::kStartKeyFieldNumber;
const int ContactSelection::kAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactSelection::ContactSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_InvalidateMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactSelection)
}

void ContactSelection::InitAsDefaultInstance() {
}

ContactSelection::ContactSelection(const ContactSelection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContactSelection)
}

void ContactSelection::SharedCtor() {
  _cached_size_ = 0;
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  all_ = false;
}

ContactSelection::~ContactSelection() {
  // @@protoc_insertion_point(destructor:ContactSelection)
  SharedDtor();
}

void ContactSelection::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContactSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactSelection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactSelection_descriptor_;
}

const ContactSelection& ContactSelection::default_instance() {
  protobuf_InitDefaults_InvalidateMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ContactSelection> ContactSelection_default_instance_;

ContactSelection* ContactSelection::New(::google::protobuf::Arena* arena) const {
  ContactSelection* n = new ContactSelection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactSelection)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_start_key()) {
      start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    all_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContactSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContactSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string start_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_key().data(), this->start_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContactSelection.start_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_all;
        break;
      }

      // optional bool all = 2;
      case 2: {
        if (tag == 16) {
         parse_all:
          set_has_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContactSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContactSelection)
  return false;
#undef DO_
}

void ContactSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContactSelection)
  // optional string start_key = 1;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_key().data(), this->start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactSelection.start_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_key(), output);
  }

  // optional bool all = 2;
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->all(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContactSelection)
}

::google::protobuf::uint8* ContactSelection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContactSelection)
  // optional string start_key = 1;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_key().data(), this->start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContactSelection.start_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_key(), target);
  }

  // optional bool all = 2;
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->all(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactSelection)
  return target;
}

size_t ContactSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactSelection)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string start_key = 1;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_key());
    }

    // optional bool all = 2;
    if (has_all()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactSelection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContactSelection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContactSelection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactSelection)
    UnsafeMergeFrom(*source);
  }
}

void ContactSelection::MergeFrom(const ContactSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactSelection)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ContactSelection::UnsafeMergeFrom(const ContactSelection& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_key()) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (from.has_all()) {
      set_all(from.all());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ContactSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactSelection::CopyFrom(const ContactSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactSelection)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ContactSelection::IsInitialized() const {

  return true;
}

void ContactSelection::Swap(ContactSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactSelection::InternalSwap(ContactSelection* other) {
  start_key_.Swap(&other->start_key_);
  std::swap(all_, other->all_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContactSelection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactSelection_descriptor_;
  metadata.reflection = ContactSelection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactSelection

// optional string start_key = 1;
bool ContactSelection::has_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContactSelection::set_has_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ContactSelection::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContactSelection::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
const ::std::string& ContactSelection::start_key() const {
  // @@protoc_insertion_point(field_get:ContactSelection.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactSelection::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContactSelection.start_key)
}
void ContactSelection::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContactSelection.start_key)
}
void ContactSelection::set_start_key(const char* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContactSelection.start_key)
}
::std::string* ContactSelection::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:ContactSelection.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactSelection::release_start_key() {
  // @@protoc_insertion_point(field_release:ContactSelection.start_key)
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactSelection::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:ContactSelection.start_key)
}

// optional bool all = 2;
bool ContactSelection::has_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContactSelection::set_has_all() {
  _has_bits_[0] |= 0x00000002u;
}
void ContactSelection::clear_has_all() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContactSelection::clear_all() {
  all_ = false;
  clear_has_all();
}
bool ContactSelection::all() const {
  // @@protoc_insertion_point(field_get:ContactSelection.all)
  return all_;
}
void ContactSelection::set_all(bool value) {
  set_has_all();
  all_ = value;
  // @@protoc_insertion_point(field_set:ContactSelection.all)
}

inline const ContactSelection* ContactSelection::internal_default_instance() {
  return &ContactSelection_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpisodeSelection::kEpisodeIdFieldNumber;
const int EpisodeSelection::kGetAttributesFieldNumber;
const int EpisodeSelection::kGetPhotosFieldNumber;
const int EpisodeSelection::kPhotoStartKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpisodeSelection::EpisodeSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_InvalidateMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:EpisodeSelection)
}

void EpisodeSelection::InitAsDefaultInstance() {
}

EpisodeSelection::EpisodeSelection(const EpisodeSelection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EpisodeSelection)
}

void EpisodeSelection::SharedCtor() {
  _cached_size_ = 0;
  episode_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&get_attributes_, 0, reinterpret_cast<char*>(&get_photos_) -
    reinterpret_cast<char*>(&get_attributes_) + sizeof(get_photos_));
}

EpisodeSelection::~EpisodeSelection() {
  // @@protoc_insertion_point(destructor:EpisodeSelection)
  SharedDtor();
}

void EpisodeSelection::SharedDtor() {
  episode_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EpisodeSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpisodeSelection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EpisodeSelection_descriptor_;
}

const EpisodeSelection& EpisodeSelection::default_instance() {
  protobuf_InitDefaults_InvalidateMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EpisodeSelection> EpisodeSelection_default_instance_;

EpisodeSelection* EpisodeSelection::New(::google::protobuf::Arena* arena) const {
  EpisodeSelection* n = new EpisodeSelection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EpisodeSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:EpisodeSelection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EpisodeSelection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EpisodeSelection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(get_attributes_, get_photos_);
    if (has_episode_id()) {
      episode_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_photo_start_key()) {
      photo_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EpisodeSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EpisodeSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string episode_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_episode_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->episode_id().data(), this->episode_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EpisodeSelection.episode_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_get_attributes;
        break;
      }

      // optional bool get_attributes = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_get_attributes:
          set_has_get_attributes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_attributes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_get_photos;
        break;
      }

      // optional bool get_photos = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_get_photos:
          set_has_get_photos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_photos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_photo_start_key;
        break;
      }

      // optional string photo_start_key = 4;
      case 4: {
        if (tag == 34) {
         parse_photo_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo_start_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->photo_start_key().data(), this->photo_start_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EpisodeSelection.photo_start_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EpisodeSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EpisodeSelection)
  return false;
#undef DO_
}

void EpisodeSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EpisodeSelection)
  // optional string episode_id = 1;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->episode_id().data(), this->episode_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeSelection.episode_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->episode_id(), output);
  }

  // optional bool get_attributes = 2 [default = false];
  if (has_get_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get_attributes(), output);
  }

  // optional bool get_photos = 3 [default = false];
  if (has_get_photos()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->get_photos(), output);
  }

  // optional string photo_start_key = 4;
  if (has_photo_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->photo_start_key().data(), this->photo_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeSelection.photo_start_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->photo_start_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EpisodeSelection)
}

::google::protobuf::uint8* EpisodeSelection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EpisodeSelection)
  // optional string episode_id = 1;
  if (has_episode_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->episode_id().data(), this->episode_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeSelection.episode_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->episode_id(), target);
  }

  // optional bool get_attributes = 2 [default = false];
  if (has_get_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get_attributes(), target);
  }

  // optional bool get_photos = 3 [default = false];
  if (has_get_photos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->get_photos(), target);
  }

  // optional string photo_start_key = 4;
  if (has_photo_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->photo_start_key().data(), this->photo_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EpisodeSelection.photo_start_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->photo_start_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EpisodeSelection)
  return target;
}

size_t EpisodeSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EpisodeSelection)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string episode_id = 1;
    if (has_episode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->episode_id());
    }

    // optional bool get_attributes = 2 [default = false];
    if (has_get_attributes()) {
      total_size += 1 + 1;
    }

    // optional bool get_photos = 3 [default = false];
    if (has_get_photos()) {
      total_size += 1 + 1;
    }

    // optional string photo_start_key = 4;
    if (has_photo_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->photo_start_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpisodeSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EpisodeSelection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EpisodeSelection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpisodeSelection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EpisodeSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EpisodeSelection)
    UnsafeMergeFrom(*source);
  }
}

void EpisodeSelection::MergeFrom(const EpisodeSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EpisodeSelection)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EpisodeSelection::UnsafeMergeFrom(const EpisodeSelection& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_episode_id()) {
      set_has_episode_id();
      episode_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.episode_id_);
    }
    if (from.has_get_attributes()) {
      set_get_attributes(from.get_attributes());
    }
    if (from.has_get_photos()) {
      set_get_photos(from.get_photos());
    }
    if (from.has_photo_start_key()) {
      set_has_photo_start_key();
      photo_start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_start_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EpisodeSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EpisodeSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpisodeSelection::CopyFrom(const EpisodeSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EpisodeSelection)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EpisodeSelection::IsInitialized() const {

  return true;
}

void EpisodeSelection::Swap(EpisodeSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpisodeSelection::InternalSwap(EpisodeSelection* other) {
  episode_id_.Swap(&other->episode_id_);
  std::swap(get_attributes_, other->get_attributes_);
  std::swap(get_photos_, other->get_photos_);
  photo_start_key_.Swap(&other->photo_start_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EpisodeSelection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EpisodeSelection_descriptor_;
  metadata.reflection = EpisodeSelection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EpisodeSelection

// optional string episode_id = 1;
bool EpisodeSelection::has_episode_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EpisodeSelection::set_has_episode_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EpisodeSelection::clear_has_episode_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EpisodeSelection::clear_episode_id() {
  episode_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_episode_id();
}
const ::std::string& EpisodeSelection::episode_id() const {
  // @@protoc_insertion_point(field_get:EpisodeSelection.episode_id)
  return episode_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeSelection::set_episode_id(const ::std::string& value) {
  set_has_episode_id();
  episode_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeSelection.episode_id)
}
void EpisodeSelection::set_episode_id(const char* value) {
  set_has_episode_id();
  episode_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeSelection.episode_id)
}
void EpisodeSelection::set_episode_id(const char* value, size_t size) {
  set_has_episode_id();
  episode_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeSelection.episode_id)
}
::std::string* EpisodeSelection::mutable_episode_id() {
  set_has_episode_id();
  // @@protoc_insertion_point(field_mutable:EpisodeSelection.episode_id)
  return episode_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EpisodeSelection::release_episode_id() {
  // @@protoc_insertion_point(field_release:EpisodeSelection.episode_id)
  clear_has_episode_id();
  return episode_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeSelection::set_allocated_episode_id(::std::string* episode_id) {
  if (episode_id != NULL) {
    set_has_episode_id();
  } else {
    clear_has_episode_id();
  }
  episode_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), episode_id);
  // @@protoc_insertion_point(field_set_allocated:EpisodeSelection.episode_id)
}

// optional bool get_attributes = 2 [default = false];
bool EpisodeSelection::has_get_attributes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EpisodeSelection::set_has_get_attributes() {
  _has_bits_[0] |= 0x00000002u;
}
void EpisodeSelection::clear_has_get_attributes() {
  _has_bits_[0] &= ~0x00000002u;
}
void EpisodeSelection::clear_get_attributes() {
  get_attributes_ = false;
  clear_has_get_attributes();
}
bool EpisodeSelection::get_attributes() const {
  // @@protoc_insertion_point(field_get:EpisodeSelection.get_attributes)
  return get_attributes_;
}
void EpisodeSelection::set_get_attributes(bool value) {
  set_has_get_attributes();
  get_attributes_ = value;
  // @@protoc_insertion_point(field_set:EpisodeSelection.get_attributes)
}

// optional bool get_photos = 3 [default = false];
bool EpisodeSelection::has_get_photos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EpisodeSelection::set_has_get_photos() {
  _has_bits_[0] |= 0x00000004u;
}
void EpisodeSelection::clear_has_get_photos() {
  _has_bits_[0] &= ~0x00000004u;
}
void EpisodeSelection::clear_get_photos() {
  get_photos_ = false;
  clear_has_get_photos();
}
bool EpisodeSelection::get_photos() const {
  // @@protoc_insertion_point(field_get:EpisodeSelection.get_photos)
  return get_photos_;
}
void EpisodeSelection::set_get_photos(bool value) {
  set_has_get_photos();
  get_photos_ = value;
  // @@protoc_insertion_point(field_set:EpisodeSelection.get_photos)
}

// optional string photo_start_key = 4;
bool EpisodeSelection::has_photo_start_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EpisodeSelection::set_has_photo_start_key() {
  _has_bits_[0] |= 0x00000008u;
}
void EpisodeSelection::clear_has_photo_start_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void EpisodeSelection::clear_photo_start_key() {
  photo_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_photo_start_key();
}
const ::std::string& EpisodeSelection::photo_start_key() const {
  // @@protoc_insertion_point(field_get:EpisodeSelection.photo_start_key)
  return photo_start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeSelection::set_photo_start_key(const ::std::string& value) {
  set_has_photo_start_key();
  photo_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EpisodeSelection.photo_start_key)
}
void EpisodeSelection::set_photo_start_key(const char* value) {
  set_has_photo_start_key();
  photo_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EpisodeSelection.photo_start_key)
}
void EpisodeSelection::set_photo_start_key(const char* value, size_t size) {
  set_has_photo_start_key();
  photo_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EpisodeSelection.photo_start_key)
}
::std::string* EpisodeSelection::mutable_photo_start_key() {
  set_has_photo_start_key();
  // @@protoc_insertion_point(field_mutable:EpisodeSelection.photo_start_key)
  return photo_start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EpisodeSelection::release_photo_start_key() {
  // @@protoc_insertion_point(field_release:EpisodeSelection.photo_start_key)
  clear_has_photo_start_key();
  return photo_start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EpisodeSelection::set_allocated_photo_start_key(::std::string* photo_start_key) {
  if (photo_start_key != NULL) {
    set_has_photo_start_key();
  } else {
    clear_has_photo_start_key();
  }
  photo_start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_start_key);
  // @@protoc_insertion_point(field_set_allocated:EpisodeSelection.photo_start_key)
}

inline const EpisodeSelection* EpisodeSelection::internal_default_instance() {
  return &EpisodeSelection_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewpointSelection::kViewpointIdFieldNumber;
const int ViewpointSelection::kGetAttributesFieldNumber;
const int ViewpointSelection::kGetFollowersFieldNumber;
const int ViewpointSelection::kFollowerStartKeyFieldNumber;
const int ViewpointSelection::kGetActivitiesFieldNumber;
const int ViewpointSelection::kActivityStartKeyFieldNumber;
const int ViewpointSelection::kGetEpisodesFieldNumber;
const int ViewpointSelection::kEpisodeStartKeyFieldNumber;
const int ViewpointSelection::kGetCommentsFieldNumber;
const int ViewpointSelection::kCommentStartKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewpointSelection::ViewpointSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_InvalidateMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ViewpointSelection)
}

void ViewpointSelection::InitAsDefaultInstance() {
}

ViewpointSelection::ViewpointSelection(const ViewpointSelection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ViewpointSelection)
}

void ViewpointSelection::SharedCtor() {
  _cached_size_ = 0;
  viewpoint_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  follower_start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activity_start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  episode_start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&get_attributes_, 0, reinterpret_cast<char*>(&get_comments_) -
    reinterpret_cast<char*>(&get_attributes_) + sizeof(get_comments_));
}

ViewpointSelection::~ViewpointSelection() {
  // @@protoc_insertion_point(destructor:ViewpointSelection)
  SharedDtor();
}

void ViewpointSelection::SharedDtor() {
  viewpoint_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  follower_start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activity_start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  episode_start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ViewpointSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewpointSelection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewpointSelection_descriptor_;
}

const ViewpointSelection& ViewpointSelection::default_instance() {
  protobuf_InitDefaults_InvalidateMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ViewpointSelection> ViewpointSelection_default_instance_;

ViewpointSelection* ViewpointSelection::New(::google::protobuf::Arena* arena) const {
  ViewpointSelection* n = new ViewpointSelection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewpointSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:ViewpointSelection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ViewpointSelection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ViewpointSelection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(get_attributes_, get_episodes_);
    if (has_viewpoint_id()) {
      viewpoint_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_follower_start_key()) {
      follower_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_activity_start_key()) {
      activity_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_episode_start_key()) {
      episode_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    get_comments_ = false;
    if (has_comment_start_key()) {
      comment_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ViewpointSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ViewpointSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string viewpoint_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_viewpoint_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->viewpoint_id().data(), this->viewpoint_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointSelection.viewpoint_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_get_attributes;
        break;
      }

      // optional bool get_attributes = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_get_attributes:
          set_has_get_attributes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_attributes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_get_followers;
        break;
      }

      // optional bool get_followers = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_get_followers:
          set_has_get_followers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_followers_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_follower_start_key;
        break;
      }

      // optional string follower_start_key = 4;
      case 4: {
        if (tag == 34) {
         parse_follower_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_follower_start_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->follower_start_key().data(), this->follower_start_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointSelection.follower_start_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_get_activities;
        break;
      }

      // optional bool get_activities = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_get_activities:
          set_has_get_activities();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_activities_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_activity_start_key;
        break;
      }

      // optional string activity_start_key = 6;
      case 6: {
        if (tag == 50) {
         parse_activity_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activity_start_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->activity_start_key().data(), this->activity_start_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointSelection.activity_start_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_get_episodes;
        break;
      }

      // optional bool get_episodes = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_get_episodes:
          set_has_get_episodes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_episodes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_episode_start_key;
        break;
      }

      // optional string episode_start_key = 8;
      case 8: {
        if (tag == 66) {
         parse_episode_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_episode_start_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->episode_start_key().data(), this->episode_start_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointSelection.episode_start_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_get_comments;
        break;
      }

      // optional bool get_comments = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_get_comments:
          set_has_get_comments();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_comments_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_comment_start_key;
        break;
      }

      // optional string comment_start_key = 10;
      case 10: {
        if (tag == 82) {
         parse_comment_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment_start_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment_start_key().data(), this->comment_start_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ViewpointSelection.comment_start_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ViewpointSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ViewpointSelection)
  return false;
#undef DO_
}

void ViewpointSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ViewpointSelection)
  // optional string viewpoint_id = 1;
  if (has_viewpoint_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewpoint_id().data(), this->viewpoint_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.viewpoint_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->viewpoint_id(), output);
  }

  // optional bool get_attributes = 2 [default = false];
  if (has_get_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get_attributes(), output);
  }

  // optional bool get_followers = 3 [default = false];
  if (has_get_followers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->get_followers(), output);
  }

  // optional string follower_start_key = 4;
  if (has_follower_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->follower_start_key().data(), this->follower_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.follower_start_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->follower_start_key(), output);
  }

  // optional bool get_activities = 5 [default = false];
  if (has_get_activities()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->get_activities(), output);
  }

  // optional string activity_start_key = 6;
  if (has_activity_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activity_start_key().data(), this->activity_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.activity_start_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->activity_start_key(), output);
  }

  // optional bool get_episodes = 7 [default = false];
  if (has_get_episodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->get_episodes(), output);
  }

  // optional string episode_start_key = 8;
  if (has_episode_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->episode_start_key().data(), this->episode_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.episode_start_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->episode_start_key(), output);
  }

  // optional bool get_comments = 9 [default = false];
  if (has_get_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->get_comments(), output);
  }

  // optional string comment_start_key = 10;
  if (has_comment_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment_start_key().data(), this->comment_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.comment_start_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->comment_start_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ViewpointSelection)
}

::google::protobuf::uint8* ViewpointSelection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ViewpointSelection)
  // optional string viewpoint_id = 1;
  if (has_viewpoint_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewpoint_id().data(), this->viewpoint_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.viewpoint_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->viewpoint_id(), target);
  }

  // optional bool get_attributes = 2 [default = false];
  if (has_get_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get_attributes(), target);
  }

  // optional bool get_followers = 3 [default = false];
  if (has_get_followers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->get_followers(), target);
  }

  // optional string follower_start_key = 4;
  if (has_follower_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->follower_start_key().data(), this->follower_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.follower_start_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->follower_start_key(), target);
  }

  // optional bool get_activities = 5 [default = false];
  if (has_get_activities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->get_activities(), target);
  }

  // optional string activity_start_key = 6;
  if (has_activity_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activity_start_key().data(), this->activity_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.activity_start_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->activity_start_key(), target);
  }

  // optional bool get_episodes = 7 [default = false];
  if (has_get_episodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->get_episodes(), target);
  }

  // optional string episode_start_key = 8;
  if (has_episode_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->episode_start_key().data(), this->episode_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.episode_start_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->episode_start_key(), target);
  }

  // optional bool get_comments = 9 [default = false];
  if (has_get_comments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->get_comments(), target);
  }

  // optional string comment_start_key = 10;
  if (has_comment_start_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment_start_key().data(), this->comment_start_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ViewpointSelection.comment_start_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->comment_start_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ViewpointSelection)
  return target;
}

size_t ViewpointSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ViewpointSelection)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string viewpoint_id = 1;
    if (has_viewpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->viewpoint_id());
    }

    // optional bool get_attributes = 2 [default = false];
    if (has_get_attributes()) {
      total_size += 1 + 1;
    }

    // optional bool get_followers = 3 [default = false];
    if (has_get_followers()) {
      total_size += 1 + 1;
    }

    // optional string follower_start_key = 4;
    if (has_follower_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->follower_start_key());
    }

    // optional bool get_activities = 5 [default = false];
    if (has_get_activities()) {
      total_size += 1 + 1;
    }

    // optional string activity_start_key = 6;
    if (has_activity_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activity_start_key());
    }

    // optional bool get_episodes = 7 [default = false];
    if (has_get_episodes()) {
      total_size += 1 + 1;
    }

    // optional string episode_start_key = 8;
    if (has_episode_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->episode_start_key());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool get_comments = 9 [default = false];
    if (has_get_comments()) {
      total_size += 1 + 1;
    }

    // optional string comment_start_key = 10;
    if (has_comment_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment_start_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewpointSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ViewpointSelection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ViewpointSelection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewpointSelection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ViewpointSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ViewpointSelection)
    UnsafeMergeFrom(*source);
  }
}

void ViewpointSelection::MergeFrom(const ViewpointSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ViewpointSelection)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ViewpointSelection::UnsafeMergeFrom(const ViewpointSelection& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewpoint_id()) {
      set_has_viewpoint_id();
      viewpoint_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.viewpoint_id_);
    }
    if (from.has_get_attributes()) {
      set_get_attributes(from.get_attributes());
    }
    if (from.has_get_followers()) {
      set_get_followers(from.get_followers());
    }
    if (from.has_follower_start_key()) {
      set_has_follower_start_key();
      follower_start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.follower_start_key_);
    }
    if (from.has_get_activities()) {
      set_get_activities(from.get_activities());
    }
    if (from.has_activity_start_key()) {
      set_has_activity_start_key();
      activity_start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activity_start_key_);
    }
    if (from.has_get_episodes()) {
      set_get_episodes(from.get_episodes());
    }
    if (from.has_episode_start_key()) {
      set_has_episode_start_key();
      episode_start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.episode_start_key_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_get_comments()) {
      set_get_comments(from.get_comments());
    }
    if (from.has_comment_start_key()) {
      set_has_comment_start_key();
      comment_start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_start_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ViewpointSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ViewpointSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewpointSelection::CopyFrom(const ViewpointSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ViewpointSelection)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ViewpointSelection::IsInitialized() const {

  return true;
}

void ViewpointSelection::Swap(ViewpointSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewpointSelection::InternalSwap(ViewpointSelection* other) {
  viewpoint_id_.Swap(&other->viewpoint_id_);
  std::swap(get_attributes_, other->get_attributes_);
  std::swap(get_followers_, other->get_followers_);
  follower_start_key_.Swap(&other->follower_start_key_);
  std::swap(get_activities_, other->get_activities_);
  activity_start_key_.Swap(&other->activity_start_key_);
  std::swap(get_episodes_, other->get_episodes_);
  episode_start_key_.Swap(&other->episode_start_key_);
  std::swap(get_comments_, other->get_comments_);
  comment_start_key_.Swap(&other->comment_start_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewpointSelection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewpointSelection_descriptor_;
  metadata.reflection = ViewpointSelection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ViewpointSelection

// optional string viewpoint_id = 1;
bool ViewpointSelection::has_viewpoint_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ViewpointSelection::set_has_viewpoint_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ViewpointSelection::clear_has_viewpoint_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ViewpointSelection::clear_viewpoint_id() {
  viewpoint_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_viewpoint_id();
}
const ::std::string& ViewpointSelection::viewpoint_id() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.viewpoint_id)
  return viewpoint_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_viewpoint_id(const ::std::string& value) {
  set_has_viewpoint_id();
  viewpoint_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointSelection.viewpoint_id)
}
void ViewpointSelection::set_viewpoint_id(const char* value) {
  set_has_viewpoint_id();
  viewpoint_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointSelection.viewpoint_id)
}
void ViewpointSelection::set_viewpoint_id(const char* value, size_t size) {
  set_has_viewpoint_id();
  viewpoint_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointSelection.viewpoint_id)
}
::std::string* ViewpointSelection::mutable_viewpoint_id() {
  set_has_viewpoint_id();
  // @@protoc_insertion_point(field_mutable:ViewpointSelection.viewpoint_id)
  return viewpoint_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointSelection::release_viewpoint_id() {
  // @@protoc_insertion_point(field_release:ViewpointSelection.viewpoint_id)
  clear_has_viewpoint_id();
  return viewpoint_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_allocated_viewpoint_id(::std::string* viewpoint_id) {
  if (viewpoint_id != NULL) {
    set_has_viewpoint_id();
  } else {
    clear_has_viewpoint_id();
  }
  viewpoint_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), viewpoint_id);
  // @@protoc_insertion_point(field_set_allocated:ViewpointSelection.viewpoint_id)
}

// optional bool get_attributes = 2 [default = false];
bool ViewpointSelection::has_get_attributes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ViewpointSelection::set_has_get_attributes() {
  _has_bits_[0] |= 0x00000002u;
}
void ViewpointSelection::clear_has_get_attributes() {
  _has_bits_[0] &= ~0x00000002u;
}
void ViewpointSelection::clear_get_attributes() {
  get_attributes_ = false;
  clear_has_get_attributes();
}
bool ViewpointSelection::get_attributes() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.get_attributes)
  return get_attributes_;
}
void ViewpointSelection::set_get_attributes(bool value) {
  set_has_get_attributes();
  get_attributes_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSelection.get_attributes)
}

// optional bool get_followers = 3 [default = false];
bool ViewpointSelection::has_get_followers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ViewpointSelection::set_has_get_followers() {
  _has_bits_[0] |= 0x00000004u;
}
void ViewpointSelection::clear_has_get_followers() {
  _has_bits_[0] &= ~0x00000004u;
}
void ViewpointSelection::clear_get_followers() {
  get_followers_ = false;
  clear_has_get_followers();
}
bool ViewpointSelection::get_followers() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.get_followers)
  return get_followers_;
}
void ViewpointSelection::set_get_followers(bool value) {
  set_has_get_followers();
  get_followers_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSelection.get_followers)
}

// optional string follower_start_key = 4;
bool ViewpointSelection::has_follower_start_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ViewpointSelection::set_has_follower_start_key() {
  _has_bits_[0] |= 0x00000008u;
}
void ViewpointSelection::clear_has_follower_start_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void ViewpointSelection::clear_follower_start_key() {
  follower_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_follower_start_key();
}
const ::std::string& ViewpointSelection::follower_start_key() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.follower_start_key)
  return follower_start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_follower_start_key(const ::std::string& value) {
  set_has_follower_start_key();
  follower_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointSelection.follower_start_key)
}
void ViewpointSelection::set_follower_start_key(const char* value) {
  set_has_follower_start_key();
  follower_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointSelection.follower_start_key)
}
void ViewpointSelection::set_follower_start_key(const char* value, size_t size) {
  set_has_follower_start_key();
  follower_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointSelection.follower_start_key)
}
::std::string* ViewpointSelection::mutable_follower_start_key() {
  set_has_follower_start_key();
  // @@protoc_insertion_point(field_mutable:ViewpointSelection.follower_start_key)
  return follower_start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointSelection::release_follower_start_key() {
  // @@protoc_insertion_point(field_release:ViewpointSelection.follower_start_key)
  clear_has_follower_start_key();
  return follower_start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_allocated_follower_start_key(::std::string* follower_start_key) {
  if (follower_start_key != NULL) {
    set_has_follower_start_key();
  } else {
    clear_has_follower_start_key();
  }
  follower_start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), follower_start_key);
  // @@protoc_insertion_point(field_set_allocated:ViewpointSelection.follower_start_key)
}

// optional bool get_activities = 5 [default = false];
bool ViewpointSelection::has_get_activities() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ViewpointSelection::set_has_get_activities() {
  _has_bits_[0] |= 0x00000010u;
}
void ViewpointSelection::clear_has_get_activities() {
  _has_bits_[0] &= ~0x00000010u;
}
void ViewpointSelection::clear_get_activities() {
  get_activities_ = false;
  clear_has_get_activities();
}
bool ViewpointSelection::get_activities() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.get_activities)
  return get_activities_;
}
void ViewpointSelection::set_get_activities(bool value) {
  set_has_get_activities();
  get_activities_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSelection.get_activities)
}

// optional string activity_start_key = 6;
bool ViewpointSelection::has_activity_start_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ViewpointSelection::set_has_activity_start_key() {
  _has_bits_[0] |= 0x00000020u;
}
void ViewpointSelection::clear_has_activity_start_key() {
  _has_bits_[0] &= ~0x00000020u;
}
void ViewpointSelection::clear_activity_start_key() {
  activity_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_activity_start_key();
}
const ::std::string& ViewpointSelection::activity_start_key() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.activity_start_key)
  return activity_start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_activity_start_key(const ::std::string& value) {
  set_has_activity_start_key();
  activity_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointSelection.activity_start_key)
}
void ViewpointSelection::set_activity_start_key(const char* value) {
  set_has_activity_start_key();
  activity_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointSelection.activity_start_key)
}
void ViewpointSelection::set_activity_start_key(const char* value, size_t size) {
  set_has_activity_start_key();
  activity_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointSelection.activity_start_key)
}
::std::string* ViewpointSelection::mutable_activity_start_key() {
  set_has_activity_start_key();
  // @@protoc_insertion_point(field_mutable:ViewpointSelection.activity_start_key)
  return activity_start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointSelection::release_activity_start_key() {
  // @@protoc_insertion_point(field_release:ViewpointSelection.activity_start_key)
  clear_has_activity_start_key();
  return activity_start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_allocated_activity_start_key(::std::string* activity_start_key) {
  if (activity_start_key != NULL) {
    set_has_activity_start_key();
  } else {
    clear_has_activity_start_key();
  }
  activity_start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activity_start_key);
  // @@protoc_insertion_point(field_set_allocated:ViewpointSelection.activity_start_key)
}

// optional bool get_episodes = 7 [default = false];
bool ViewpointSelection::has_get_episodes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ViewpointSelection::set_has_get_episodes() {
  _has_bits_[0] |= 0x00000040u;
}
void ViewpointSelection::clear_has_get_episodes() {
  _has_bits_[0] &= ~0x00000040u;
}
void ViewpointSelection::clear_get_episodes() {
  get_episodes_ = false;
  clear_has_get_episodes();
}
bool ViewpointSelection::get_episodes() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.get_episodes)
  return get_episodes_;
}
void ViewpointSelection::set_get_episodes(bool value) {
  set_has_get_episodes();
  get_episodes_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSelection.get_episodes)
}

// optional string episode_start_key = 8;
bool ViewpointSelection::has_episode_start_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ViewpointSelection::set_has_episode_start_key() {
  _has_bits_[0] |= 0x00000080u;
}
void ViewpointSelection::clear_has_episode_start_key() {
  _has_bits_[0] &= ~0x00000080u;
}
void ViewpointSelection::clear_episode_start_key() {
  episode_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_episode_start_key();
}
const ::std::string& ViewpointSelection::episode_start_key() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.episode_start_key)
  return episode_start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_episode_start_key(const ::std::string& value) {
  set_has_episode_start_key();
  episode_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointSelection.episode_start_key)
}
void ViewpointSelection::set_episode_start_key(const char* value) {
  set_has_episode_start_key();
  episode_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointSelection.episode_start_key)
}
void ViewpointSelection::set_episode_start_key(const char* value, size_t size) {
  set_has_episode_start_key();
  episode_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointSelection.episode_start_key)
}
::std::string* ViewpointSelection::mutable_episode_start_key() {
  set_has_episode_start_key();
  // @@protoc_insertion_point(field_mutable:ViewpointSelection.episode_start_key)
  return episode_start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointSelection::release_episode_start_key() {
  // @@protoc_insertion_point(field_release:ViewpointSelection.episode_start_key)
  clear_has_episode_start_key();
  return episode_start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_allocated_episode_start_key(::std::string* episode_start_key) {
  if (episode_start_key != NULL) {
    set_has_episode_start_key();
  } else {
    clear_has_episode_start_key();
  }
  episode_start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), episode_start_key);
  // @@protoc_insertion_point(field_set_allocated:ViewpointSelection.episode_start_key)
}

// optional bool get_comments = 9 [default = false];
bool ViewpointSelection::has_get_comments() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ViewpointSelection::set_has_get_comments() {
  _has_bits_[0] |= 0x00000100u;
}
void ViewpointSelection::clear_has_get_comments() {
  _has_bits_[0] &= ~0x00000100u;
}
void ViewpointSelection::clear_get_comments() {
  get_comments_ = false;
  clear_has_get_comments();
}
bool ViewpointSelection::get_comments() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.get_comments)
  return get_comments_;
}
void ViewpointSelection::set_get_comments(bool value) {
  set_has_get_comments();
  get_comments_ = value;
  // @@protoc_insertion_point(field_set:ViewpointSelection.get_comments)
}

// optional string comment_start_key = 10;
bool ViewpointSelection::has_comment_start_key() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ViewpointSelection::set_has_comment_start_key() {
  _has_bits_[0] |= 0x00000200u;
}
void ViewpointSelection::clear_has_comment_start_key() {
  _has_bits_[0] &= ~0x00000200u;
}
void ViewpointSelection::clear_comment_start_key() {
  comment_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment_start_key();
}
const ::std::string& ViewpointSelection::comment_start_key() const {
  // @@protoc_insertion_point(field_get:ViewpointSelection.comment_start_key)
  return comment_start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_comment_start_key(const ::std::string& value) {
  set_has_comment_start_key();
  comment_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewpointSelection.comment_start_key)
}
void ViewpointSelection::set_comment_start_key(const char* value) {
  set_has_comment_start_key();
  comment_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewpointSelection.comment_start_key)
}
void ViewpointSelection::set_comment_start_key(const char* value, size_t size) {
  set_has_comment_start_key();
  comment_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewpointSelection.comment_start_key)
}
::std::string* ViewpointSelection::mutable_comment_start_key() {
  set_has_comment_start_key();
  // @@protoc_insertion_point(field_mutable:ViewpointSelection.comment_start_key)
  return comment_start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewpointSelection::release_comment_start_key() {
  // @@protoc_insertion_point(field_release:ViewpointSelection.comment_start_key)
  clear_has_comment_start_key();
  return comment_start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewpointSelection::set_allocated_comment_start_key(::std::string* comment_start_key) {
  if (comment_start_key != NULL) {
    set_has_comment_start_key();
  } else {
    clear_has_comment_start_key();
  }
  comment_start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment_start_key);
  // @@protoc_insertion_point(field_set_allocated:ViewpointSelection.comment_start_key)
}

inline const ViewpointSelection* ViewpointSelection::internal_default_instance() {
  return &ViewpointSelection_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSelection::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSelection::UserSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_InvalidateMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserSelection)
}

void UserSelection::InitAsDefaultInstance() {
}

UserSelection::UserSelection(const UserSelection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserSelection)
}

void UserSelection::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
}

UserSelection::~UserSelection() {
  // @@protoc_insertion_point(destructor:UserSelection)
  SharedDtor();
}

void UserSelection::SharedDtor() {
}

void UserSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSelection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSelection_descriptor_;
}

const UserSelection& UserSelection::default_instance() {
  protobuf_InitDefaults_InvalidateMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserSelection> UserSelection_default_instance_;

UserSelection* UserSelection::New(::google::protobuf::Arena* arena) const {
  UserSelection* n = new UserSelection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:UserSelection)
  user_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserSelection)
  return false;
#undef DO_
}

void UserSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserSelection)
  // optional int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserSelection)
}

::google::protobuf::uint8* UserSelection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UserSelection)
  // optional int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserSelection)
  return target;
}

size_t UserSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserSelection)
  size_t total_size = 0;

  // optional int64 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserSelection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserSelection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSelection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserSelection)
    UnsafeMergeFrom(*source);
  }
}

void UserSelection::MergeFrom(const UserSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserSelection)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserSelection::UnsafeMergeFrom(const UserSelection& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UserSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSelection::CopyFrom(const UserSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserSelection)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserSelection::IsInitialized() const {

  return true;
}

void UserSelection::Swap(UserSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserSelection::InternalSwap(UserSelection* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserSelection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSelection_descriptor_;
  metadata.reflection = UserSelection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserSelection

// optional int64 user_id = 1;
bool UserSelection::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserSelection::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserSelection::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserSelection::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 UserSelection::user_id() const {
  // @@protoc_insertion_point(field_get:UserSelection.user_id)
  return user_id_;
}
void UserSelection::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:UserSelection.user_id)
}

inline const UserSelection* UserSelection::internal_default_instance() {
  return &UserSelection_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvalidateMetadata::kAllFieldNumber;
const int InvalidateMetadata::kViewpointsFieldNumber;
const int InvalidateMetadata::kEpisodesFieldNumber;
const int InvalidateMetadata::kContactsFieldNumber;
const int InvalidateMetadata::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvalidateMetadata::InvalidateMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_InvalidateMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:InvalidateMetadata)
}

void InvalidateMetadata::InitAsDefaultInstance() {
  contacts_ = const_cast< ::ContactSelection*>(
      ::ContactSelection::internal_default_instance());
}

InvalidateMetadata::InvalidateMetadata(const InvalidateMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InvalidateMetadata)
}

void InvalidateMetadata::SharedCtor() {
  _cached_size_ = 0;
  contacts_ = NULL;
  all_ = false;
}

InvalidateMetadata::~InvalidateMetadata() {
  // @@protoc_insertion_point(destructor:InvalidateMetadata)
  SharedDtor();
}

void InvalidateMetadata::SharedDtor() {
  if (this != &InvalidateMetadata_default_instance_.get()) {
    delete contacts_;
  }
}

void InvalidateMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvalidateMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvalidateMetadata_descriptor_;
}

const InvalidateMetadata& InvalidateMetadata::default_instance() {
  protobuf_InitDefaults_InvalidateMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<InvalidateMetadata> InvalidateMetadata_default_instance_;

InvalidateMetadata* InvalidateMetadata::New(::google::protobuf::Arena* arena) const {
  InvalidateMetadata* n = new InvalidateMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InvalidateMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:InvalidateMetadata)
  if (_has_bits_[0 / 32] & 9u) {
    all_ = false;
    if (has_contacts()) {
      if (contacts_ != NULL) contacts_->::ContactSelection::Clear();
    }
  }
  viewpoints_.Clear();
  episodes_.Clear();
  users_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InvalidateMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InvalidateMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool all = 1;
      case 1: {
        if (tag == 8) {
          set_has_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_viewpoints;
        break;
      }

      // repeated .ViewpointSelection viewpoints = 2;
      case 2: {
        if (tag == 18) {
         parse_viewpoints:
          DO_(input->IncrementRecursionDepth());
         parse_loop_viewpoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_viewpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_viewpoints;
        if (input->ExpectTag(26)) goto parse_loop_episodes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .EpisodeSelection episodes = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_episodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_episodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_episodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_contacts;
        break;
      }

      // optional .ContactSelection contacts = 4;
      case 4: {
        if (tag == 34) {
         parse_contacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_users;
        break;
      }

      // repeated .UserSelection users = 5;
      case 5: {
        if (tag == 42) {
         parse_users:
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InvalidateMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InvalidateMetadata)
  return false;
#undef DO_
}

void InvalidateMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InvalidateMetadata)
  // optional bool all = 1;
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->all(), output);
  }

  // repeated .ViewpointSelection viewpoints = 2;
  for (unsigned int i = 0, n = this->viewpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->viewpoints(i), output);
  }

  // repeated .EpisodeSelection episodes = 3;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->episodes(i), output);
  }

  // optional .ContactSelection contacts = 4;
  if (has_contacts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->contacts_, output);
  }

  // repeated .UserSelection users = 5;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->users(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InvalidateMetadata)
}

::google::protobuf::uint8* InvalidateMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InvalidateMetadata)
  // optional bool all = 1;
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->all(), target);
  }

  // repeated .ViewpointSelection viewpoints = 2;
  for (unsigned int i = 0, n = this->viewpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->viewpoints(i), false, target);
  }

  // repeated .EpisodeSelection episodes = 3;
  for (unsigned int i = 0, n = this->episodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->episodes(i), false, target);
  }

  // optional .ContactSelection contacts = 4;
  if (has_contacts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->contacts_, false, target);
  }

  // repeated .UserSelection users = 5;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->users(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InvalidateMetadata)
  return target;
}

size_t InvalidateMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InvalidateMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 9u) {
    // optional bool all = 1;
    if (has_all()) {
      total_size += 1 + 1;
    }

    // optional .ContactSelection contacts = 4;
    if (has_contacts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contacts_);
    }

  }
  // repeated .ViewpointSelection viewpoints = 2;
  {
    unsigned int count = this->viewpoints_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viewpoints(i));
    }
  }

  // repeated .EpisodeSelection episodes = 3;
  {
    unsigned int count = this->episodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->episodes(i));
    }
  }

  // repeated .UserSelection users = 5;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvalidateMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InvalidateMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InvalidateMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InvalidateMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InvalidateMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InvalidateMetadata)
    UnsafeMergeFrom(*source);
  }
}

void InvalidateMetadata::MergeFrom(const InvalidateMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InvalidateMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void InvalidateMetadata::UnsafeMergeFrom(const InvalidateMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  viewpoints_.MergeFrom(from.viewpoints_);
  episodes_.MergeFrom(from.episodes_);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_all()) {
      set_all(from.all());
    }
    if (from.has_contacts()) {
      mutable_contacts()->::ContactSelection::MergeFrom(from.contacts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void InvalidateMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InvalidateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidateMetadata::CopyFrom(const InvalidateMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InvalidateMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool InvalidateMetadata::IsInitialized() const {

  return true;
}

void InvalidateMetadata::Swap(InvalidateMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvalidateMetadata::InternalSwap(InvalidateMetadata* other) {
  std::swap(all_, other->all_);
  viewpoints_.UnsafeArenaSwap(&other->viewpoints_);
  episodes_.UnsafeArenaSwap(&other->episodes_);
  std::swap(contacts_, other->contacts_);
  users_.UnsafeArenaSwap(&other->users_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InvalidateMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvalidateMetadata_descriptor_;
  metadata.reflection = InvalidateMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InvalidateMetadata

// optional bool all = 1;
bool InvalidateMetadata::has_all() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InvalidateMetadata::set_has_all() {
  _has_bits_[0] |= 0x00000001u;
}
void InvalidateMetadata::clear_has_all() {
  _has_bits_[0] &= ~0x00000001u;
}
void InvalidateMetadata::clear_all() {
  all_ = false;
  clear_has_all();
}
bool InvalidateMetadata::all() const {
  // @@protoc_insertion_point(field_get:InvalidateMetadata.all)
  return all_;
}
void InvalidateMetadata::set_all(bool value) {
  set_has_all();
  all_ = value;
  // @@protoc_insertion_point(field_set:InvalidateMetadata.all)
}

// repeated .ViewpointSelection viewpoints = 2;
int InvalidateMetadata::viewpoints_size() const {
  return viewpoints_.size();
}
void InvalidateMetadata::clear_viewpoints() {
  viewpoints_.Clear();
}
const ::ViewpointSelection& InvalidateMetadata::viewpoints(int index) const {
  // @@protoc_insertion_point(field_get:InvalidateMetadata.viewpoints)
  return viewpoints_.Get(index);
}
::ViewpointSelection* InvalidateMetadata::mutable_viewpoints(int index) {
  // @@protoc_insertion_point(field_mutable:InvalidateMetadata.viewpoints)
  return viewpoints_.Mutable(index);
}
::ViewpointSelection* InvalidateMetadata::add_viewpoints() {
  // @@protoc_insertion_point(field_add:InvalidateMetadata.viewpoints)
  return viewpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::ViewpointSelection >*
InvalidateMetadata::mutable_viewpoints() {
  // @@protoc_insertion_point(field_mutable_list:InvalidateMetadata.viewpoints)
  return &viewpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::ViewpointSelection >&
InvalidateMetadata::viewpoints() const {
  // @@protoc_insertion_point(field_list:InvalidateMetadata.viewpoints)
  return viewpoints_;
}

// repeated .EpisodeSelection episodes = 3;
int InvalidateMetadata::episodes_size() const {
  return episodes_.size();
}
void InvalidateMetadata::clear_episodes() {
  episodes_.Clear();
}
const ::EpisodeSelection& InvalidateMetadata::episodes(int index) const {
  // @@protoc_insertion_point(field_get:InvalidateMetadata.episodes)
  return episodes_.Get(index);
}
::EpisodeSelection* InvalidateMetadata::mutable_episodes(int index) {
  // @@protoc_insertion_point(field_mutable:InvalidateMetadata.episodes)
  return episodes_.Mutable(index);
}
::EpisodeSelection* InvalidateMetadata::add_episodes() {
  // @@protoc_insertion_point(field_add:InvalidateMetadata.episodes)
  return episodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::EpisodeSelection >*
InvalidateMetadata::mutable_episodes() {
  // @@protoc_insertion_point(field_mutable_list:InvalidateMetadata.episodes)
  return &episodes_;
}
const ::google::protobuf::RepeatedPtrField< ::EpisodeSelection >&
InvalidateMetadata::episodes() const {
  // @@protoc_insertion_point(field_list:InvalidateMetadata.episodes)
  return episodes_;
}

// optional .ContactSelection contacts = 4;
bool InvalidateMetadata::has_contacts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InvalidateMetadata::set_has_contacts() {
  _has_bits_[0] |= 0x00000008u;
}
void InvalidateMetadata::clear_has_contacts() {
  _has_bits_[0] &= ~0x00000008u;
}
void InvalidateMetadata::clear_contacts() {
  if (contacts_ != NULL) contacts_->::ContactSelection::Clear();
  clear_has_contacts();
}
const ::ContactSelection& InvalidateMetadata::contacts() const {
  // @@protoc_insertion_point(field_get:InvalidateMetadata.contacts)
  return contacts_ != NULL ? *contacts_
                         : *::ContactSelection::internal_default_instance();
}
::ContactSelection* InvalidateMetadata::mutable_contacts() {
  set_has_contacts();
  if (contacts_ == NULL) {
    contacts_ = new ::ContactSelection;
  }
  // @@protoc_insertion_point(field_mutable:InvalidateMetadata.contacts)
  return contacts_;
}
::ContactSelection* InvalidateMetadata::release_contacts() {
  // @@protoc_insertion_point(field_release:InvalidateMetadata.contacts)
  clear_has_contacts();
  ::ContactSelection* temp = contacts_;
  contacts_ = NULL;
  return temp;
}
void InvalidateMetadata::set_allocated_contacts(::ContactSelection* contacts) {
  delete contacts_;
  contacts_ = contacts;
  if (contacts) {
    set_has_contacts();
  } else {
    clear_has_contacts();
  }
  // @@protoc_insertion_point(field_set_allocated:InvalidateMetadata.contacts)
}

// repeated .UserSelection users = 5;
int InvalidateMetadata::users_size() const {
  return users_.size();
}
void InvalidateMetadata::clear_users() {
  users_.Clear();
}
const ::UserSelection& InvalidateMetadata::users(int index) const {
  // @@protoc_insertion_point(field_get:InvalidateMetadata.users)
  return users_.Get(index);
}
::UserSelection* InvalidateMetadata::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:InvalidateMetadata.users)
  return users_.Mutable(index);
}
::UserSelection* InvalidateMetadata::add_users() {
  // @@protoc_insertion_point(field_add:InvalidateMetadata.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::UserSelection >*
InvalidateMetadata::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:InvalidateMetadata.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::UserSelection >&
InvalidateMetadata::users() const {
  // @@protoc_insertion_point(field_list:InvalidateMetadata.users)
  return users_;
}

inline const InvalidateMetadata* InvalidateMetadata::internal_default_instance() {
  return &InvalidateMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationSelection::kLastKeyFieldNumber;
const int NotificationSelection::kQueryDoneFieldNumber;
const int NotificationSelection::kLowWaterNotificationIdFieldNumber;
const int NotificationSelection::kMaxMinRequiredVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotificationSelection::NotificationSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_InvalidateMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NotificationSelection)
}

void NotificationSelection::InitAsDefaultInstance() {
}

NotificationSelection::NotificationSelection(const NotificationSelection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NotificationSelection)
}

void NotificationSelection::SharedCtor() {
  _cached_size_ = 0;
  last_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&low_water_notification_id_, 0, reinterpret_cast<char*>(&max_min_required_version_) -
    reinterpret_cast<char*>(&low_water_notification_id_) + sizeof(max_min_required_version_));
}

NotificationSelection::~NotificationSelection() {
  // @@protoc_insertion_point(destructor:NotificationSelection)
  SharedDtor();
}

void NotificationSelection::SharedDtor() {
  last_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotificationSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotificationSelection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotificationSelection_descriptor_;
}

const NotificationSelection& NotificationSelection::default_instance() {
  protobuf_InitDefaults_InvalidateMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NotificationSelection> NotificationSelection_default_instance_;

NotificationSelection* NotificationSelection::New(::google::protobuf::Arena* arena) const {
  NotificationSelection* n = new NotificationSelection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotificationSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:NotificationSelection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NotificationSelection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NotificationSelection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(low_water_notification_id_, max_min_required_version_);
    if (has_last_key()) {
      last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NotificationSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NotificationSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string last_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_key().data(), this->last_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NotificationSelection.last_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_query_done;
        break;
      }

      // optional bool query_done = 2;
      case 2: {
        if (tag == 16) {
         parse_query_done:
          set_has_query_done();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_done_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_low_water_notification_id;
        break;
      }

      // optional int64 low_water_notification_id = 3;
      case 3: {
        if (tag == 24) {
         parse_low_water_notification_id:
          set_has_low_water_notification_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_water_notification_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_min_required_version;
        break;
      }

      // optional int32 max_min_required_version = 4;
      case 4: {
        if (tag == 32) {
         parse_max_min_required_version:
          set_has_max_min_required_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_min_required_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NotificationSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NotificationSelection)
  return false;
#undef DO_
}

void NotificationSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NotificationSelection)
  // optional string last_key = 1;
  if (has_last_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_key().data(), this->last_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotificationSelection.last_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->last_key(), output);
  }

  // optional bool query_done = 2;
  if (has_query_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->query_done(), output);
  }

  // optional int64 low_water_notification_id = 3;
  if (has_low_water_notification_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->low_water_notification_id(), output);
  }

  // optional int32 max_min_required_version = 4;
  if (has_max_min_required_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_min_required_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NotificationSelection)
}

::google::protobuf::uint8* NotificationSelection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NotificationSelection)
  // optional string last_key = 1;
  if (has_last_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_key().data(), this->last_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotificationSelection.last_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->last_key(), target);
  }

  // optional bool query_done = 2;
  if (has_query_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->query_done(), target);
  }

  // optional int64 low_water_notification_id = 3;
  if (has_low_water_notification_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->low_water_notification_id(), target);
  }

  // optional int32 max_min_required_version = 4;
  if (has_max_min_required_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_min_required_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NotificationSelection)
  return target;
}

size_t NotificationSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotificationSelection)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string last_key = 1;
    if (has_last_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_key());
    }

    // optional bool query_done = 2;
    if (has_query_done()) {
      total_size += 1 + 1;
    }

    // optional int64 low_water_notification_id = 3;
    if (has_low_water_notification_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->low_water_notification_id());
    }

    // optional int32 max_min_required_version = 4;
    if (has_max_min_required_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_min_required_version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NotificationSelection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NotificationSelection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotificationSelection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NotificationSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NotificationSelection)
    UnsafeMergeFrom(*source);
  }
}

void NotificationSelection::MergeFrom(const NotificationSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NotificationSelection)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NotificationSelection::UnsafeMergeFrom(const NotificationSelection& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_key()) {
      set_has_last_key();
      last_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_key_);
    }
    if (from.has_query_done()) {
      set_query_done(from.query_done());
    }
    if (from.has_low_water_notification_id()) {
      set_low_water_notification_id(from.low_water_notification_id());
    }
    if (from.has_max_min_required_version()) {
      set_max_min_required_version(from.max_min_required_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NotificationSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NotificationSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationSelection::CopyFrom(const NotificationSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotificationSelection)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NotificationSelection::IsInitialized() const {

  return true;
}

void NotificationSelection::Swap(NotificationSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotificationSelection::InternalSwap(NotificationSelection* other) {
  last_key_.Swap(&other->last_key_);
  std::swap(query_done_, other->query_done_);
  std::swap(low_water_notification_id_, other->low_water_notification_id_);
  std::swap(max_min_required_version_, other->max_min_required_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotificationSelection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotificationSelection_descriptor_;
  metadata.reflection = NotificationSelection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotificationSelection

// optional string last_key = 1;
bool NotificationSelection::has_last_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NotificationSelection::set_has_last_key() {
  _has_bits_[0] |= 0x00000001u;
}
void NotificationSelection::clear_has_last_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void NotificationSelection::clear_last_key() {
  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_key();
}
const ::std::string& NotificationSelection::last_key() const {
  // @@protoc_insertion_point(field_get:NotificationSelection.last_key)
  return last_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotificationSelection::set_last_key(const ::std::string& value) {
  set_has_last_key();
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotificationSelection.last_key)
}
void NotificationSelection::set_last_key(const char* value) {
  set_has_last_key();
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotificationSelection.last_key)
}
void NotificationSelection::set_last_key(const char* value, size_t size) {
  set_has_last_key();
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotificationSelection.last_key)
}
::std::string* NotificationSelection::mutable_last_key() {
  set_has_last_key();
  // @@protoc_insertion_point(field_mutable:NotificationSelection.last_key)
  return last_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotificationSelection::release_last_key() {
  // @@protoc_insertion_point(field_release:NotificationSelection.last_key)
  clear_has_last_key();
  return last_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotificationSelection::set_allocated_last_key(::std::string* last_key) {
  if (last_key != NULL) {
    set_has_last_key();
  } else {
    clear_has_last_key();
  }
  last_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_key);
  // @@protoc_insertion_point(field_set_allocated:NotificationSelection.last_key)
}

// optional bool query_done = 2;
bool NotificationSelection::has_query_done() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NotificationSelection::set_has_query_done() {
  _has_bits_[0] |= 0x00000002u;
}
void NotificationSelection::clear_has_query_done() {
  _has_bits_[0] &= ~0x00000002u;
}
void NotificationSelection::clear_query_done() {
  query_done_ = false;
  clear_has_query_done();
}
bool NotificationSelection::query_done() const {
  // @@protoc_insertion_point(field_get:NotificationSelection.query_done)
  return query_done_;
}
void NotificationSelection::set_query_done(bool value) {
  set_has_query_done();
  query_done_ = value;
  // @@protoc_insertion_point(field_set:NotificationSelection.query_done)
}

// optional int64 low_water_notification_id = 3;
bool NotificationSelection::has_low_water_notification_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NotificationSelection::set_has_low_water_notification_id() {
  _has_bits_[0] |= 0x00000004u;
}
void NotificationSelection::clear_has_low_water_notification_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void NotificationSelection::clear_low_water_notification_id() {
  low_water_notification_id_ = GOOGLE_LONGLONG(0);
  clear_has_low_water_notification_id();
}
::google::protobuf::int64 NotificationSelection::low_water_notification_id() const {
  // @@protoc_insertion_point(field_get:NotificationSelection.low_water_notification_id)
  return low_water_notification_id_;
}
void NotificationSelection::set_low_water_notification_id(::google::protobuf::int64 value) {
  set_has_low_water_notification_id();
  low_water_notification_id_ = value;
  // @@protoc_insertion_point(field_set:NotificationSelection.low_water_notification_id)
}

// optional int32 max_min_required_version = 4;
bool NotificationSelection::has_max_min_required_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NotificationSelection::set_has_max_min_required_version() {
  _has_bits_[0] |= 0x00000008u;
}
void NotificationSelection::clear_has_max_min_required_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void NotificationSelection::clear_max_min_required_version() {
  max_min_required_version_ = 0;
  clear_has_max_min_required_version();
}
::google::protobuf::int32 NotificationSelection::max_min_required_version() const {
  // @@protoc_insertion_point(field_get:NotificationSelection.max_min_required_version)
  return max_min_required_version_;
}
void NotificationSelection::set_max_min_required_version(::google::protobuf::int32 value) {
  set_has_max_min_required_version();
  max_min_required_version_ = value;
  // @@protoc_insertion_point(field_set:NotificationSelection.max_min_required_version)
}

inline const NotificationSelection* NotificationSelection::internal_default_instance() {
  return &NotificationSelection_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
