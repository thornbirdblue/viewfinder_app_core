// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CookieMetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CookieMetadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CookieMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CookieMetadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CookieMetadata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CookieMetadata_2eproto() {
  protobuf_AddDesc_CookieMetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CookieMetadata.proto");
  GOOGLE_CHECK(file != NULL);
  CookieMetadata_descriptor_ = file->message_type(0);
  static const int CookieMetadata_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, expiry_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, is_secure_),
  };
  CookieMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CookieMetadata_descriptor_,
      CookieMetadata::internal_default_instance(),
      CookieMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, _has_bits_),
      -1,
      -1,
      sizeof(CookieMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookieMetadata, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CookieMetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CookieMetadata_descriptor_, CookieMetadata::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CookieMetadata_2eproto() {
  CookieMetadata_default_instance_.Shutdown();
  delete CookieMetadata_reflection_;
}

void protobuf_InitDefaults_CookieMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  CookieMetadata_default_instance_.DefaultConstruct();
  CookieMetadata_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_CookieMetadata_2eproto_once_);
void protobuf_InitDefaults_CookieMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_CookieMetadata_2eproto_once_,
                 &protobuf_InitDefaults_CookieMetadata_2eproto_impl);
}
void protobuf_AddDesc_CookieMetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_CookieMetadata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024CookieMetadata.proto\"\225\001\n\016CookieMetadat"
    "a\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\017\n\007commen"
    "t\030\003 \001(\t\022\016\n\006domain\030\004 \001(\t\022\023\n\013expiry_date\030\005"
    " \001(\003\022\014\n\004path\030\006 \001(\t\022\017\n\007version\030\007 \001(\005\022\021\n\ti"
    "s_secure\030\010 \001(\010B\'\n\023co.viewfinder.protoB\020C"
    "ookieMetadataPB", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CookieMetadata.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CookieMetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CookieMetadata_2eproto_once_);
void protobuf_AddDesc_CookieMetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CookieMetadata_2eproto_once_,
                 &protobuf_AddDesc_CookieMetadata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CookieMetadata_2eproto {
  StaticDescriptorInitializer_CookieMetadata_2eproto() {
    protobuf_AddDesc_CookieMetadata_2eproto();
  }
} static_descriptor_initializer_CookieMetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CookieMetadata::kNameFieldNumber;
const int CookieMetadata::kValueFieldNumber;
const int CookieMetadata::kCommentFieldNumber;
const int CookieMetadata::kDomainFieldNumber;
const int CookieMetadata::kExpiryDateFieldNumber;
const int CookieMetadata::kPathFieldNumber;
const int CookieMetadata::kVersionFieldNumber;
const int CookieMetadata::kIsSecureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CookieMetadata::CookieMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CookieMetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CookieMetadata)
}

void CookieMetadata::InitAsDefaultInstance() {
}

CookieMetadata::CookieMetadata(const CookieMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CookieMetadata)
}

void CookieMetadata::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiry_date_, 0, reinterpret_cast<char*>(&is_secure_) -
    reinterpret_cast<char*>(&expiry_date_) + sizeof(is_secure_));
}

CookieMetadata::~CookieMetadata() {
  // @@protoc_insertion_point(destructor:CookieMetadata)
  SharedDtor();
}

void CookieMetadata::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CookieMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CookieMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CookieMetadata_descriptor_;
}

const CookieMetadata& CookieMetadata::default_instance() {
  protobuf_InitDefaults_CookieMetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CookieMetadata> CookieMetadata_default_instance_;

CookieMetadata* CookieMetadata::New(::google::protobuf::Arena* arena) const {
  CookieMetadata* n = new CookieMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CookieMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CookieMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CookieMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CookieMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(expiry_date_, is_secure_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_comment()) {
      comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_domain()) {
      domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CookieMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CookieMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CookieMetadata.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CookieMetadata.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_comment;
        break;
      }

      // optional string comment = 3;
      case 3: {
        if (tag == 26) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CookieMetadata.comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CookieMetadata.domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expiry_date;
        break;
      }

      // optional int64 expiry_date = 5;
      case 5: {
        if (tag == 40) {
         parse_expiry_date:
          set_has_expiry_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_date_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_path;
        break;
      }

      // optional string path = 6;
      case 6: {
        if (tag == 50) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CookieMetadata.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_version;
        break;
      }

      // optional int32 version = 7;
      case 7: {
        if (tag == 56) {
         parse_version:
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_secure;
        break;
      }

      // optional bool is_secure = 8;
      case 8: {
        if (tag == 64) {
         parse_is_secure:
          set_has_is_secure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secure_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CookieMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CookieMetadata)
  return false;
#undef DO_
}

void CookieMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CookieMetadata)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // optional int64 expiry_date = 5;
  if (has_expiry_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expiry_date(), output);
  }

  // optional string path = 6;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->path(), output);
  }

  // optional int32 version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->version(), output);
  }

  // optional bool is_secure = 8;
  if (has_is_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_secure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CookieMetadata)
}

::google::protobuf::uint8* CookieMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CookieMetadata)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // optional int64 expiry_date = 5;
  if (has_expiry_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expiry_date(), target);
  }

  // optional string path = 6;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CookieMetadata.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->path(), target);
  }

  // optional int32 version = 7;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->version(), target);
  }

  // optional bool is_secure = 8;
  if (has_is_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_secure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CookieMetadata)
  return target;
}

size_t CookieMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CookieMetadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional int64 expiry_date = 5;
    if (has_expiry_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry_date());
    }

    // optional string path = 6;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional int32 version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional bool is_secure = 8;
    if (has_is_secure()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CookieMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CookieMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CookieMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CookieMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CookieMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CookieMetadata)
    UnsafeMergeFrom(*source);
  }
}

void CookieMetadata::MergeFrom(const CookieMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CookieMetadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CookieMetadata::UnsafeMergeFrom(const CookieMetadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_comment()) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (from.has_domain()) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (from.has_expiry_date()) {
      set_expiry_date(from.expiry_date());
    }
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_is_secure()) {
      set_is_secure(from.is_secure());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CookieMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CookieMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CookieMetadata::CopyFrom(const CookieMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CookieMetadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CookieMetadata::IsInitialized() const {

  return true;
}

void CookieMetadata::Swap(CookieMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CookieMetadata::InternalSwap(CookieMetadata* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  comment_.Swap(&other->comment_);
  domain_.Swap(&other->domain_);
  std::swap(expiry_date_, other->expiry_date_);
  path_.Swap(&other->path_);
  std::swap(version_, other->version_);
  std::swap(is_secure_, other->is_secure_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CookieMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CookieMetadata_descriptor_;
  metadata.reflection = CookieMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CookieMetadata

// optional string name = 1;
bool CookieMetadata::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CookieMetadata::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CookieMetadata::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CookieMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CookieMetadata::name() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.name)
}
void CookieMetadata::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.name)
}
void CookieMetadata::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.name)
}
::std::string* CookieMetadata::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CookieMetadata::release_name() {
  // @@protoc_insertion_point(field_release:CookieMetadata.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.name)
}

// optional string value = 2;
bool CookieMetadata::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CookieMetadata::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CookieMetadata::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CookieMetadata::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CookieMetadata::value() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.value)
}
void CookieMetadata::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.value)
}
void CookieMetadata::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.value)
}
::std::string* CookieMetadata::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CookieMetadata::release_value() {
  // @@protoc_insertion_point(field_release:CookieMetadata.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.value)
}

// optional string comment = 3;
bool CookieMetadata::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CookieMetadata::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
void CookieMetadata::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
void CookieMetadata::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
const ::std::string& CookieMetadata::comment() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.comment)
}
void CookieMetadata::set_comment(const char* value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.comment)
}
void CookieMetadata::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.comment)
}
::std::string* CookieMetadata::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CookieMetadata::release_comment() {
  // @@protoc_insertion_point(field_release:CookieMetadata.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.comment)
}

// optional string domain = 4;
bool CookieMetadata::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CookieMetadata::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
void CookieMetadata::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
void CookieMetadata::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
const ::std::string& CookieMetadata::domain() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.domain)
}
void CookieMetadata::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.domain)
}
void CookieMetadata::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.domain)
}
::std::string* CookieMetadata::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CookieMetadata::release_domain() {
  // @@protoc_insertion_point(field_release:CookieMetadata.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.domain)
}

// optional int64 expiry_date = 5;
bool CookieMetadata::has_expiry_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CookieMetadata::set_has_expiry_date() {
  _has_bits_[0] |= 0x00000010u;
}
void CookieMetadata::clear_has_expiry_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void CookieMetadata::clear_expiry_date() {
  expiry_date_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_date();
}
::google::protobuf::int64 CookieMetadata::expiry_date() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.expiry_date)
  return expiry_date_;
}
void CookieMetadata::set_expiry_date(::google::protobuf::int64 value) {
  set_has_expiry_date();
  expiry_date_ = value;
  // @@protoc_insertion_point(field_set:CookieMetadata.expiry_date)
}

// optional string path = 6;
bool CookieMetadata::has_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CookieMetadata::set_has_path() {
  _has_bits_[0] |= 0x00000020u;
}
void CookieMetadata::clear_has_path() {
  _has_bits_[0] &= ~0x00000020u;
}
void CookieMetadata::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& CookieMetadata::path() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CookieMetadata.path)
}
void CookieMetadata::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CookieMetadata.path)
}
void CookieMetadata::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CookieMetadata.path)
}
::std::string* CookieMetadata::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:CookieMetadata.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CookieMetadata::release_path() {
  // @@protoc_insertion_point(field_release:CookieMetadata.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CookieMetadata::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:CookieMetadata.path)
}

// optional int32 version = 7;
bool CookieMetadata::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CookieMetadata::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
void CookieMetadata::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void CookieMetadata::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 CookieMetadata::version() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.version)
  return version_;
}
void CookieMetadata::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CookieMetadata.version)
}

// optional bool is_secure = 8;
bool CookieMetadata::has_is_secure() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CookieMetadata::set_has_is_secure() {
  _has_bits_[0] |= 0x00000080u;
}
void CookieMetadata::clear_has_is_secure() {
  _has_bits_[0] &= ~0x00000080u;
}
void CookieMetadata::clear_is_secure() {
  is_secure_ = false;
  clear_has_is_secure();
}
bool CookieMetadata::is_secure() const {
  // @@protoc_insertion_point(field_get:CookieMetadata.is_secure)
  return is_secure_;
}
void CookieMetadata::set_is_secure(bool value) {
  set_has_is_secure();
  is_secure_ = value;
  // @@protoc_insertion_point(field_set:CookieMetadata.is_secure)
}

inline const CookieMetadata* CookieMetadata::internal_default_instance() {
  return &CookieMetadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
